diff --git a/field_collection.module b/field_collection.module
index bf6a005..b0d3514 100644
--- a/field_collection.module
+++ b/field_collection.module
@@ -885,7 +885,7 @@ function field_collection_field_settings_form($field, $instance) {
  * may be used to seamlessly create field collection items during host-entity
  * creation or to save changes to the host entity and its collections at once.
  */
-function field_collection_field_presave($host_entity_type, $host_entity, $field, $instance, $langcode, &$items) {
+function field_collection_field_presave($host_entity_type, $host_entity, $field, $instance, $langcode = LANGUAGE_NONE, &$items) {
   foreach ($items as &$item) {
     // In case the entity has been changed / created, save it and set the id.
     // If the host entity creates a new revision, save new item-revisions as
@@ -895,7 +895,7 @@ function field_collection_field_presave($host_entity_type, $host_entity, $field,
       if ($entity = field_collection_field_get_entity($item)) {
 
         if (!empty($entity->is_new)) {
-          $entity->setHostEntity($host_entity_type, $host_entity, LANGUAGE_NONE, FALSE);
+          $entity->setHostEntity($host_entity_type, $host_entity, $langcode, FALSE);
         }
 
         // If the host entity is saved as new revision, do the same for the item.
@@ -1252,13 +1252,13 @@ function field_collection_field_formatter_view($entity_type, $entity, $field, $i
 /**
  * Helper function to add links to a field collection field.
  */
-function field_collection_field_formatter_links(&$element, $entity_type, $entity, $field, $instance, $langcode, $items, $display) {
+function field_collection_field_formatter_links(&$element, $entity_type, $entity, $field, $instance, $langcode = LANGUAGE_NONE, $items, $display) {
   $settings = $display['settings'];
 
   if ($settings['add'] && ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || count($items) < $field['cardinality'])) {
     // Check whether the current is allowed to create a new item.
     $field_collection_item = entity_create('field_collection_item', array('field_name' => $field['field_name']));
-    $field_collection_item->setHostEntity($entity_type, $entity, LANGUAGE_NONE, FALSE);
+    $field_collection_item->setHostEntity($entity_type, $entity, $langcode, FALSE);
 
     if (field_collection_item_access('create', $field_collection_item)) {
       $path = field_collection_field_get_path($field);
@@ -1586,7 +1586,7 @@ function field_collection_field_get_entity(&$item, $field_name = NULL) {
   elseif (isset($item['value'])) {
     // By default always load the default revision, so caches get used.
     $entity = field_collection_item_load($item['value']);
-    if ($entity->revision_id != $item['revision_id']) {
+    if ($entity && $entity->revision_id != $item['revision_id']) {
       // A non-default revision is a referenced, so load this one.
       $entity = field_collection_item_revision_load($item['revision_id']);
     }
@@ -1646,7 +1646,19 @@ function field_collection_field_widget_embed_validate($element, &$form_state, $c
   $language = $element['#language'];
 
   $field_state = field_form_get_state($field_parents, $field_name, $language, $form_state);
-  $field_collection_item = $field_state['entity'][$element['#delta']];
+
+  //We have to populate the field_collection_item before we can attach it to the form.
+  if (isset($field_state['entity'][$element['#delta']])) {
+    $field_collection_item = $field_state['entity'][$element['#delta']];
+  }
+  elseif ($form_state['input'][$field_state['array_parents'][0]][$field_state['array_parents'][1]][$element['#delta']]) {
+    $field_collection_item = clone $field_state['entity'][0];
+    foreach ($form_state['input'][$field_state['array_parents'][0]][$field_state['array_parents'][1]][$element['#delta']] as $key => $value) {
+      if (property_exists($field_collection_item, $key)) {
+        $field_collection_item->{$key} = $value;
+      }
+    }
+  }
 
   // Attach field API validation of the embedded form.
   field_attach_form_validate('field_collection_item', $field_collection_item, $element, $form_state);
