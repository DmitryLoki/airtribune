<?php

/**
 * Implements hook_help().
 */
function email_confirm_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Configuration of confirmation email sent to users who attempt to change their email address.');
    case 'admin/help#email_confirm':
      return t('<p>The Email Change Confirmation module addresses missing functionality in the core distribution of Drupal. With this module enabled, a user who attempts to change the email address associated with their account must confirm that change by clicking a confirmation link that is sent to the new email address. The confirmation link must be clicked with a certain time period after which the pending update to their email address will expire and they will have to attempt to update their account again. This module was based on code from <a href="!url">this issue</a></p>', array('!url' => 'http://drupal.org/node/85494'));
    case 'admin/config/people/email_confirm':
      return t("When the Email Change Confirmation module is enabled, users who attempt to update their email address will be required to confirm their changes by clicking a confirmation link in an email sent to the new email address. The settings below determine the subject and body of the confirmation email sent to the user. A copy is sent to both the user's original email address and the new address.");
  }
}

/**
 * Implements hook_menu().
 */
function email_confirm_menu() {
  $items = array();

  $items['user/change-mail'] = array(
    'title' => 'Change e-mail',
    'page callback' => 'email_confirm_user_change_mail',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['admin/config/people/email_confirm'] = array(
    'title' => 'Email change confirmation settings',
    'description' => 'Configuration of confirmation email sent to users who attempt to change their email address.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_confirm_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_settings().
 */
function email_confirm_admin_settings() {
  $form = array();

  $form['email_confirm_confirmation_email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address change request email subject'),
    '#description' => t('The above text will be the subject for the email sent to a user that is attempting to update their email address. The placeholders [user:name] and [site:name] will be replaced by the username and the site name.'),
    '#default_value' => email_confirm_mail_text('confirmation_email_subject', NULL, array(), FALSE),
    '#size' => 60,
    '#maxlength' => 256,
    '#required' => TRUE,
  );

  $form['email_confirm_confirmation_email_author'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address change request email author'),
    '#description' => t('The above address will be the \'From\' email address for the confirmation email for an email address change request. If no address is supplied the default site email address will be used.'),
    '#default_value' => variable_get('email_confirm_confirmation_email_author', ''),
    '#size' => 60,
  );

  $form['email_confirm_confirmation_email_bcc'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address change request email BCC email address'),
    '#description' => t('The above address will receive a BCC email copy of the confirmation email for an email address change request.'),
    '#default_value' => variable_get('email_confirm_confirmation_email_bcc', ''),
    '#size' => 60,
  );

  $form['email_confirm_confirmation_email_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email address change request email body'),
    '#description' => t("The above text will be the body for the email sent to a user that is attempting to update their email address. The text here will be sent to the user's new email address. The placeholders [user:name] and [site:name] will be replaced by the username and the site name."),
    '#default_value' => email_confirm_mail_text('confirmation_email_body', NULL, array(), FALSE),
    '#cols' => 80,
    '#rows' => 10,
    '#required' => TRUE,
  );

  $form['email_confirm_confirmation_original_email_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email address change request email body (Original)'),
    '#description' => t("The above text will be the body for the email sent to a user that is attempting to update their email address. The text here will be sent to the user's original email address. The placeholders [user:name] and [site:name] will be replaced by the username and the site name."),
    '#default_value' => email_confirm_mail_text('confirmation_original_email_body', NULL, array(), FALSE),
    '#cols' => 80,
    '#rows' => 10,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_confirm_form_email_confirm_admin_settings_alter(&$form, &$form_state) {
  if (module_exists('token')) {

    foreach (element_children($form) as $key) {
      $element = &$form[$key];

      switch ($key) {
        case 'email_confirm_confirmation_email_body':
        case 'email_confirm_confirmation_original_email_body':
          $element['#description'] = trim(str_replace('The placeholders [user:name] and [site:name] will be replaced by the username and the site name.', t('The list of available tokens that can be used in e-mails is provided below.'), $element['#description']));
          $element += array('#token_types' => array('user'));
          break;
      }
    }

    // Add the token tree UI.
    $form['token_tree'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('user'),
      '#show_restricted' => TRUE,
      '#weight' => 90,
    );

  }
}

/**
 * Admin settings validate
 */
function email_confirm_admin_settings_validate($form, $form_state) {
  if (!empty($form_state['values']['email_confirm_confirmation_email_author']) && !valid_email_address($form_state['values']['email_confirm_confirmation_email_author'])) {
    form_set_error('email_confirm_confirmation_email_author', t('You must enter a valid email address for the "Email address change request email author" setting.'));
  }
  if (!empty($form_state['values']['email_confirm_confirmation_email_bcc']) && !valid_email_address($form_state['values']['email_confirm_confirmation_email_bcc'])) {
    form_set_error('email_confirm_confirmation_email_bcc', t('You must enter a valid email address for the "Email address change request email BCC email address" setting.'));
  }
}

/**
 * Implements hook_variable_info().
 */
function email_confirm_variable_info($options) {
  $type['email_confirm_confirmation_email_subject'] = array(
    'type' => 'string',
    'title' => t('Email address change request email subject', array(), $options),
    'default' => email_confirm_mail_text('confirmation_email_subject', NULL, array(), FALSE),
    'description' => t('The above text will be the subject for the email sent to a user that is attempting to update their email address. The placeholders [user:name] and [site:name] will be replaced by the username and the site name.', array(), $options),
    'localize' => TRUE,
  );

  $type['email_confirm_confirmation_email_body'] = array(
    'type' => 'string',
    'title' => t('Email address change request email body', array(), $options),
    'default' => email_confirm_mail_text('confirmation_email_body', NULL, array(), FALSE),
    'description' => t("The above text will be the body for the email sent to a user that is attempting to update their email address. The text here will be sent to the user's new email address. The placeholders [user:name] and [site:name] will be replaced by the username and the site name.", array(), $options),
    'localize' => TRUE,
  );

  $type['email_confirm_confirmation_original_email_body'] = array(
    'type' => 'string',
    'title' => t('Email address change request email body (Original)', array(), $options),
    'default' => email_confirm_mail_text('confirmation_original_email_body', NULL, array(), FALSE),
    'description' => t("The above text will be the body for the email sent to a user that is attempting to update their email address. The text here will be sent to the user's original email address. The placeholders [user:name] and [site:name] will be replaced by the username and the site name.", array(), $options),
    'localize' => TRUE,
  );

  return $type;
}

/**
 * Implements hook_user_presave().
 */
function email_confirm_user_presave(&$edit, $account, $category) {
  if (!empty($edit['mail']) && (isset($account->mail) && $account->mail != $edit['mail']) && !user_access('administer users') && !drupal_installation_attempted() && (!isset($edit['email_confirmed']) || $edit['email_confirmed'] === FALSE)) {
    // Set a temporary session variable to indicate that the email was changed. Is used in hook_exit
    // to clear out a Drupal message set by the user module after user_save() is called.
    $_SESSION['email_changed'] = TRUE;
    email_confirm_build_mail($edit);
    $edit['data']['email_confirm']['pending_email'] = $edit['mail'];
    $edit['data']['email_confirm']['expiration_time'] = (REQUEST_TIME + 86400);
    module_invoke_all('email_confirm', 'email change', $account->uid, $account->mail, $edit['mail']);
    if (module_exists('rules')) {
      rules_invoke_event('email_confirm_email_change_request', $account, $account->mail, $edit['mail']);
    }
    unset($edit['mail']);
    unset($edit['email_confirmed']);
  }

  if ((isset($edit['email_confirmed']) && $edit['email_confirmed'] === TRUE) || (!empty($edit['data']) && isset($edit['data']['email_confirm']) && $edit['data']['email_confirm']['expiration_time'] < REQUEST_TIME)) {
    unset($edit['data']['email_confirm']);
  }
}

/**
 * Implements hook_form_alter().
 */
function email_confirm_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid && isset($user->data['email_confirm'])) {
    if (isset($user->data['email_confirm']['pending_email']) && $user->data['email_confirm']['expiration_time'] > REQUEST_TIME) {
      $pending_email_notice = t('You currently have a pending change of your email address to <strong>%email</strong>', array('%email' => $user->data['email_confirm']['pending_email'])) . '<br />';
      $form['account']['mail']['#description'] = $pending_email_notice . $form['account']['mail']['#description'];
    }
  }

}

/**
 * Menu callback; process one time email change confirm
 * and redirects to the user page on success.
 */
function email_confirm_user_change_mail($uid = NULL, $timestamp = NULL, $new_mail = NULL, $hash = NULL) {
  global $user;

  // Check if all required parameters are present.
  if (!isset($uid) || !is_numeric($uid) || !isset($timestamp) || !is_numeric($timestamp) || !isset($new_mail) || !isset($hash)) {
    drupal_access_denied();
    return;
  }

  $account = user_load($uid);
  $new_mail = str_replace(' ', '+', $new_mail);

  // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
  $timeout = 86400;
  $current = REQUEST_TIME;

  // Some redundant checks for extra security ?
  if ($timestamp < $current && $account) {
    if (($current - $timestamp) > $timeout) {
      drupal_set_message(t('You have tried to use a one-time e-mail change link for %account that has expired--your change of e-mail request was not completed. Please visit your account edit page if you wish to attempt the change again.', array('%account' => $account->name)), 'error');
      if ($account->uid == $user->uid) {
        drupal_goto('user/' . $account->uid . '/edit');
      }
      else {
        drupal_goto();
      }
    }
    elseif ($user->uid && $user->uid != $account->uid) {
      drupal_set_message(t('You are currently logged in as %user, and are attempting to confirm an e-mail change for %account, which is not allowed. Please log in as %account and initiate a new change of e-mail request.', array('%user' => $user->name, '%account' => $account->name)), 'error');
      drupal_goto();
    }
    elseif ($hash != email_confirm_user_email_rehash($account->pass, $new_mail)) {
      drupal_set_message(t('There was a problem verifying your change of e-mail request--please visit your account edit page and attempt the change again'), 'error');
      if ($user->uid) {
        drupal_goto('user/' . $user->uid . '/edit');
      }
      else {
        drupal_goto('user/login', array('query' => array('destination' => 'user/' . $user->uid . '/edit')));
      }
    }
    elseif ($timestamp > $account->login && $timestamp < $current) {
      watchdog('user', 'User %name used one-time e-mail change link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
      $old_mail = $account->mail;
      user_save($account, array('mail' => $new_mail, 'login' => REQUEST_TIME, 'email_confirmed' => TRUE));
      module_invoke_all('email_confirm', 'email confirmation', $account->uid, $old_mail, $new_mail);
      if (module_exists('rules')) {
        rules_invoke_event('email_confirm_email_change_confirmation', $account, $old_mail, $new_mail);
      }
      drupal_set_message(t('Your e-mail address is now %mail.', array('%mail' => $new_mail)));
      if ($user->uid) {
        drupal_goto('user/' . $user->uid);
      }
      else {
        drupal_goto('user');
      }
    }
    else {
      drupal_set_message(t('You have tried to use a one-time e-mail change link which has either been used or has expired. Please request a new one.'), 'error');
      if ($user->uid) {
        drupal_goto('user/' . $user->uid . '/edit');
      }
      else {
        drupal_goto('user/login', array('query' => array('destination' => 'user/' . $user->uid . '/edit')));
      }
    }
  }
  else {
    // Deny access, no more clues.
    // Everything will be in the watchdog's URL for the administrator to check.
    drupal_access_denied();
  }
}

/**
 * Implements hook_mail().
 */
function email_confirm_mail($key, &$message, $params) {
  $language = $message['language'];
  $account = $params['account'];
  $context = $params['context'];

  $email_confirm = new stdClass();
  $email_confirm->url = $context['url'];

  $variables = array(
    'email_confirm' => $email_confirm,
    'user' => $account
  );

  $message['subject'] = email_confirm_mail_text('confirmation_email_subject', $language, $variables);
  $message['body'][] = email_confirm_mail_text($key . '_body', $language, $variables);

  if (isset($params['headers']['Bcc'])) {
    $message['headers']['Bcc'] = $params['headers']['Bcc'];
  }
}

/**
 * Build and send out the confirmation email to the user's
 * current and proposed new email address.
 */
function email_confirm_build_mail($edit) {
  global $user;
  $params = array();
  $params['account'] = $user;

  $params['context']['url'] = email_confirm_confirmation_email_url($edit);

  if (module_exists('smtp') && variable_get('smtp_from', '') != '') {
    $default_from = $smtp_from;
  }
  else {
    $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  }

  $from = variable_get('email_confirm_confirmation_email_author', $default_from);
  $bcc = variable_get('email_confirm_confirmation_email_bcc', '');

  $params['headers'] = array();
  if ($bcc) {
    $params['headers']['Bcc'] = $bcc;
  }

  if ($message['result'] = drupal_mail('email_confirm', 'confirmation_email', $edit['mail'], user_preferred_language($user), $params, $from)) {
    drupal_mail('email_confirm', 'confirmation_original_email', $user->mail, user_preferred_language($user), $params, $from);
    drupal_set_message(t('A confirmation email has been sent to your new email address. You must follow the link provided in that email within 24 hours in order to confirm the change to your account email address.'));
  }
}

/*
 * Returns a mail string for a variable name.
 *
 * Used by email_confirm_mail(), email_confirm_build_mail() and the module settings form to retrieve strings.
 */
function email_confirm_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $langcode = isset($language) ? $language->language : NULL;

  if (module_exists('i18n_variable') && $langcode) {
    $admin_setting = i18n_variable_get('email_confirm_'. $key, $langcode);
  }
  else {
    $admin_setting = variable_get('email_confirm_' . $key, FALSE);
  }

  if ($admin_setting) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'confirmation_email_subject':
        $text = t('Email address change request for [user:name] at [site:name]', array(), array('langcode' => $langcode));
        break;

      case 'confirmation_email_body':
        $text = t("Hello [user:name],

A request to change your email address has been made at [site:name].
You need to verify the change by clicking on the link below or by
copying and pasting it in your browser:

[email_confirm:email_url]

This is a one-time URL - it can be used only once. It expires after
24 hours. If you do not click the link to confirm, your email address
at [site:name] will not be updated.
", array(), array('langcode' => $langcode));
        break;

      case 'confirmation_original_email_body':
        $text = t("Hello [user:name],

A request to change your email address has been made at [site:name].
In order to confirm the update of your email address you will
need to follow the instructions sent to your new email address
within 24 hours.
", array(), array('langcode' => $langcode));
        break;
    }
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables, array('language' => $language, 'callback' => 'email_confirm_mail_tokens', 'sanitize' => FALSE));
  }

  return $text;
}

/**
 * Generate the tokens for the confirmation emails
 */
function email_confirm_mail_tokens(&$replacements, $data, $options) {
  // Add any core mail tokens
  user_mail_tokens($replacements, $data, $options);

  if (isset($data['email_confirm'])) {
    $replacements['[email_confirm:email_url]'] = $data['email_confirm']->url;
  }
}

/**
 * Generate a URL to confirm an email address change request.
 */
function email_confirm_confirmation_email_url($edit) {
  global $user;
  $timestamp = REQUEST_TIME;
  $pass = isset($edit['pass']) ? md5($edit['pass']) : $user->pass;
  $hash = email_confirm_user_email_rehash($pass, $edit['mail']);

  return url('user/change-mail/' . $user->uid . '/' . $timestamp . '/' . $edit['mail'] . '/' . $hash, array('absolute' => TRUE));
}

/**
 * Generate an MD5 hash of user's passwords and pending changed email address.
 */
function email_confirm_user_email_rehash($pass, $mail) {
  return md5($pass . $mail . drupal_get_private_key());
}

/**
 * Implements hook_exit().
 */
function email_confirm_exit() {
  if (isset($_SESSION['email_changed'])) {
    $pruned_messages = array();
    $status_messages = drupal_get_messages('status', TRUE);
    if (count($status_messages)) {
      foreach ($status_messages['status'] as $i => $message) {
        if (strcmp($message, t('The changes have been saved.')) != 0) {
          $pruned_messages[] = $message;
        }
      }
      if (count($pruned_messages)) {
        foreach ($pruned_messages as $message) {
          drupal_set_message(filter_xss($message), 'status');
        }
      }
    }
    unset($_SESSION['email_changed']);
  }
}
