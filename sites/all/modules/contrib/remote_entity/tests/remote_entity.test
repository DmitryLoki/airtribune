<?php

/**
 * @file
 * Contains tests for the Remote entity module.
 */

/**
 * Test case for Remote Entity CRUD.
 *
 * This uses the dummy connection class and generic entity in the test module.
 * This means that rather than testing the connection, we are testing the
 * machinery that is between Remote Entity's public API and the connection.
 */
class RemoteEntityTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Remote Entity'),
      'description' => t('Test basic operations with remote entities.'),
      'group' => t('Remote Entity'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(array('clients', 'remote_entity'));

    // We need our classes etc to register before we enable modules that provide
    // connection types, connections, or resources.
    module_enable(array('remote_entity_test'));
    $this->resetAll();
  }

  /**
   * Test remote entity load.
   */
  function testRemoteEntityLoad() {
    // Load a remote entity from our dummy connection.
    $remote_id = $this->randomName();
    $entity = remote_entity_load_by_remote_id('test_remote_entity', $remote_id);

    // Check we get back something that now looks like a Drupal entity.
    $this->assertEqual($remote_id, $entity->remote_id, "The retrieved remote entity has the correct remote ID.");
    $this->assertNotNull($entity->eid, "The retrieved remote entity has a local entity ID.");
    // TODO: mapped properties.

    // Check the entity was saved to the database.
    $eid = $entity->eid;
    entity_get_controller('test_remote_entity')->resetCache();
    $entity = entity_load_single('test_remote_entity', $eid);
    $this->assertNotNull($entity, "The retrieved remote entity was saved to the local database.");
  }

  /**
   * Test remote entity save.
   */
  function testRemoteEntitySave() {
    // TODO: is there a helper for this?
    $entity = entity_create('test_remote_entity', array(
      'entity_data' => (object) array(
        'remote_name' => $this->randomName(),
      ),
    ));
    entity_save('test_remote_entity', $entity);

    $this->assertNotNull($entity->eid, "The new entity was saved locally.");

    // Save the entity remotely.
    remote_entity_save('test_remote_entity', $entity);

    $this->assertEqual($entity->remote_id, 'DummyRemoteID', "The entity was saved remotely and received a remote ID.");

    $this->assertTrue($entity->unpacked, 'The entity was processed by the unpack callback');

    // Save the entity remotely, with a simulated failure by the connection.
    variable_set('remote_entity_test_throw_exception', TRUE);

    try {
      remote_entity_save('test_remote_entity', $entity);
      $this->fail(t('Expected exception has not been thrown when remote saving the entity.'));
    }
    catch (Exception $e) {
      $this->pass(t('Expected exception has been thrown when remote saving the entity.'));
    }

    $this->assertEqual($entity->needs_remote_save, REMOTE_ENTITY_REMOTE_SAVE_FAILED, "The entity was flagged as having failed remote save.");
  }

  /**
   * Test remote entity bulk save.
   */
  function testRemoteEntitySaveMultiple() {
    // Create some entities to save remotely.
    // TODO: is there a helper for this?
    $entity = entity_create('test_remote_entity', array(
      'entity_data' => (object) array(
        'remote_name' => $this->randomName(),
      ),
      // Not needed, but allows us to check this gets removed.
      'needs_remote_save' => TRUE,
    ));
    entity_save('test_remote_entity', $entity);
    $entities[$entity->eid] = $entity;
    $entities_insert[$entity->eid] = $entity;

    $entity = entity_create('test_remote_entity', array(
      'entity_data' => (object) array(
        'remote_name' => $this->randomName(),
      ),
      'needs_remote_save' => TRUE,
    ));
    entity_save('test_remote_entity', $entity);
    $entities[$entity->eid] = $entity;
    $entities_insert[$entity->eid] = $entity;

    // We fake this one to look like it's already been saved remotely.
    $entity = entity_create('test_remote_entity', array(
      'entity_data' => (object) array(
        'remote_name' => $this->randomName(),
        // This needs to be a different pattern from what the dummy connection
        // will set, so we know it's not been changed.
        'remote_id' => 'DummyRemoteUpdateID',
      ),
      'needs_remote_save' => TRUE,
      'remote_id' => 'DummyRemoteUpdateID',
    ));
    entity_save('test_remote_entity', $entity);
    $entities[$entity->eid] = $entity;
    $entities_update[$entity->eid] = $entity;

    // Execute the remote save.
    remote_entity_save_multiple('test_remote_entity', $entities);

    // Clear the cache and reload the entities, to check that the data resulting
    // from the remote save gets saved locally.
    entity_get_controller('test_remote_entity')->resetCache();

    // Check the inserted entities.
    foreach ($entities_insert as $eid => $entity) {
      $entity = entity_load_single('test_remote_entity', $eid);

      $this->assertEqual($entity->remote_id, "DummyRemoteID-$eid", "The entity was saved remotely and received a remote ID.");
      $this->assertFalse($entity->needs_remote_save, "The entity was marked as no longer needing a remote save.");
    }

    // Check the updated entities.
    foreach ($entities_update as $eid => $entity) {
      $entity = entity_load_single('test_remote_entity', $eid);

      $this->assertEqual($entity->remote_id, "DummyRemoteUpdateID", "The entity was saved remotely and retained its remote ID.");
      $this->assertFalse($entity->needs_remote_save, "The entity was marked as no longer needing a remote save.");
    }

    // Save the entities remotely, with a simulated failure by the connection.
    variable_set('remote_entity_test_throw_exception', TRUE);

    try {
      remote_entity_save_multiple('test_remote_entity', $entities);
      $this->fail(t('Expected exception has not been thrown when remote saving the entity.'));
    }
    catch (Exception $e) {
      $this->pass(t('Expected exception has been thrown when remote saving the entity.'));
    }

    foreach ($entities as $entity) {
      $this->assertEqual($entity->needs_remote_save, REMOTE_ENTITY_REMOTE_SAVE_FAILED, "The entity was flagged as having failed remote save.");
    }
  }

}
