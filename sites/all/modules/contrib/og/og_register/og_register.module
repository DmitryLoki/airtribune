<?php


/**
 * @file
 * Allow subscribing to groups during the user registration.
 */

/**
 * Group register field.
 */
define('OG_REGISTER_FIELD', 'group_register');


/**
 * Implements hook_query_TAG_alter().
 */
function og_register_query_og_alter(QueryAlterableInterface $query) {
  global $user;
  if ($user->uid) {
    // User is authenticated.
    return;
  }

  if (!field_info_field(OG_REGISTER_FIELD)) {
    // No register field exists.
    return;
  }

  $handler = $query->alterMetaData['entityreference_selection_handler'];
  $field = $handler->field;
  $instance = $handler->instance;

  if ($instance['entity_type'] != 'user') {
    // Field is not attached to the user entity.
    return;
  }

  $group_type = $field['settings']['target_type'];
  $group_bundles = $field['settings']['handler_settings']['target_bundles'];

  $entity_info = entity_get_info($group_type);
  $conditions = &$query->conditions();

  // Search the condition that falsified the query.
  // @see OgHandler_base::buildEntityFieldQuery
  foreach ($conditions as $key => $condition) {
    if (!is_array($condition)) {
      continue;
    }
    if ($condition['field'] != $group_type . '.' . $entity_info['entity keys']['id']) {
      continue;
    }
    if ($condition['value'] != -1 || $condition['operator'] != '=') {
      continue;
    }

    // Get all the referencable groups.
    $efq_query = new EntityFieldQuery;
    $efq_query
      ->entityCondition('entity_type', $group_type)
      ->fieldCondition(OG_REGISTER_FIELD, 'value', 1, '=')
      ->fieldCondition(OG_GROUP_FIELD, 'value', 1, '=');

    if ($group_bundles) {
      $efq_query->propertyCondition($entity_info['bundle keys']['bundle'], $group_bundles, 'IN');
    }
    $result = $efq_query->execute();
    if (empty($result[$group_type])) {
      return;
    }

    $conditions[$key]['value'] = array_keys($result[$group_type]);
    $conditions[$key]['operator'] = 'IN';
    return;
  }
}

/**
 * Implements og_fields_info().
 */
function og_register_og_fields_info() {
  $allowed_values = array(
    0 => 'Do not show on registration page',
    1 => 'Show on registration page',
  );
  $items[OG_REGISTER_FIELD] = array(
    'type' => array('group'),
    'description' => t('Add Group register field group types.'),
    'field' => array(
      'field_name' => OG_REGISTER_FIELD,
      'no_ui' => TRUE,
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array('allowed_values' => $allowed_values, 'allowed_values_function' => ''),
    ),
    'instance' => array(
      'label' => t('Group register'),
      'default_value' => array(0 => array('value' => 0)),
      'widget_type' => 'options_select',
      'required' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
      ),
    ),
  );

  return $items;
}
