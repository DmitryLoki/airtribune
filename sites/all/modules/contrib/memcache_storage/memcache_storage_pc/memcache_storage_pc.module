<?php

/**
 * @file
 * Constant definitions and Drupal hook implementations
 * for MEMCACHE STORAGE PAGE CACHE MODULE.
 */

/**
 * Constant definitions.
 */

// Node actions.
define('MEMCACHE_STORAGE_PC_NODE_INSERT', 1);
define('MEMCACHE_STORAGE_PC_NODE_UPDATE', 2);
define('MEMCACHE_STORAGE_PC_NODE_DELETE', 3);

// Comment actions.
define('MEMCACHE_STORAGE_PC_COMMENT_INSERT'   , 1);
define('MEMCACHE_STORAGE_PC_COMMENT_UPDATE'   , 2);
define('MEMCACHE_STORAGE_PC_COMMENT_DELETE'   , 3);
define('MEMCACHE_STORAGE_PC_COMMENT_PUBLISH'  , 4);
define('MEMCACHE_STORAGE_PC_COMMENT_UNPUBLISH', 5);

// User actions.
define('MEMCACHE_STORAGE_PC_USER_INSERT', 1);
define('MEMCACHE_STORAGE_PC_USER_UPDATE', 2);
define('MEMCACHE_STORAGE_PC_USER_DELETE', 3);
define('MEMCACHE_STORAGE_PC_USER_CANCEL', 4);

// Default values for cache expirations.
define('MEMCACHE_STORAGE_PC_NODE_EXPIRE_FRONT_PAGE'             , FALSE);
define('MEMCACHE_STORAGE_PC_NODE_EXPIRE_NODE_PAGE'              , TRUE);
define('MEMCACHE_STORAGE_PC_NODE_EXPIRE_TERM_PAGES'             , FALSE);
define('MEMCACHE_STORAGE_PC_NODE_EXPIRE_REFERENCE_PAGES'        , FALSE);
define('MEMCACHE_STORAGE_PC_NODE_EXPIRE_CUSTOM'                 , FALSE);
define('MEMCACHE_STORAGE_PC_COMMENT_EXPIRE_FRONT_PAGE'          , FALSE);
define('MEMCACHE_STORAGE_PC_COMMENT_EXPIRE_COMMENT_PAGE'        , TRUE);
define('MEMCACHE_STORAGE_PC_COMMENT_EXPIRE_NODE_PAGE'           , FALSE);
define('MEMCACHE_STORAGE_PC_COMMENT_EXPIRE_NODE_TERM_PAGES'     , FALSE);
define('MEMCACHE_STORAGE_PC_COMMENT_EXPIRE_NODE_REFERENCE_PAGES', FALSE);
define('MEMCACHE_STORAGE_PC_COMMENT_EXPIRE_CUSTOM'              , FALSE);
define('MEMCACHE_STORAGE_PC_USER_EXPIRE_FRONT_PAGE'             , FALSE);
define('MEMCACHE_STORAGE_PC_USER_EXPIRE_USER_PAGE'              , TRUE);
define('MEMCACHE_STORAGE_PC_USER_EXPIRE_CUSTOM'                 , FALSE);

/**
 * Implements hook_menu().
 */
function memcache_storage_pc_menu() {

  // Tab with existing settings.
  $items['admin/config/development/memcache_storage/settings'] = array(
    'title'            => 'Cache bins',
    'description'      => t('Manage Memcache Storage settings'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('memcache_storage_settings_form'),
    'access arguments' => array('administer memcache storage'),
    'file path'        => drupal_get_path('module', 'memcache_storage'),
    'file'             => 'memcache_storage.admin.inc',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  );

  // Tab with cached page actions.
  $items['admin/config/development/memcache_storage/page_cache'] = array(
    'title'            => 'Page cache settings',
    'description'      => t('Configure actions for cached pages.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('memcache_storage_pc_settings_form'),
    'access arguments' => array('administer memcache storage'),
    'file path'        => drupal_get_path('module', 'memcache_storage_pc'),
    'file'             => 'memcache_storage_pc.admin.inc',
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function memcache_storage_pc_form_node_type_form_alter(&$form, &$form_state) {
  module_load_include('admin.inc', 'memcache_storage_pc');
  memcache_storage_pc_node_settings_form($form, $form_state);
}

/**
 * Implements hook_node_insert().
 */
function memcache_storage_pc_node_insert($node) {
  MemcacheStoragePC::expireNode($node, MEMCACHE_STORAGE_PC_NODE_INSERT);
}

/**
 * Implements hook_node_update().
 */
function memcache_storage_pc_node_update($node) {
  MemcacheStoragePC::expireNode($node, MEMCACHE_STORAGE_PC_NODE_UPDATE);
}

/**
 * Implements hook_node_delete().
 */
function memcache_storage_pc_node_delete($node) {
  MemcacheStoragePC::expireNode($node, MEMCACHE_STORAGE_PC_NODE_DELETE);
}

/**
 * Implements hook_comment_insert().
 */
function memcache_storage_pc_comment_insert($comment) {
  MemcacheStoragePC::expireComment($comment, MEMCACHE_STORAGE_PC_COMMENT_INSERT);
}

/**
 * Implements hook_comment_update().
 */
function memcache_storage_pc_comment_update($comment) {
  MemcacheStoragePC::expireComment($comment, MEMCACHE_STORAGE_PC_COMMENT_UPDATE);
}

/**
 * Implements hook_comment_delete().
 */
function memcache_storage_pc_comment_delete($comment) {
  MemcacheStoragePC::expireComment($comment, MEMCACHE_STORAGE_PC_COMMENT_DELETE);
}

/**
 * Implements hook_comment_publish().
 */
function memcache_storage_pc_comment_publish($comment) {
  MemcacheStoragePC::expireComment($comment, MEMCACHE_STORAGE_PC_COMMENT_PUBLISH);
}

/**
 * Implements hook_comment_unpublish().
 */
function memcache_storage_pc_comment_unpublish($comment) {
  MemcacheStoragePC::expireComment($comment, MEMCACHE_STORAGE_PC_COMMENT_UNPUBLISH);
}

/**
 * Implements hook_user_insert().
 */
function memcache_storage_pc_user_insert($account) {
  MemcacheStoragePC::expireUser($account, MEMCACHE_STORAGE_PC_USER_INSERT);
}

/**
 * Implements hook_user_update().
 */
function memcache_storage_pc_user_update(&$edit, $account) {
  MemcacheStoragePC::expireUser($account, MEMCACHE_STORAGE_PC_USER_UPDATE);
}

/**
 * Implements hook_user_delete().
 */
function memcache_storage_pc_user_delete($account) {
  MemcacheStoragePC::expireUser($account, MEMCACHE_STORAGE_PC_USER_DELETE);
}

/**
 * Implements hook_user_cancel().
 */
function memcache_storage_pc_user_cancel($account) {
  MemcacheStoragePC::expireUser($account, MEMCACHE_STORAGE_PC_USER_CANCEL);
}
