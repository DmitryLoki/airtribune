<?php
/**
 * @file
 * Code for the Paragliding Race feature.
 */

define('PG_RACE_RETREIVE_URL', 'http://retrieve.airtribune.com/table/index.php');

include_once 'pg_race.features.inc';


/**
 * Implements hook_entity_presave().
 */
function pg_race_entity_presave($entity, $type) {
  // Check race type.
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);
    $day_node = $wrapper->{AIRTRIBUNE_DAY_REF_FIELD}->value();
    // Get day "created" time components
    $created = getdate($day_node->created);
    // List field names to change.
    $field_names = array(AIRTRIBUNE_RACE_START_END_FIELD, AIRTRIBUNE_PG_RACE_WINDOW_OPEN_CLOSE_FIELD);
    // Change each field's value.
    foreach ($field_names as $field_name) {
      $field_value = $wrapper->{$field_name}->value();
      // Change start and finish components' values.
      foreach (array('value', 'value2') as $k) {
        // Get field value time components
        $value_time = getdate(strtotime($field_value[$k]));
        // Prepare result time components
        $args = array(
          $value_time['hours'],
          $value_time['minutes'],
          $value_time['seconds'],
          $created['mon'],
          $created['mday'],
          $created['year'],
        );
        $new_time = call_user_func_array('mktime', $args);
        $new_time = date('Y-m-d H:i:s', $new_time);
        $field_value[$k] = $new_time;
      }
      // Set new time value
      $wrapper->{$field_name}->set($field_value);
    }
  }
}

function pg_race_entity_insert($entity, $type) {
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    get_opt_distance_from_core($entity, 'insert');
  }
}

function pg_race_entity_update($entity, $type) {
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    get_opt_distance_from_core($entity, 'update');

    $race_id = $entity->id;
    $files_path = variable_get('file_public_path', conf_path() . '/files');
    $files_path .= '/pg_race_preview';
    $path = $files_path . "/pg_race_{$race_id}.png";
    if (file_exists($path)) {
      unlink($path);
    }
  }
}

function pg_race_node_insert($node) {
  recount_day_number($node, 'insert');
}

function pg_race_node_update($node) {
//  recount_day_number($node, 'update');
}

function pg_race_node_delete($node) {
  recount_day_number($node, 'delete');
}

function recount_day_number($node, $action) {
  if ($node->type == AIRTRIBUNE_DAY_TYPE) {
    $day_number = 0;
    // load contest
    $og = node_load($node->og_group_ref['und']['0']['target_id']);
    // load all created days for this contest
    $days = get_days_ids_for_contest($og);

    // if node deleted, then we must remove this nid from recount list
    if ($action == 'delete' && ($key = array_search($node->nid, $days)) !== FALSE) {
      unset($days[$key]);
    }
    // recount day number for all this days
    foreach ($days as $day) {
      // 0|Ok, 1|Stopped, 2|Cancelled, 3|Rest day, 4|Registration day, 5|Training day
      $current_day_node = node_load($day);
      // handle new added node, which yet no data in database, because not all hooks are worked
      if ($current_day_node->nid == $node->nid) {
        $current_day_node = $node;
      }
      if ($current_day_node->field_day_status['und']['0']['value'] < 4) {
        $day_number++;
        $current_day_node->field_day_number['und']['0']['value'] = $day_number;
      }
      else {
        $current_day_node->field_day_number['und']['0']['value'] = 0;
      }
      // And save.
      if ($action == 'insert' && $current_day_node->nid == $node->nid) {
        field_attach_presave('node', $current_day_node);
        field_attach_update('node', $current_day_node);
      }
      else {
        node_save($current_day_node);
      }
    }
  }
}

/**
 * Count all days, which have numbers (i.e. not Registration day or not Training day)
 * @param $contest_node
 * @return int last day number
 */
function get_last_day_number_in_contest($contest_node) {
  $day_number = 0;
  if ($contest_node->type == AIRTRIBUNE_PG_CONTEST_TYPE) {
    // load all created days for this contest
    $days = get_days_ids_for_contest($contest_node);
    // recount day number for all this days
    foreach ($days as $day) {
      // 0|Ok, 1|Stopped, 2|Cancelled, 3|Rest day, 4|Registration day, 5|Training day
      $current_day_node = node_load($day);
      if ($current_day_node->field_day_status['und']['0']['value'] < 4) {
        $day_number++;
      }
    }
  }
  return $day_number;
}

function get_opt_distance_from_core($entity, $action) {
  $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);
  // load contest (og node)
  $contest = reset($wrapper->og_group_ref->value());
  // load core id for this contest
  $contest_core_id = !empty($contest->field_core_id['und']['0']['value']) ? $contest->field_core_id['und']['0']['value'] : NULL;

  $ch = curl_init();

  // if race have not filled field with optimum distance, then try to get from CoreAPI
  if (empty($entity->field_optdistance['und']['0']['value'])) {
    // try to load core id for current race
    $race_core_id = !empty($entity->field_core_id['und']['0']['value']) ? $entity->field_core_id['und']['0']['value'] : NULL;
    // connect to CoreAPI & get info for current race (race start time, optimum distance, checkpoints, etc)
    curl_setopt_array($ch, array(
      CURLOPT_URL => at_core_sync_get_api_url() . "/contest/" . $contest_core_id . "/race/" . $race_core_id,
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_TIMEOUT => 10,
    ));
    $ch_exec = curl_exec($ch);
    // if we get correct data from CoreAPI
    if ($ch_exec && $core_race_data = drupal_json_decode($ch_exec)) {
      if ($optdistance = $core_race_data['optdistance']) {
        // write the optimum distance to field_optdistance & save(update) race entity
        $entity->field_optdistance['und']['0']['value'] = $optdistance;
      }
    }
  }
  // save changed fields for race
  field_attach_presave(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);
  field_attach_update(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);

  curl_close($ch);
}

function pg_race_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'eck__entity__form_add_ent_race_pg_race' ||
    $form_id == 'eck__entity__form_edit_ent_race_pg_race'
  ) {
    $form['#validate'][] = 'pg_race_form_validate';
  }
  if ($form_id == 'day_node_form') {
    $form['#validate'][] = 'pg_race_day_form_validate';
  }
}

function pg_race_day_form_validate(&$form, &$form_state) {
  $v = $form_state['values'];
  // Bad code, see #3647 for detailed explanation.
  if (isset($v['nid'])) {
    $day_old = node_load($v['nid']);
    $day_status_old = $day_old->field_day_status[LANGUAGE_NONE]['0']['value'];
    $day_status_submitted = $form_state['values']['field_day_status'][LANGUAGE_NONE]['0']['value'];

    // Day status changed, for example, from 'OK' to 'Registration'.
    if ($day_status_old != $day_status_submitted) {
      // Use $day_old, because $form_state['values'] is array, not node object.
      // Change field_day_status for loaded node, and use this object to recount days.
      $day_old->field_day_status[LANGUAGE_NONE]['0']['value'] = $day_status_submitted;
      recount_day_number($day_old, 'update');
      // After recounting day we must use new value for field_day_number, and change it in sumbitted form.
      $day = node_load($v['nid']);
      $recounted_day_num = $day->field_day_number[LANGUAGE_NONE]['0']['value'];
      form_set_value($form['field_day_number'], array(LANGUAGE_NONE => array(0 => array('value' => $recounted_day_num))), $form_state);
    }
  }
}

/**
 * Allow to users set race numbers only in chronically natural order.
 * @see #3370
 */
function pg_race_form_validate(&$form, &$form_state) {
  $values = & $form_state['values'];
  $race = $values['entity'];
  $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $race);

  // Load contest (og node).
  $contest = reset($wrapper->og_group_ref->value());
  // Get id of entity. If id = null, then its new created entity.
  $id = $wrapper->id->value();

  // Get race numbers in chronically order (based on keys - ids in database).
  $race_numbers = get_races_for_contest($contest, TRUE);
  ksort($race_numbers);

  $prefer_day_num = end($race_numbers) + 1;
  $submitted_day_num = $wrapper->field_race_number->value();

  // If day number is not set (or set to 0), change it to preferred day number.
  if ($submitted_day_num == 0) {
    form_set_value($form['field_race_number'], array(LANGUAGE_NONE => array(0 => array('value' => $prefer_day_num))), $form_state);
    $submitted_day_num = $prefer_day_num;
  }

  // New race inserted.
  if (empty($id)) {
    if ($submitted_day_num <= end($race_numbers)) {
      form_set_error('field_race_number',
        t('Race number must be greater, than previous race day. You can use "@prefer_day_num".', array(
          '@prefer_day_num' => $prefer_day_num
        ))
      );
    }
  }

  // Race updated & race number is changed with previous state.
  elseif (!empty($id) && !empty($race_numbers[$id]) && $submitted_day_num != $race_numbers[$id]) {
    // Submitted day is not used, we must check next & prev races to chronically order.
    // Set the pointer of races array to first element.
    reset($race_numbers);
    // Find the pointer of races array to current race.
    while (key($race_numbers) !== (int) $race->id) {
      next($race_numbers);
      //$val = next($race_numbers);
      //$key = key($race_numbers);
    }

    /* buggy code
    $next_num = next($race_numbers);
    $next_key = key($race_numbers);
    // because next() change pointer at array, we use prev() twice.
    prev($race_numbers);
    $prev_num = prev($race_numbers);
    $prev_key = key($race_numbers);
    */

    // Clone array, to avoid problem with using prev() on NULL pointer, see code above.
    $race_numbers2 = $race_numbers;
    $next_num = next($race_numbers);
    $next_key = key($race_numbers);
    $prev_num = prev($race_numbers2);
    $prev_key = key($race_numbers2);

    // Handling returning NULL by prev()/next() for first/last element in array.
    if ($prev_num == NULL) {
      $prev_num = $race_numbers[$id] - 1;
    }
    if ($next_num == NULL) {
      $next_num = 100;
    }

    $error = NULL;

    // Day before.
    if (!empty($prev_num) && $prev_num > $submitted_day_num) {
      $error .= 'Race number must be greater, than previous race day. ';
    }
    // Day after.
    if (!empty($next_num) && $next_num < $submitted_day_num) {
      $error = 'Race number must be lower, than next race day. ';
    }
    // Day number already used.
    if (in_array($submitted_day_num, $race_numbers)) {
      $error = 'This race number already taken. ';
    }

    if ($error) {
      form_set_error('field_race_number',
        t($error . 'You can use numbers in range @prev_num...@next_num.',
          array(
            '@prev_num' => $prev_num + 1,
            '@next_num' => $next_num - 1,
          )
        )
      );
    }

  } // Race updated code end
}

/**
 * Get array with ids of ent_race for contest.
 * Its dirty code, but in OG module code there is nothing like this functionality
 *
 * @param $og organic group (node) object
 * @return array array with ids of ent_race for contest; otherwise FALSE if wrong OG node
 */
function get_races_ids_for_contest($og) {
  if (!is_object($og)) {
    return FALSE;
  }
  /*
    $races = db_select('og_membership', 'ogm')
      ->fields('ogm', array('etid'))
      ->orderBy('etid', 'ASC')
      ->condition('ogm.gid', $og->nid)
      ->condition('ogm.entity_type', AIRTRIBUNE_RACE_ENTITY_TYPE)
      ->execute()
      ->fetchCol();
  */
  $query = new EntityFieldQuery;
  $query_results = $query->entityCondition('entity_type', AIRTRIBUNE_RACE_ENTITY_TYPE)
    ->entityCondition('bundle', AIRTRIBUNE_PG_RACE_TYPE)
    ->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $og->nid)
    ->execute();
  $races = array();
  if (isset($query_results[AIRTRIBUNE_RACE_ENTITY_TYPE])) {
    $entities = $query_results[AIRTRIBUNE_RACE_ENTITY_TYPE];
    foreach ($entities as $entity) {
      $races[] = $entity->id;
    }
  }
  if (!empty($races)) {
    sort($races);
  }
  return $races;
}

/**
 * @param $contest node organic group.
 * @param bool $only_race_numbers if flag is set, function return race numbers, otherwise return race enities.
 * @return array array with race numbers or race entities, depending on the flag.
 */
function get_races_for_contest($contest, $only_race_numbers = FALSE) {
  $query = new EntityFieldQuery;
  $query_results = $query->entityCondition('entity_type', AIRTRIBUNE_RACE_ENTITY_TYPE)
    ->entityCondition('bundle', AIRTRIBUNE_PG_RACE_TYPE)
    ->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $contest->nid)
    ->execute();
  $races = array();
  if (isset($query_results[AIRTRIBUNE_RACE_ENTITY_TYPE])) {
    $entities = $query_results[AIRTRIBUNE_RACE_ENTITY_TYPE];
    foreach ($entities as $entity) {
      $entity = entity_load(AIRTRIBUNE_RACE_ENTITY_TYPE, array($entity->id), array(), TRUE);
      $entity = reset($entity);
      if ($only_race_numbers) {
        $races[$entity->id] = $entity->field_race_number['und']['0']['value'];
      }
      else {
        $races[$entity->id] = $entity;
      }
    }
  }
  return $races;
}

/**
 * Get array with nids of days for contest.
 * Its dirty code, but in OG module code there is nothing like this functionality
 *
 * @param $og organic group (node) object
 * @return bool FALSE if wrong og node; otherwise array with ids of days for contest
 */
function get_days_ids_for_contest($og) {
  if (!is_object($og)) {
    return FALSE;
  }
  $relation_nids = db_select('og_membership', 'ogm')
    ->fields('ogm', array('etid'))
    ->condition('ogm.gid', $og->nid)
    ->condition('ogm.entity_type', 'node')
    ->execute()
    ->fetchCol();
  $days = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->orderBy('nid', 'ASC')
    ->condition('n.nid', $relation_nids, 'IN')
    ->condition('n.type', 'day')
    ->execute()
    ->fetchCol();
  return $days;
}


/**
 * Implements hook_field_extra_fields()
 */
function pg_race_field_extra_fields() {

  $extra[AIRTRIBUNE_RACE_ENTITY_TYPE][AIRTRIBUNE_PG_RACE_TYPE] = array(
    'form' => array(
      'pg_race_play_link' => array(
        'label' => t('Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
      ),
      'pg_race_preview_image' => array(
        'label' => t('Paragliding preview image'),
        'description' => t('Race preview image'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'pg_race_play_link' => array(
        'label' => t('Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
        'callback' => 'pg_race_play_link_callback',
      ),
      'pg_race_preview_image' => array(
        'label' => t('Paragliding preview image'),
        'description' => t('Race preview image'),
        'weight' => -5,
        'callback' => 'pg_race_preview_image_callback',
      ),
      'pg_race_retrieve_link' => array(
        'label' => t('Paragliding race retrieve link'),
        'description' => t('Retrieve link'),
        'weight' => -5,
        'callback' => 'pg_race_retrive_callback',
      ),
      'pg_race_retrieve_table_link' => array(
        'label' => t('Paragliding race retrieve table link'),
        'description' => t('Retrieve table link'),
        'callback' => 'pg_race_retrive_table_callback',
        'weight' => -5,
      ),
    ),
  );

  $extra['node']['day'] = array(
    'form' => array(
      'day_pg_race_play_link' => array(
        'label' => t('Day Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'day_pg_race_play_link' => array(
        'label' => t('Day Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
        'callback' => 'day_pg_race_play_link_callback',
      ),
    ),
  );

  return $extra;
}

/**
 * Views callback for visualization link extra field.
 */
function day_pg_race_play_link_callback($node) {
  //dsm($node);
  if ($node->type == 'day') {
    return _day_pg_race_preview_markup($node);
  }
}

function pg_race_preview_image_callback($entity) {
  if ($entity->type == AIRTRIBUNE_PG_RACE_TYPE) {

    module_load_include('inc', 'pg_race', 'pg_race.draw');
    $race_id = $entity->id;
    //$race_id = 3;
    $path = _at_draw_image_path($race_id);

    $output = '';
    if (!empty($path)) {
      $output = theme('image', array('path' => $path));
    }

    return $output;
  }
}

function pg_race_play_link_callback($entity) {
  if ($entity->type == AIRTRIBUNE_PG_RACE_TYPE) {

    $preview = _pg_race_preview_markup($entity);
    $markup = $preview['markup'];
    $title = $preview['title'];

    $output = array(
      '#type' => 'item',
      '#title' => $title,
      '#markup' => $markup,
    );

    $output = $markup;
    return $output;
  }

}

function pg_race_retrive_callback($entity) {
  global $user;
  $output = FALSE;

  $og_ref_items = field_get_items(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity, OG_AUDIENCE_FIELD);
  $gid = $og_ref_items[0]['target_id'];

  // TODO: move the detection of offline contest in a separate function
  $node = node_load($gid);
  $contest_wrapper = entity_metadata_wrapper('node', $node);
  $contest_is_offline = $contest_wrapper->field_is_offline->value();

  if (!$contest_is_offline) {
    $link = array(
      '#theme' => 'link',
      '#text' => t('Retrieve map'),
      '#path' => 'retrieve/' . $entity->id,
      '#options' => array(
        'attributes' => array('class' => array('retrieve-link'), 'target' => '_blank'),
        'html' => FALSE,
      ),
      '#access' => pg_race_retrive_access($entity, $gid) && og_user_access('node', $gid, 'administer-group', $user),
    );
    $output = render($link);
  }
  return $output;
}

function pg_race_retrive_table_callback($entity) {
  $output = FALSE;

  $og_ref_items = field_get_items(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity, OG_AUDIENCE_FIELD);
  $gid = $og_ref_items[0]['target_id'];

  $node = node_load($gid);
  // TODO: move the detection of offline contest in a separate function
  $contest_wrapper = entity_metadata_wrapper('node', $node);
  $contest_is_offline = $contest_wrapper->field_is_offline->value();

  if (!$contest_is_offline) {
    $core_id_items = field_get_items('node', $node, 'field_core_id');
    $race_id_items = field_get_items(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity, 'field_core_id');

    $link = array(
      '#theme' => 'link',
      '#text' => t('Retrieve table'),
      '#path' => PG_RACE_RETREIVE_URL,
      '#options' => array(
        'attributes' => array('class' => array('retrieve-table-link'), 'target' => '_blank'),
        'html' => FALSE,
        'query' => array(
          'contestid' => $core_id_items[0]['value'],
          'raceid' => $race_id_items[0]['value'],
        )
      ),
      '#access' => pg_race_retrive_access($entity, $gid),
    );
    $output = render($link);
  }
  return $output;
}

/**
 * Retrive up to 2am (02:00 night) of next day following race day.
 */
function pg_race_retrive_access($entity, $gid) {
  $race_date_items = field_get_items(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity, 'field_race_start_end');
  $contest_time = airtribune_extract_time_from_contest($gid);
  $offset = $contest_time['offset'];
  $start_limit = strtotime($race_date_items[0]['value']);
  $end_limit = strtotime(date('Y-m-d', strtotime($race_date_items[0]['value2']) + 24 * 3600)) + 7200;
  $now = REQUEST_TIME + $offset;
  return $start_limit < $now && $now < $end_limit;
}


/**
 * Implements hook_entity_view()
 */
function pg_race_entity_view($entity, $type, $view_mode, $langcode) {

  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    $preview = _pg_race_preview_markup($entity);
    $markup = $preview['markup'];
    $title = $preview['title'];

    $entity->content['pg_race_play_link'] = array(
      '#type' => 'item',
      '#title' => $title,
      '#markup' => $markup,
    );

    $entity->content['pg_race_retrieve_link'] = array(
      '#markup' => pg_race_retrive_callback($entity),
    );

    $entity->content['pg_race_retrieve_table_link'] = array(
      '#markup' => pg_race_retrive_table_callback($entity),
    );

    // Race preview image
    $entity->content['pg_race_preview_image'] = array(
      '#type' => 'item',
      '#title' => t('Task preview'),
      '#markup' => pg_race_preview_image_callback($entity),
    );
  }

}

/**
 * Implements hook_node_view()
 *
 * Add visualization link extra field content to Day node.
 */
function pg_race_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'day') {
    // Add content to day node extra field
    $node->content['day_pg_race_play_link'] = array(
      '#type' => 'item',
      '#markup' => _day_pg_race_preview_markup($node),
    );
  }
}


function _pg_race_preview_markup($entity) {
  $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);
  $race_core_id = $wrapper->field_core_id->value();

  //$pg_contest_entities = $wrapper->og_group_ref->value();
  $items = field_get_items(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity, OG_AUDIENCE_FIELD);

  if (!empty($items) && is_array($items)) {
    $item = array_shift($items);
    $contest_id = $item['target_id'];
    $contest = node_load($contest_id);
    $contest_wrapper = entity_metadata_wrapper('node', $contest);
    $contest_core_id = $contest_wrapper->field_core_id->value();
  }


  // Prepare link parameters
  $params = array(
    'status' => _airtribune_pg_race_online_state($entity->id),
    'race_entity_id' => $entity->id,
  );
  $params['race_core_id'] = !empty($race_core_id) ? $race_core_id : '';
  $params['contest_core_id'] = !empty($contest_core_id) ? $contest_core_id : '';

  if ($params['status'] == FALSE) {
    return;
  }

  $params['text'] = '2D';
  $markup = _pg_race_play_link($params);

  $title = $params['status'] == 'online' ? t('Livetracking') : t('Replay');


  drupal_add_js(drupal_get_path('module', 'pg_race') . '/js/pg_race_play_link.js', 'file');
  drupal_add_js(array('pgRace' => array('coreApiAddress' => at_core_sync_get_api_url())), 'setting');

  return array(
    'title' => $title,
    'markup' => $markup,
  );
}

function _day_make_link($params) {
  if (empty($params['text'])) {
    return;
  }
  $class = array('race-link', $params['type'], $params['status']);
  $link = '<span class="file">' . theme('html_tag', array(
      'element' => array(
        '#tag' => 'a',
        '#value' => $params['text'],
        '#attributes' => array('class' => $class, 'target' => '_blank', 'rel' => 'nofollow')
      )
    )) . '</span>';
  return $link;
}

/**
 * Prepare markup for play links
 */
function _pg_race_play_link($params) {
  $href2d = _day_make_link($params);

  // Generate list
  //$items = array($href2d, $href3d);
  $items = array($href2d);

  $ul_attribuntes = array(
    'class' => array('race-links'),
    'data-race-eid' => $params['race_entity_id'],
    'data-contest-cid' => $params['contest_core_id'],
    'data-race-cid' => $params['race_core_id'],
  );

  // If online
  if ($params['status'] == AIRTRIBUNE_VIS_STATE_ONLINE) {
    $ul_attribuntes['data-view-type'] = 'online';
  }

  $variables = array(
    'type' => 'ul',
    'title' => '',
    'items' => $items,
    'attributes' => $ul_attribuntes,
  );

  // Add js for fix work of links  in MS IE
  drupal_add_js(drupal_get_path('module', 'pg_race') .'/js/ie-fix.js', 'file');
  $output = theme('item_list', $variables) . $params['helptext'] . $params['time'];

  return $output;
}

/**
 * Return markup for visualization link.
 */
function _day_pg_race_preview_markup($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $day_status = $wrapper->field_day_status->value();

  // Hide markup if status is != 'Ok' or != 'Stopped'.
  if (($day_status !== '0') && ($day_status !== '1')) {
    return '';
  }

  // Get race status and core id data
  $data = pg_race_task_get_info($node);
  // Race status data
  $status = $data['status'];
  $has_task = !empty($data['entity']) ? TRUE : FALSE;
  $has_tracks = $data['has_tracks'];
  $has_points = $data['has_points'];
  $start_time = $data['start_time'];
  $deadline_time = $data['deadline_time'];
  $countdown_time = $data['countdown_time'];

  $localtime = !empty($data['localtime']) ? $data['localtime'] : 0;
  $offset = !empty($data['offset']) ? $data['offset'] : 0;
  $is_current_day = $data['is_current_day'];
  $contest_is_offline = $data['contest_is_offline'];

  // Wrapper data
  // span Wrapper attributes
  $wrapper_attributes = array(
    'class' => array('race-links'),
    'data-race-eid' => $data['race_entity_id'],
    'data-contest-cid' => $data['contest_core_id'],
    'data-race-cid' => $data['race_core_id'],
    'data-start-time' => $start_time * 1000,
    'data-deadline-time' => $deadline_time * 1000,
  );
  // Add wrapper Race status class
  switch ($status) {
    case AIRTRIBUNE_VIS_STATE_AWAITING :
      $wrapper_attributes['class'][] = 'race-awaiting';
      if ($has_task) {
        $wrapper_attributes['data-view-type'] = 'online';
      }
      break;
    case AIRTRIBUNE_VIS_STATE_ONLINE :
      $wrapper_attributes['class'][] = 'race-online';
      $wrapper_attributes['data-view-type'] = 'online';
      break;
    case AIRTRIBUNE_VIS_STATE_REPLAY :
      $wrapper_attributes['class'][] = 'race-replay';
      break;
  }

  // Content data
  $data['type'] = '2d';
  $link_text = NULL;
  $help_text = NULL;
  $time = NULL;

  // Check if task exists
  if ($has_task) {
    switch ($status) {
      case AIRTRIBUNE_VIS_STATE_AWAITING :
        $time = date('H:i:s', $countdown_time);
        $time = $countdown_time > 0 ? '-' . $time : $time;
        $link_text = t('Watch Live');
        $help_text = t('Race starts in');
        break;
      case AIRTRIBUNE_VIS_STATE_ONLINE :
        $time = date('H:i:s', $start_time);
        $link_text = t('Watch Live');
        $help_text = t('Race starts on');
        break;
      case AIRTRIBUNE_VIS_STATE_REPLAY :
        $time = date('H:i:s', ($deadline_time - $start_time));
        $link_text = t('Task Replay');
        $help_text = t('Race time');
        break;
    }
  }
  else {
    if (!$is_current_day || $contest_is_offline) {
      return '';
    }
    // Default link and help text in case task isn't set.
    //$help_text = t('Button will be here as soon as task is set.');
    // Do not output time/countdown
    $time = '';
    // Add wrapper attribute. Can be used in js
    $wrapper_attributes['class'][] = 'no-task';
  }

  // Wrap time and help-text if not empty.
  $time = !empty($time) ? '<div id="time-counter" class="time">' . $time . '</div>' : '';
  $help_text = !empty($help_text) ? '<span class="help-text">' . $help_text . '</span>' : '';

  // Wrap link text
  $data['text'] = $link_text;
  $link = _day_make_link($data);

  // Prepare output
  $output = $link . $help_text . $time;
  $output = theme('html_tag', array(
    'element' => array(
      '#tag' => 'span',
      '#value' => $output,
      '#attributes' => $wrapper_attributes
    )
  ));

  // Use another output for blog page.
  if (arg(2) == 'blog') {
    drupal_add_js(array('Day' => array('button_soon_text' => t('Button will be here as soon as task is set.'))), 'setting');
    if ($status == AIRTRIBUNE_VIS_STATE_REPLAY) {
      $data['text'] = '2D';
      $data['attributes'] = $wrapper_attributes;
      $output = pg_race_replay_blog_markup($data);
    }
  }
  // Add js
  drupal_add_js(drupal_get_path('module', 'pg_race') . '/js/ie-fix.js', 'file');
  drupal_add_js(drupal_get_path('module', 'pg_race') . '/js/pg_race_play_link.js', 'file');
  drupal_add_js(array('Day' => array(
    'race_in_text' => t('Race starts in'),
    'race_on_text' => t('Race starts on'),
    'race_time_text' => t('Race time'),
    'watch_live_text' => t('Watch live'),
    'task_replay_text' => t('Task replay'),
  )), 'setting');

  drupal_add_js(array('pgRace' => array('coreApiAddress' => at_core_sync_get_api_url())), 'setting');

  return $output;
}

function pg_race_replay_blog_markup($data) {
  $link = _day_make_link($data);
  $items = array($link);

  $variables = array(
    'type' => 'ul',
    'title' => '',
    'items' => $items,
    'attributes' => $data['attributes'],
  );
  $output = theme('item_list', $variables);
  $output = '<span class="replay-link-label">' . t('Replay') . '</span>' . '<span class="replay-link-content">' . $output . '</span>';

  return $output;
}

/**
 * Get day task if exists and check if points exist.
 */
function pg_race_task_get_info($day_node) {

  $task_data = array(
    'is_current_day' => NULL,
    'entity' => NULL,
    'status' => NULL,
    'start_time' => NULL,
    'deadline_time' => NULL,
    'countdown_time' => NULL,
    'has_tracks' => NULL,
    'has_points' => NULL,
    'race_entity_id' => NULL,
    'race_core_id' => NULL,
    'contest_core_id' => NULL,
    'contest_is_offline' => NULL,
  );

  // TODO: Remove duplicated operations (see if() case)
  // Check if it is current day
  $created = $day_node->created;
  $items = field_get_items('node', $day_node, OG_AUDIENCE_FIELD);
  $item = array_shift($items);
  $contest_id = $item['target_id'];
  $contest = node_load($contest_id);
  $contest_wrapper = entity_metadata_wrapper('node', $contest);
  $contest_time = airtribune_extract_time_from_contest($contest);
  if (!isset($contest_time['offset'])) {
    return;
  }
  $offset = $contest_time['offset'];

  // TODO: move the detection of offline contest in a separate function
  $contest_is_offline = $contest_wrapper->field_is_offline->value();

  $task_data['contest_is_offline'] = $contest_is_offline;
  $task_data['is_current_day'] = date('Y-m-d', $created - $offset) == date('Y-m-d', time() - $offset) ? TRUE : FALSE;
  $day_id = $day_node->nid;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', AIRTRIBUNE_RACE_ENTITY_TYPE)
    ->entityCondition('bundle', AIRTRIBUNE_PG_RACE_TYPE)
    ->fieldCondition('field_day_ref', 'target_id', $day_id, '=');

  $result = $query->execute();
  if (!empty($result[AIRTRIBUNE_RACE_ENTITY_TYPE])) {
    $race = array_shift($result[AIRTRIBUNE_RACE_ENTITY_TYPE]);
    $races = entity_load(AIRTRIBUNE_RACE_ENTITY_TYPE, array($race->id));
    $race = array_shift($races);
    $task_data['entity'] = $race;

    $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $race);

    // Check if points are set and track files exist
    $race_tracks = $wrapper->field_pg_race_tracks->value();
    $points = field_get_items(AIRTRIBUNE_RACE_ENTITY_TYPE, $race, AIRTRIBUNE_POINTS_FILE_FIELD);
    $task_data['has_tracks'] = !empty($race_tracks);
    $task_data['has_points'] = !empty($points);

    // Get Race core_id and entity_id
    $race_core_id = $wrapper->field_core_id->value();
    $task_data['race_entity_id'] = $race->id;
    $task_data['race_core_id'] = !empty($race_core_id) ? $race_core_id : NULL;

    // Get Event core_id for a given Race.
    $items = field_get_items(AIRTRIBUNE_RACE_ENTITY_TYPE, $race, OG_AUDIENCE_FIELD);
    if (empty($items) || !is_array($items)) {
      watchdog('warning', t('Og reference not set for Race id = ' . $race->id));
      return;
    }

    $item = array_shift($items);
    $contest = node_load($item['target_id']);
    $contest_wrapper = entity_metadata_wrapper('node', $contest);
    $contest_core_id = $contest_wrapper->field_core_id->value();
    $task_data['contest_core_id'] = !empty($contest_core_id) ? $contest_core_id : NULL;

    // Get time data for contest and a given race
    // Get event time offset
    $contest_time = airtribune_extract_time_from_contest($contest);
    $offset = $contest_time['offset'];
    // Get Race Time data
    $race_time = airtribune_extract_time_from_race($race, $offset);

    $task_data['status'] = _airtribune_pg_race_online_state($race->id);
    $task_data['start_time'] = $race_time['start_local'];
    $task_data['deadline_time'] = $race_time['deadline_local'];
    $task_data['countdown_time'] = $race_time['countdown'];
    $task_data['localtime'] = $contest_time['localtime'];
    $task_data['offset'] = $offset;
  }
  return $task_data;
}
