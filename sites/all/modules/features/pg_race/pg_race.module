<?php
/**
 * @file
 * Code for the Paragliding Race feature.
 */

define('PG_RACE_RETREIVE_URL', 'http://retrieve.airtribune.com/table/index.php');

include_once 'pg_race.features.inc';


/**
 * Implements hook_entity_presave().
 */
function pg_race_entity_presave($entity, $type) {
  // Check race type.
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);
    $day_node = $wrapper->{AIRTRIBUNE_DAY_REF_FIELD}->value();
    // Get day "created" time components
    $created = getdate($day_node->created);
    // List field names to change.
    $field_names = array(AIRTRIBUNE_RACE_START_END_FIELD, AIRTRIBUNE_PG_RACE_WINDOW_OPEN_CLOSE_FIELD);
    // Change each field's value.
    foreach ($field_names as $field_name) {
      $field_value = $wrapper->{$field_name}->value();
      // Change start and finish components' values.
      foreach (array('value', 'value2') as $k) {
        // Get field value time components
        $value_time = getdate(strtotime($field_value[$k]));
        // Prepare result time components
        $args = array(
          $value_time['hours'],
          $value_time['minutes'],
          $value_time['seconds'],
          $created['mon'],
          $created['mday'],
          $created['year'],
        );
        $new_time = call_user_func_array('mktime', $args);
        $new_time = date('Y-m-d H:i:s', $new_time);
        $field_value[$k] = $new_time;
      }
      // Set new time value
      $wrapper->{$field_name}->set($field_value);
    }
  }
}

function pg_race_entity_insert($entity, $type) {
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    recount_race_number($entity, 'insert');
  }
}

function pg_race_entity_update($entity, $type) {
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    recount_race_number($entity, 'update');
    
    $race_id = $entity->id;
    $files_path = variable_get('file_public_path', conf_path() . '/files');
    $files_path .= '/pg_race_preview';
    $path = $files_path . "/pg_race_{$race_id}.png";
    if (file_exists($path)) {
      unlink($path);
    }
  }
}

function pg_race_entity_delete($entity, $type) {
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    recount_race_number($entity, 'delete');
  }
}

function pg_race_node_insert($node) {
  recount_day_number($node, 'insert');
}

function pg_race_node_update($node) {
  recount_day_number($node, 'update');
}

function pg_race_node_delete($node) {
  recount_day_number($node, 'delete');
}

function recount_day_number($node, $action) {
  if ($node->type == AIRTRIBUNE_DAY_TYPE) {
    $day_number = 0;
    // load contest
    $og = node_load($node->og_group_ref['und']['0']['target_id']);
    // load all created days for this contest
    $days = get_days_ids_for_contest($og);

    // if node deleted, then we must remove this nid from recount list
    if ($action == 'delete' && ($key = array_search($node->nid, $days)) !== false) {
      unset($days[$key]);
    }
    // recount day number for all this days
    foreach ($days as $day) {
      // 0|Ok, 1|Stopped, 2|Cancelled, 3|Rest day, 4|Registration day, 5|Training day
      $current_day_node = node_load($day);
      // handle new added node, which yet no data in database, because not all hooks are worked
      if ($action == 'insert' && $current_day_node->nid == $node->nid) {
        $current_day_node = $node;
      }
      if ($current_day_node->field_day_status['und']['0']['value'] < 4) {
        $day_number++;
        $current_day_node->field_day_number['und']['0']['value'] = $day_number;
      } else {
        $current_day_node->field_day_number['und']['0']['value'] = 0;
      }
      // and save changed fields
      field_attach_presave('node', $current_day_node);
      field_attach_update('node', $current_day_node);
    }
  }
}

function recount_race_number($entity, $action) {
  $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);
  // load contest (og node)
  $og = array_pop($wrapper->og_group_ref->value());
  // load all created races for this contest
  $races = get_races_ids_for_contest($og);
  // load core id for this contest
  $contest_core_id = $og->field_core_id['und']['0']['value'];

  // if race deleted, then we must remove this id from recount list
  if ($action == 'delete' && ($key = array_search($entity->id, $races)) !== false) {
    unset($races[$key]);
  }

  $ch = curl_init();
  $race_counter = 0;

  // update race numbers for old races
  foreach ($races as $race) {
    // load race entity
    if ($current_race = array_pop(entity_load(AIRTRIBUNE_RACE_ENTITY_TYPE, array((string)$race), array(), TRUE))) {
      $race_counter++;
      // change race number field
      $current_race->field_race_number['und']['0']['value'] = $race_counter;

      // if race have not filled field with optimum distance, then try to get from CoreAPI
      if (empty($current_race->field_optdistance['und']['0']['value'])) {
        // try to load core id for current race
        $race_core_id = !empty($current_race->field_core_id['und']['0']['value']) ? $current_race->field_core_id['und']['0']['value'] : NULL;
        // connect to CoreAPI & get info for current race (race start time, optimum distance, checkpoints, etc)
        curl_setopt_array($ch, array(
          CURLOPT_URL => at_core_sync_get_api_url() . "/contest/" . $contest_core_id . "/race/" . $race_core_id,
          CURLOPT_RETURNTRANSFER => TRUE,
          CURLOPT_TIMEOUT => 10,
        ));
        $ch_exec = curl_exec($ch);
        // if we get correct data from CoreAPI
        if ($ch_exec && $core_race_data = drupal_json_decode($ch_exec)) {
          if ($optdistance = $core_race_data->optdistance) {
            // write the optimum distance to field_optdistance & save(update) race entity
            $current_race->field_optdistance['und']['0']['value'] = $optdistance;
          }
        }
      }
      // save changed fields for race
      field_attach_presave(AIRTRIBUNE_RACE_ENTITY_TYPE, $current_race);
      field_attach_update(AIRTRIBUNE_RACE_ENTITY_TYPE, $current_race);
    }
  }

  curl_close($ch);
}

/**
 * Get array with ids of ent_race for contest.
 * Its dirty code, but in OG module code there is nothing like this functionality
 *
 * @param $og organic group (node) object
 * @return bool FALSE if wrong og node; otherwise array with ids of ent_race for contest
 */
function get_races_ids_for_contest($og) {
  if (!is_object($og)) {
    return FALSE;
  }
/*
  $races = db_select('og_membership', 'ogm')
    ->fields('ogm', array('etid'))
    ->orderBy('etid', 'ASC')
    ->condition('ogm.gid', $og->nid)
    ->condition('ogm.entity_type', AIRTRIBUNE_RACE_ENTITY_TYPE)
    ->execute()
    ->fetchCol();
*/
  $query = new EntityFieldQuery;
  $query_results = $query->entityCondition('entity_type', AIRTRIBUNE_RACE_ENTITY_TYPE)
    ->entityCondition('bundle', AIRTRIBUNE_PG_RACE_TYPE)
    ->fieldCondition('og_group_ref', 'target_id', $og->nid)
    ->execute();
  $races = array();
  if ($entities = $query_results[AIRTRIBUNE_RACE_ENTITY_TYPE]) {
    foreach ($entities as $entity) {
      $races[] = $entity->id;
    }
  }
  if (!empty($races)) {
    sort($races);
  }
  return $races;
}

/**
 * Get array with nids of days for contest.
 * Its dirty code, but in OG module code there is nothing like this functionality
 *
 * @param $og organic group (node) object
 * @return bool FALSE if wrong og node; otherwise array with ids of days for contest
 */
function get_days_ids_for_contest($og) {
  if (!is_object($og)) {
    return FALSE;
  }
  $relation_nids = db_select('og_membership', 'ogm')
    ->fields('ogm', array('etid'))
    ->condition('ogm.gid', $og->nid)
    ->condition('ogm.entity_type', 'node')
    ->execute()
    ->fetchCol();
  $days = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->orderBy('nid', 'ASC')
    ->condition('n.nid', $relation_nids, 'IN')
    ->condition('n.type', 'day')
    ->execute()
    ->fetchCol();
  return $days;
}




/**
 * Implements hook_field_extra_fields()
 */
function pg_race_field_extra_fields() {
  
  $extra['ent_race']['pg_race'] = array(
    'form' => array(
      'pg_race_play_link' => array(
        'label' => t('Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
      ),
      
      'pg_race_preview_image' => array(
        'label' => t('Paragliding preview image'),
        'description' => t('Race preview image'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'pg_race_play_link' => array(
        'label' => t('Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
        'callback' => 'pg_race_play_link_callback',
      ),
      'pg_race_preview_image' => array(
        'label' => t('Paragliding preview image'),
        'description' => t('Race preview image'),
        'weight' => -5,
        'callback' => 'pg_race_preview_image_callback',
      ),
      'pg_race_retrieve_link' => array(
        'label' => t('Paragliding race retrieve link'),
        'description' => t('Retrieve link'),
        'weight' => -5,
        'callback' => 'pg_race_retrive_callback',
      ),
      'pg_race_retrieve_table_link' => array(
        'label' => t('Paragliding race retrieve table link'),
        'description' => t('Retrieve table link'),
        'callback' => 'pg_race_retrive_table_callback',
        'weight' => -5,
      ),
    ),
  );
  
  $extra['node']['day'] = array(
    'form' => array(
      'day_pg_race_play_link' => array(
        'label' => t('Day Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'day_pg_race_play_link' => array(
        'label' => t('Day Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
        'callback' => 'day_pg_race_play_link_callback',
      ),
    ),
  );
    
  return $extra;
}

/**
 * Views callback for visualization link extra field.
 */
function day_pg_race_play_link_callback($node) {
  //dsm($node);
  if ($node->type == 'day') {
    return _day_pg_race_preview_markup($node);
  }
}

function pg_race_preview_image_callback($entity) {
  if ($entity->type == 'pg_race') {
    
    module_load_include('inc', 'pg_race', 'pg_race.draw');
    $race_id = $entity->id;
    //$race_id = 3;
    $path = _at_draw_image_path($race_id);
    
    $output = '';
    if (!empty($path)) {
      $output = theme('image', array('path' => $path));
    }
    
    return $output;
  }
}

function pg_race_play_link_callback($entity) {
  if ($entity->type == 'pg_race') {
    
    $preview = _pg_race_preview_markup($entity);
    $markup = $preview['markup'];
    $title = $preview['title'];
    
    $output = array(
      '#type' => 'item',
      '#title' => $title,
      '#markup' => $markup,
    );
    
    $output = $markup;
    return $output;
  }
  
}

function pg_race_retrive_callback($entity) {
  global $user;
  $og_ref_items = field_get_items('ent_race', $entity, 'og_group_ref');
  $gid = $og_ref_items[0]['target_id'];

  $link =  array(
    '#theme' => 'link',
    '#text' => t('Retrieve map'),
    '#path' => 'retrieve/' . $entity->id,
    '#options' => array(
      'attributes' => array('class' => array('retrieve-link'),'target' => '_blank'),
      'html' => FALSE,
    ),
    '#access' => pg_race_retrive_access($entity, $gid) && og_user_access('node', $gid, 'administer-group', $user),
  );

  return render($link);
}

function pg_race_retrive_table_callback($entity) {

  $og_ref_items = field_get_items('ent_race', $entity, 'og_group_ref');
  $gid = $og_ref_items[0]['target_id'];

  $node = node_load($gid);
  $core_id_items = field_get_items('node', $node, 'field_core_id');
  $race_id_items = field_get_items('ent_race', $entity, 'field_core_id');

  $link =  array(
    '#theme' => 'link',
    '#text' => t('Retrieve table'),
    '#path' => PG_RACE_RETREIVE_URL,
    '#options' => array(
      'attributes' => array('class' => array('retrieve-table-link'), 'target' => '_blank'),
      'html' => FALSE,
      'query' => array(
        'contestid' => $core_id_items[0]['value'],
        'raceid' => $race_id_items[0]['value'],
      )
    ),
    '#access' => pg_race_retrive_access($entity, $gid),
  );

  return render($link);
}


function pg_race_retrive_access($entity, $gid) {
  $race_date_items = field_get_items('ent_race', $entity, 'field_race_start_end');
  $event_date = airtribune_extract_time_from_event($gid);
  $offset = $event_date['offset'];
  $start_limit = strtotime($race_date_items[0]['value']);
  $end_limit = strtotime(date('Y-m-d', strtotime($race_date_items[0]['value2']) + 24*3600)) + 7200;
  $now = REQUEST_TIME + $offset;
  return  $start_limit < $now && $now < $end_limit;
}


/**
 * Implements hook_entity_view()
 */
function pg_race_entity_view($entity, $type, $view_mode, $langcode) {

  if ($type == 'ent_race' && $entity->type == 'pg_race') {
    $preview = _pg_race_preview_markup($entity);
    $markup = $preview['markup'];
    $title = $preview['title'];
    
    $entity->content['pg_race_play_link'] = array(
      '#type' => 'item',
      '#title' => $title,
      '#markup' => $markup,
    );

      $entity->content['pg_race_retrieve_link'] = array(
        '#markup' => pg_race_retrive_callback($entity),
      );

      $entity->content['pg_race_retrieve_table_link'] = array(
        '#markup' => pg_race_retrive_table_callback($entity),
      );

    // Race preview image
    $entity->content['pg_race_preview_image'] = array(
      '#type' => 'item',
      '#title' => t('Task preview'),
      '#markup' => pg_race_preview_image_callback($entity),
    );
  }
  
}

/**
 * Implements hook_node_view()
 * 
 * Add visualization link extra field content to Day node.
 */
function pg_race_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'day') {
    // Add content to day node extra field
    $node->content['day_pg_race_play_link'] = array(
      '#type' => 'item',
      '#markup' => _day_pg_race_preview_markup($node),
    );
  }
}



function _pg_race_preview_markup($entity) {
  $wrapper = entity_metadata_wrapper('ent_race', $entity);
  $race_core_id = $wrapper->field_core_id->value();
  
  //$pg_contest_entities = $wrapper->og_group_ref->value();
  $items = field_get_items('ent_race', $entity, OG_AUDIENCE_FIELD);
  
  if (!empty($items) && is_array($items)) {
    $item = array_shift($items);
    $target_id = $item['target_id'];
    $node = node_load($target_id);
    $pg_contest_wrapper = entity_metadata_wrapper('node', $node);
    $contest_core_id = $pg_contest_wrapper->field_core_id->value();
  }
  
  
  // Prepare link parameters
  $params = array(
    'status' => _airtribune_pg_race_online_status($entity->id),
    'race_entity_id' => $entity->id,
  );
  $params['race_core_id'] = !empty($race_core_id) ? $race_core_id : '';
  $params['contest_core_id'] = !empty($contest_core_id) ? $contest_core_id : '';
  
  if ($params['status'] == FALSE) {
    return;
  }
  
  $markup = _pg_race_play_link($params);
  
  $title = $params['status'] == 'online' ? t('Livetracking') : t('Replay');
  

  
  drupal_add_js(drupal_get_path('module', 'pg_race') .'/js/pg_race_play_link.js', 'file');
  drupal_add_js(array('pgRace' => array('coreApiAddress' => at_core_sync_get_api_url())), 'setting');
  
  return array(
    'title' => $title,
    'markup' => $markup,
  );
}

/**
 * Prepare markup for play links
 */
function _pg_race_play_link($params) {
  $class2d = array('race-link', '2d');
  $class3d = array('race-link', '3d');
  
  if ($params['status'] == 'online') {
    $class2d[] = 'online';
    $class3d[] = 'online';
  }
    
  $href2d = '<span class="file">' . theme('html_tag', array('element' => array('#tag' => 'a', '#value' => '2D', '#attributes' => array('class' => $class2d, 'target' => '_blank')))) . '</span>';
  $href3d = '<span class="file">' . theme('html_tag', array('element' => array('#tag' => 'a', '#value' => '3D', '#attributes' => array('class' => $class3d, 'target' => '_blank')))) . '</span>';
  
  
  // Generate list
  //$items = array($href2d, $href3d);
  $items = array($href2d);
  
  $ul_attribuntes = array(
    'class' => array('race-links'),
    'data-race-eid' => $params['race_entity_id'],
    'data-contest-cid' => $params['contest_core_id'],
    'data-race-cid' => $params['race_core_id'],
  );
  
  // If online
  if ($params['status'] == 'online') {
    $ul_attribuntes['data-view-type'] = 'online';
  }
  
  $variables = array(
    'type' => 'ul',
    'title' => '',
    'items' => $items,
    'attributes' => $ul_attribuntes,
  );
  $output = theme('item_list', $variables);
  
  return $output;
}





/**
 * Return markup for visualization link.
 */
// TODO:
function _day_pg_race_preview_markup($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $day_status = $wrapper->field_day_status->value();
  
  // Hide markup if status is != 'Ok' or != 'Stopped'.
  if (($day_status !== '0') && ($day_status !== '1')) {
    return '';
  }
  
  // Get race status and core id data
  $data = _day_pg_race_preview_data($node);
  // Race status data
  $status = $data['status'];
  $has_task = $data['has_task'];
  $start_time = $data['start_time'];
  $countdown_time = $data['countdown_time'];
  // Core id data
  $race_entity_id = $data['race_entity_id'];
  $contest_core_id = $data['contest_core_id'];
  $race_core_id = $data['race_core_id'];
  $localtime = !empty($data['localtime']) ? $data['localtime'] : 0;
  $offset = !empty($data['offset']) ? $data['offset'] : 0;
  $is_current_day = $data['is_current_day'];

  // Wrapper data


  // span Wrapper attributes
  $wrapper_attributes = array(
    'class' => array('race-links'),
    'data-race-eid' => $race_entity_id,
    'data-contest-cid' => $contest_core_id,
    'data-race-cid' => $race_core_id,
  );
  // Add wrapper Race status class
  switch ($status) {
    case 'awaiting' :
      $wrapper_attributes['class'][] = 'race-awaiting';
      if ($has_task) {
        $wrapper_attributes['data-view-type'] = 'online';
      }
      break;
    case 'online' :
      $wrapper_attributes['class'][] = 'race-online';
      $wrapper_attributes['data-view-type'] = 'online';
      break;
    case 'offline' :
      $wrapper_attributes['class'][] = 'race-offline';
      break;
  }
  
  
  // Content data
  
  $class2d = array('race-link', '2d');
  
  $help_text = '';
  $time = '';
  
  
  // Check if task exists
  if ($has_task) {
    switch ($status) {
      case 'awaiting' :
        $link_text = t('Watch Live');
        $time = $countdown_time;
        $time = date('H:i:s', $countdown_time);
        $time = $countdown_time > 0 ? '-' . $time : $time;
        $help_text = t('Race starts in');
        drupal_add_js(array('Day' => array('localtime' => $localtime*1000)), 'setting');
        drupal_add_js(array('Day' => array('offset' => $offset*1000)), 'setting');
        break;
      case 'online' :
        $link_text = t('Watch Live');
        $time = date('H:i:s', $start_time + $offset);
        $help_text = t('Race starts on');
        break;
      case 'offline' :
        $link_text = t('Replay');
        break;
    }
    
    if ($is_current_day) {
      $wrapper_attributes['data-start-time'] = $start_time*1000;
    }
  }
  else {
    if (!$is_current_day) {
      return '';
    }
    // Default link and help text in case task isn't set.
    $link_text = t('Watch Live');
    $help_text = t('Button will be here as soon as task is set.');
    // Do not output time/countdown
    $time = '';
    // Add wrapper attribute. Can be used in js
    $wrapper_attributes['class'][] = 'no-task';
  }
  
  if ($status == 'offline') {
    $output = _day_pg_race_preview_offline_markup($data);
  }
  else {
    // Wrap link text
    $link_text = '<span class="file">' . theme('html_tag', array('element' => array('#tag' => 'a', '#value' => $link_text, '#attributes' => array('class' => $class2d, 'target' => '_blank', 'rel' => 'nofollow')))) . '</span>';
    // Wrap time and help-text if not empty.
    $time = !empty($time) ? '<span id="time-counter" class="time">'. $time . '</span>' : '';
    $help_text = !empty($help_text) ? '<span class="help-text">'. $help_text . '</span>' : '';
    
    // Prepare output
    $output = $link_text . $help_text . $time;
    $output = theme('html_tag', array('element' => array('#tag' => 'span', '#value' => $output, '#attributes' => $wrapper_attributes)));
  }
  
  // Add js
  drupal_add_js(drupal_get_path('module', 'pg_race') .'/js/ie-fix.js', 'file');
  drupal_add_js(drupal_get_path('module', 'pg_race') .'/js/day_pg_race_play_link.js', 'file');
  drupal_add_js(array('Day' => array('button_soon_text' => t('Button will be here soon.'))), 'setting');
  drupal_add_js(array('pgRace' => array('coreApiAddress' => at_core_sync_get_api_url())), 'setting');

  return $output;
}

/**
 * Return data for visualization link.
 */
// TODO:
function _day_pg_race_preview_data($node) {
  // Initialize values
  $data = array(
    'is_current_day' => NULL,
    'status' => NULL,
    'has_task' => NULL,
    'start_time' => NULL,
    'countdown_time' => NULL,
    'race_entity_id' => NULL,
    'race_core_id' => NULL,
    'contest_core_id' => NULL,
  );
  
  // Get task and event data
  $task_data = _day_pg_race_task_set($node);
  
  $data['is_current_day'] = $task_data['is_current_day'];
  if (empty($task_data['entity'])) {
    $data['has_task'] = FALSE;
    return $data;
  }
  $data['has_task'] = TRUE;
  $data['status'] = $task_data['status'];
  
  $data['start_time'] = $task_data['start_time'];
  $data['localtime'] = $task_data['localtime'];
  $data['countdown_time'] = $task_data['countdown_time'];
  
  $data['race_entity_id'] = $task_data['race_entity_id'];
  $data['race_core_id'] = $task_data['race_core_id'];
  $data['contest_core_id'] = $task_data['contest_core_id'];
  
  $data['offset'] = $task_data['offset'];
  
  return $data;
}

/**
 * Get day task if exists and check if points exist.
 */
function _day_pg_race_task_set($day_node) {
  
  $task_data = array(
    'is_current_day' => NULL,
    'entity' => NULL,
    'status' => NULL,
    'start_time' => NULL,
    //'has_points' => NULL,
    //'has_tacks' => NULL,
    'race_entity_id' => NULL,
    'race_core_id' => NULL,
    'contest_core_id' => NULL,
  );
  
  // TODO: Remove duplicated operations (see if() case)
  // Check if it is current day
  $created = $day_node->created;
  $items = field_get_items('node', $day_node, OG_AUDIENCE_FIELD);
  $item = array_shift($items);
  $target_id = $item['target_id'];
  $node = node_load($target_id);
  $event_time = airtribune_extract_time_from_event($node);
  if (!isset($event_time['offset'])) {
    return;
  }
  $offset = $event_time['offset'];
  
  $task_data['is_current_day'] = date('Y-m-d', $created - $offset) == date('Y-m-d', time() - $offset) ? TRUE : FALSE;
  $day_id = $day_node->nid;
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'ent_race')
        ->entityCondition('bundle', 'pg_race')
        ->fieldCondition('field_day_ref', 'target_id', $day_id, '=');
  
  $result = $query->execute();
  if (!empty($result['ent_race'])) {
    $entity = array_shift($result['ent_race']);
    $entities = entity_load('ent_race', array($entity->id));
    $entity = array_shift($entities);
    $task_data['entity'] = $entity;
    
    
    $wrapper = entity_metadata_wrapper('ent_race', $entity);
    
    // TODO: Check if points are set and track files exist
    //$race_tracks = $wrapper->field_pg_race_tracks->value();
    //$points = field_get_items('ent_race', $entity, 'field_dates');
    
    
    
    
    // Get Race core_id and entity_id
    $race_core_id = $wrapper->field_core_id->value();
    $task_data['race_entity_id'] = $entity->id;
    $task_data['race_core_id'] = !empty($race_core_id) ? $race_core_id : NULL;
    
    // Get Event core_id for a given Race.
    $items = field_get_items('ent_race', $entity, OG_AUDIENCE_FIELD);
    if (empty($items) || !is_array($items)) {
      watchdog('warning', t('Og reference not set for Race id = ' . $entity->id));
      return;
    }
    
    $item = array_shift($items);
    $target_id = $item['target_id'];
    $node = node_load($target_id);
    $pg_contest_wrapper = entity_metadata_wrapper('node', $node);
    $contest_core_id = $pg_contest_wrapper->field_core_id->value();
    $task_data['contest_core_id'] = !empty($contest_core_id) ? $contest_core_id : NULL;
      
    // Get time data for a given race
    // Get event time offset
    $event_time = airtribune_extract_time_from_event($node);
    if (!isset($event_time['offset'])) {
      return;
    }
    $offset = $event_time['offset'];
    
    // Get Race Time data
    $start_end = $wrapper->{AIRTRIBUNE_RACE_START_END_FIELD}->value();
    $start = strtotime($start_end['value']) - $offset;
    $end = strtotime($start_end['value2']) - $offset;
    
    $current_time = time();
    
    if ($start <= $current_time && $current_time < $end) {
      // online
      $status = 'online';
    }
    elseif ($current_time >= $end) {
      // offline. race finished
      $status = 'offline';
    }
    else {
      // race haven't started yet
      $status = 'awaiting';
    }
    
    
    $countdown_time = $start - $current_time;
    
    // TODO: Get local time with offset
    $localtime = $current_time + $offset;
    
    
    $task_data['status'] = $status;
    
    $task_data['start_time'] = $start;
    $task_data['countdown_time'] = $countdown_time;
    $task_data['localtime'] = $localtime;
    $task_data['offset'] = $offset;
  }
  
  return $task_data;
}

/**
 * Return markup in case Race is offline.
 */
// TODO:
function _day_pg_race_preview_offline_markup($data) {
  $class2d = array('race-link', '2d');
  $class3d = array('race-link', '3d');
  
  // For online see Watch Live link
  /*
  if ($params['status'] == 'online') {
    $class2d[] = 'online';
    $class3d[] = 'online';
  }
  */
  
  $href2d = '<span class="file">' . theme('html_tag', array('element' => array('#tag' => 'a', '#value' => '2D', '#attributes' => array('class' => $class2d, 'target' => '_blank', 'rel' => 'nofollow')))) . '</span>';
  $href3d = ''; //'<span class="file">' . theme('html_tag', array('element' => array('#tag' => 'a', '#value' => '3D', '#attributes' => array('class' => $class3d, 'target' => '_blank', 'rel' => 'nofollow')))) . '</span>';
  
  
  // Generate list
  $items = array($href2d, $href3d);
  
  $ul_attribuntes = array(
    'class' => array('race-links'),
    'data-race-eid' => $data['race_entity_id'],
    'data-contest-cid' => $data['contest_core_id'],
    'data-race-cid' => $data['race_core_id'],
  );
  
  /*
  // If online
  if ($params['status'] == 'online') {
    $ul_attribuntes['data-view-type'] = 'online';
  }
  */
  
  $variables = array(
    'type' => 'ul',
    'title' => '',
    'items' => $items,
    'attributes' => $ul_attribuntes,
  );
  $output = theme('item_list', $variables);
  $output = '<span class="replay-link-label">' . t('Replay') . '</span>' . '<span class="replay-link-content">' . $output . '</span>';
  
  return $output;
}



