<?php
/**
 * @file
 * Code for the Paragliding Race feature.
 */

include_once 'pg_race.features.inc';


/**
 * Implements hook_entity_presave().
 */
function pg_race_entity_presave($entity, $type) {
  // Check race type.
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);
    $day_node = $wrapper->{AIRTRIBUNE_DAY_REF_FIELD}->value();
    // Get day "created" time components
    $created = getdate($day_node->created);
    // List field names to change.
    $field_names = array(AIRTRIBUNE_RACE_START_END_FIELD, AIRTRIBUNE_PG_RACE_WINDOW_OPEN_CLOSE_FIELD);
    // Change each field's value.
    foreach ($field_names as $field_name) {
      $field_value = $wrapper->{$field_name}->value();
      // Change start and finish components' values.
      foreach (array('value', 'value2') as $k) {
        // Get field value time components
        $value_time = getdate(strtotime($field_value[$k]));
        // Prepare result time components
        $args = array(
          $value_time['hours'],
          $value_time['minutes'],
          $value_time['seconds'],
          $created['mon'],
          $created['mday'],
          $created['year'],
        );
        $new_time = call_user_func_array('mktime', $args);
        $new_time = date('Y-m-d H:i:s', $new_time);
        $field_value[$k] = $new_time;
      }
      // Set new time value
      $wrapper->{$field_name}->set($field_value);
    }
    // race_recount_days($entity);
  }
}

/**
 * Implements hook_entity_presave().
 */
function pg_race_entity_delete($entity, $type) {
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    // race_recount_days();
  }
}

function race_recount_days($entity) {
  $ch = curl_init();

  $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);

  // TODO refactor, with using og functions
  $og = field_get_items(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity, AIRTRIBUNE_OG_GROUP_REF_FIELD);
  $og = node_load($og['0']['target_id']);
  $contest_core_id = get_id_from_contest($og);
  $races = db_select('og_membership', 'o')
    ->fields('o', array('etid'))
    ->condition('o.gid', $og->nid)
    ->condition('o.entity_type', AIRTRIBUNE_RACE_ENTITY_TYPE)
    ->execute();

  $day_counter = 0;
  foreach ($races as $race) {
  //  $current_race = array_pop(entity_load('ent_race', array((string)$race->etid), array(), TRUE));
    $current_race = array_pop(entity_load('ent_race', array('1'), array(), TRUE));
    $race_core_id = get_race_id_from_race($current_race);
    $day_ref = field_get_items(AIRTRIBUNE_RACE_ENTITY_TYPE, $current_race, AIRTRIBUNE_DAY_REF_FIELD);
    $day_node = node_load($day_ref['0']['value']);
// for debug
    $contest_core_id = 'cnts-130524-929732732';
    $race_core_id = 'r-0bcd3bd9-1249-46c8-8bba-a2085c96f463';
//0|Ok
//1|Stopped
//2|Cancelled
//3|Rest day
//4|Registration day
//5|Training day
    if ($day_node->field_day_status['und']['0']['target_id'] < 3) {
      $day_counter++;
      $url = at_core_sync_get_api_url() . "contest/" . $contest_core_id . "/race/" . $race_core_id;
      curl_setopt_array($ch, array(
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => TRUE,
      ));
      $core_race_data = curl_exec($ch);
      $core_race_data = drupal_json_decode($core_race_data);
      $optdistance = $core_race_data->optdistance;
    }
  }
}

/**
 * Implements hook_field_extra_fields()
 */
function pg_race_field_extra_fields() {
  
  $extra['ent_race']['pg_race'] = array(
    'form' => array(
      'pg_race_play_link' => array(
        'label' => t('Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
      ),
    ),
    'display' => array(
      'pg_race_play_link' => array(
        'label' => t('Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
        'callback' => 'pg_race_play_link_callback',
      ),
    ),
  );
  
  return $extra;
}

function pg_race_play_link_callback($entity) {
  if ($entity->type == 'pg_race') {
    
    $preview = _pg_race_preview_markup($entity);
    $markup = $preview['markup'];
    $title = $preview['title'];
    
    $output = array(
      '#type' => 'item',
      '#title' => $title,
      '#markup' => $markup,
    );
    
    $output = $markup;
    return $output;
  }
  
}

/**
 * Implements hook_entity_view()
 */
function pg_race_entity_view($entity, $type, $view_mode, $langcode) {
  
  if ($type == 'ent_race' && $entity->type == 'pg_race') {
    $preview = _pg_race_preview_markup($entity);
    $markup = $preview['markup'];
    $title = $preview['title'];
    
    $entity->content['pg_race_play_link'] = array(
      '#type' => 'item',
      '#title' => $title,
      '#markup' => $markup,
    );
  }
  
}

function _pg_race_preview_markup($entity) {
  $wrapper = entity_metadata_wrapper('ent_race', $entity);
  $race_core_id = $wrapper->field_core_id->value();
  
  //$pg_contest_entities = $wrapper->og_group_ref->value();
  $items = field_get_items('ent_race', $entity, AIRTRIBUNE_OG_GROUP_REF_FIELD);
  
  if (!empty($items) && is_array($items)) {
    $item = array_shift($items);
    $target_id = $item['target_id'];
    $node = node_load($target_id);
    $pg_contest_wrapper = entity_metadata_wrapper('node', $node);
    $contest_core_id = $pg_contest_wrapper->field_core_id->value();
  }
  
  
  // Prepare link parameters
  $params = array(
    'status' => _airtribune_pg_race_online_status($entity->id),
    'race_entity_id' => $entity->id,
  );
  $params['race_core_id'] = !empty($race_core_id) ? $race_core_id : '';
  $params['contest_core_id'] = !empty($contest_core_id) ? $contest_core_id : '';
  
  if ($params['status'] == FALSE) {
    return;
  }
  
  $markup = _pg_race_play_link($params);
  
  $title = $params['status'] == 'online' ? t('Livetracking') : t('Replay');
  

  
  drupal_add_js(drupal_get_path('module', 'pg_race') .'/js/pg_race_play_link.js', 'file');
  drupal_add_js(array('pgRace' => array('coreApiAddress' => at_core_sync_get_api_url())), 'setting');
  
  return array(
    'title' => $title,
    'markup' => $markup,
  );
}

/**
 * Prepare markup for play links
 */
function _pg_race_play_link($params) {
  $class2d = array('race-link', '2d');
  $class3d = array('race-link', '3d');
  
  if ($params['status'] == 'online') {
    $class2d[] = 'online';
    $class3d[] = 'online';
  }
    
  $href2d = '<span class="file">' . theme('html_tag', array('element' => array('#tag' => 'a', '#value' => '2D', '#attributes' => array('class' => $class2d, 'target' => '_blank')))) . '</span>';
  $href3d = '<span class="file">' . theme('html_tag', array('element' => array('#tag' => 'a', '#value' => '3D', '#attributes' => array('class' => $class3d, 'target' => '_blank')))) . '</span>';
  
  
  // Generate list
  //$items = array($href2d, $href3d);
  $items = array($href2d);
  
  $ul_attribuntes = array(
    'class' => array('race-links'),
    'data-race-eid' => $params['race_entity_id'],
    'data-contest-cid' => $params['contest_core_id'],
    'data-race-cid' => $params['race_core_id'],
  );
  
  // If online
  if ($params['status'] == 'online') {
    $ul_attribuntes['data-view-type'] = 'online';
  }
  
  $variables = array(
    'type' => 'ul',
    'title' => '',
    'items' => $items,
    'attributes' => $ul_attribuntes,
  );
  $output = theme('item_list', $variables);
  
  return $output;
}



