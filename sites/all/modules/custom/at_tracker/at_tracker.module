<?php

include_once 'at_tracker.field.inc';
include_once 'at_tracker.storage.inc';

/**
* Implements hook_views_api().
*/
function at_tracker_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'at_tracker') . '/views',
  );
}

/**
* Implements hook_field_create_field().
*/
function at_tracker_field_create_field($field) {
  if ($field['type'] == 'at_tracker') {
    $field['storage'] = array(
        'type' => 'at_tracker_field_storage',
        'settings' => array(),
        'module' => 'at_tracker',
        'active' => 1,
    );

    // Build record to update.
    $record = array(
      'id' => $field['id'],
      'storage_type' => $field['storage']['type'],
      'storage_module' => $field['storage']['module'],
      'storage_active' => $field['storage']['active'],
    );

    // Update the field storage.
    $primary_key = array('id');
    drupal_write_record('field_config', $record, $primary_key);
  }
}

/**
* Implements hook_field_update_field().
*/
function at_tracker_field_update_field($field) {
  at_tracker_field_create_field($field);
}

/**
 *  Create a new form
 */
function at_tracker_editable_widget_form($form, &$form_state, $entity_type, $entity, $field, $instance, $langcode, $delta = 0, $row_index = 0) {
  $items = $entity->{$field['field_name']};
  $items = isset($items[$langcode]) ? $items[$langcode] : array();
  $form['#row_index'] = $row_index;
  $form += field_default_form($entity_type, $entity, $field, $instance, $langcode, $items, $form, $form_state, $delta);

  // Wrap the whole form into a wrapper, and prepare AJAX settings.
  $wrapper_id = drupal_html_id('at-tracker-editable-' . $field['field_name']);
  $form['#prefix'] = '<div id="' . $wrapper_id . '" class="editable-' . $field['type'] . ' editable-item">';
  $form['#suffix'] = '</div>';
  $form['#entity_type'] = $entity_type;
  $form['#entity'] = $entity;
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  $form['#entity_id'] = $id;
  $ajax = array(
    'callback' => 'at_tracker_editable_form_update',
    'wrapper' => $wrapper_id,
    'effect' => 'fade',
    'event' => 'click',
    'progress' => array(
      'type' => 'throbber',
      'message' => t('Please wait'),
    ),
  );

  // Submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#ajax' => $ajax,
    '#submit' => array('at_tracker_editable_widget_form_submit'),
  );
  return $form;
}

/**
 * Ajax callback: process an Ajax submission of the form.
 */
function at_tracker_editable_form_update($form, $form_state) {
  // Return the proper part of the form.
  $parents = $form_state['triggering_element']['#array_parents'];
  // Remove the 'actions' and 'link' elements.
  array_pop($parents);
  array_pop($parents);

  $element = &$form;
  foreach ($parents as $parent) {
    $element = &$element[$parent];
  }

  return $element;
}

/**
 * Form submit callback: save the field modifications.
 */
function at_tracker_editable_widget_form_submit(&$form, &$form_state) {
  // Return the proper part of the form.
  $parents = $form_state['triggering_element']['#array_parents'];
  // Remove the 'actions' and 'link' elements.
  array_pop($parents);
  array_pop($parents);

  $element = &$form;
  foreach ($parents as $parent) {
    $element = &$element[$parent];
  }

  $element = &$form;
  $entity = $element['#entity'];

  entity_form_submit_build_entity($element['#entity_type'], $entity, $element, $form_state);

  // Validate element, which was changed, using standard drupal field validation.
  $errors = array();
  _field_invoke_default('extract_form_values', $element['#entity_type'], $entity, $form, $form_state);
  _field_invoke('validate', $element['#entity_type'], $entity, $errors);
  // Got errors, attach error message to element.
  if ($errors) {
    foreach($errors[$parents[0]][$element['#langcode']][0] as $error) {
      form_error($element, $error['message']);
    }
  } else {
    // TODO: needs a try / catch.
    entity_save($element['#entity_type'], $entity);
    $form_state['rebuild'] = TRUE;
  }
dpm($entity);
  // Re-load the entity so that fields can act on the new value.
  $entity = entity_load_single($element['#entity_type'], $element['#entity_id']);
  $form_state['#entity'] = $entity;
}
