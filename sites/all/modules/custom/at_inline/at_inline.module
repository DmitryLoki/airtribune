<?php

/**
 * Implements hook_views_api().
 */
function at_inline_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'at_inline') . '/views',
  );
}

/**
 * Implements hook_permission().
 */
function at_inline_permission() {
  return array(
    'set a task' => array(
      'title' => t('Set a task'),
      'description' => t('Set paragliding task for event day.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function at_inline_menu() {
  $items['at-inline-tmp'] = array(
    'page callback' => 'at_inline_tmp',
    'access callback' => TRUE,
    'file' => 'eck.bundle.inc',
    'file path' => drupal_get_path('module', 'eck'),
  );
  // TODO: nojs callback

  $items['at-inline/ajax/%'] = array(
    'page callback' => 'at_inline_ajax',
    'page arguments' => array(2),
    //'access callback' => TRUE, // TODO:
    'access arguments' => array('set a task'),
    //'delivery callback'
  );
  return $items;
}

/**
 * Ajax callback
 */
function at_inline_ajax($day_id) {

  //drupal_add_js('misc/collapse.js', 'file');

  // Wrapper select to replace
  $selector = '#at-inline-' . $day_id;

  // Prepare html
  $html = drupal_render(drupal_get_form('at_inline_form', $day_id));

  // Send ajax command
  $ajax_commands[] = ajax_command_html($selector, $html);
  ajax_deliver(array('#type' => 'ajax', '#commands' => $ajax_commands));
}


function at_inline_submit_ajax_callback($form, $form_state) {
  if (form_get_errors()) {
    $hidden = array(
      'field_photos',
      'field_core_id',
      'field_competition_results',
      'field_day_results',
      'field_day_ref',
      'field_pg_race_tracks',
      'og_group_ref'
    );
    at_inline_prepare_form($form, $hidden);
    return $form;

  }
  else {
    return '';
  }
}


function at_inline_form_alter(&$form, &$form_state, $form_id) {


  if (strpos($form_id, 'eck__entity__form') === 0) {

    // Do nothing if it isn't an inline form (i.e. this form is shown on its default page).
    if (!in_array('at_inline_form', $form_state['build_info']['args'])) {
      return;
    }

    $day_id = $form['entity']['#value']->field_day_ref['und'][0]['target_id'];

    $wrapper_id = 'at-inline-' . $day_id;
    // Ajaxify submit
    $form['submit']['#ajax'] = array(
      'callback' => 'at_inline_submit_ajax_callback',
      'wrapper' => $wrapper_id,
      'method' => 'html',
    );

    $form['#after_build'][] = 'at_inline_form_after_build';

    return;


    // Add redirect to form

    //dsm($form_state['build_info']['args']);
    //watchdog('tmp2', serialize($form['#submit']));
    //$form['submit_redirect'] = 'at-inline-tmp';
    //$form['#submit'][] = 'at_inline_form_submit';

    // Redirect path in case validation failed
    if (empty($_GET['og_group_ref'])) {
      return;
    }

    $nid = $_GET['og_group_ref'];
    // Get og_membership entities for the current (only nodes)
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'og_membership')
      ->propertyCondition('entity_type', 'node', '=')
      ->propertyCondition('group_type', 'node', '=')
      ->propertyCondition('gid', $nid, '=')
      ->execute();

    if (!empty($result['og_membership'])) {
      $og_membership_ids = array_keys($result['og_membership']);
      $entities = entity_load('og_membership', $og_membership_ids);
      $nids = array();
      foreach ($entities as $entity) {
        $nids[] = $entity->etid;
      }

      // Get day nodes of the event.
      $query = new EntityFieldQuery();
      $result = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'day')
        ->propertyCondition('nid', $nids, 'IN')
        ->propertyCondition('status', 1, '=')
        ->propertyOrderBy('created')
        ->execute();

      // Get day number and prepare anchor for url.
      if (!empty($result['node'])) {
        $day_nids = array_keys($result['node']);
        $key = array_search($day_id, $day_nids);
        $anchor = $key !== FALSE ? '#!day_' . ($key + 1) : '';
      }
    }


    //$form_state['redirect'] = url('event/' . $nid . '/blog');
    //$form_state['redirect'] .= !empty($anchor) ? $anchor : '';
  }
}

/**
 * Temporary fix.
 * Workaround for hiding og_group_ref field in inline mode.
 * See *** if ($element['#required']) *** in og.field.inc line 260.
 */
function at_inline_form_after_build($form, &$form_state) {
  if (isset($form['og_group_ref'])) {
    $form['og_group_ref']['#required'] = FALSE;
  }
  return $form;
}

function at_inline_tmp() {
  $day_id = 5497;

  drupal_add_library('system', 'drupal.ajax');

  //$output = l(t('AJAX link'), 'at-inline/nojs/1', array('attributes' => array('class' => array('use-ajax'))));
  $output = l(t('AJAX link'), 'at-inline/nojs/' . $day_id, array('attributes' => array('class' => array('use-ajax'))));
  //$output = '';
  $output .= '<div id="at-inline-' . $day_id . '"></div>';


  return $output;
}


/**
 * Temporary callback.
 * For testing purposes only.
 */
function at_inline_form($form, &$form_state, $day_id = NULL) {
  //dsm($_POST);
  // TODO:


  //$gid = _at_inline_set_og_ref($day_id);
  _at_inline_set_og_ref($day_id);

  $entity_type = AIRTRIBUNE_RACE_ENTITY_TYPE;
  $bundle = AIRTRIBUNE_PG_RACE_TYPE;

  $race_id = _at_inline_race_exists($day_id);

  // Set inline flag for presave hook
  $entity = entity_load_single($entity_type,$race_id);
  $entity->is_inline = TRUE;
  field_attach_form($entity_type, $entity, $form, $form_state);

  //dsm($form['submit_redirect']);
  //watchdog('tmp2', serialize($form['#submit']));
  //$form['submit_redirect'] = 'at-inline-tmp';
  //$form['entity']['#value']->field_day_ref['und'][0]['target_id'] = 5497;

  //$form['#submit'][] = 'at_inline_form_submit';
  $fields = array(
    'name',
    '#parents',
    '#entity',
    'field_pg_racetype_ref',
    'field_race_start_end',
    'field_pg_race_window_open_close',
    'field_optdistance',
    'field_race_number',
    '#pre_render',
    '#entity_type',
    '#bundle',
    '#after_build',
    '#validate',
    '#attached',
    '#groups',
    '#fieldgroups',
    '#group_children',
  );

  foreach ($form as $id => $value) {
    if(!in_array($id, $fields))
      unset($form[$id]);
  }
  $form['#prefix'] = '<a class="at-inline-close">' . t('Close') . '</a>';

  $form['race'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form['day_id'] = array(
    '#type' => 'value',
    '#value' => $day_id,
  );

  $form['#suffix'] = '<div id="at-inline-race-edit-form-' . $entity->id . '"></div>';
  $form['actions']['#weight'] = 999;
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<div class="form-actions">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'at_inline_form_submit',
      'wrapper' => 'at-inline-race-edit-form' . $entity->id,
    ),
    '#submit' => array('at_inline_form_submit'),
  );
  drupal_add_js('Drupal.behaviors.updateForm = {attach:function(){updateForm(false, {disableChoiceOfFirstItemInSelection:true, file_bt:Drupal.t("Add image")})}}', 'inline');

  return $form;
}

function at_inline_form_submit($form, &$form_state) {
  $values = & $form_state['values'];
  $race = $values['race'];
  $entity_type = AIRTRIBUNE_RACE_ENTITY_TYPE;
  $day_id = $values['day_id'];
  field_attach_submit($entity_type, $race, $form, $form_state);
  entity_save($entity_type, $race);

  $content = '<div class="messages status"><span>' . t('Race has been saved.') . '</span></div>';
  $commands = array(
    ajax_command_html('#at-inline-' . $day_id, $content),
  );
  $replace = array('#type' => 'ajax', '#commands' => $commands);
  return $replace;
}

function at_inline_entity_presave($entity, $type) {
  if ($type == AIRTRIBUNE_RACE_ENTITY_TYPE && $entity->type == AIRTRIBUNE_PG_RACE_TYPE) {
    // Set og_group_ref if inline Race form is edited
    // Check that form is inline
    if (isset($entity->original) && !empty($entity->is_inline)) {
      $gid = $entity->original->{OG_AUDIENCE_FIELD}['und'][0]['target_id'];
      $entity->{OG_AUDIENCE_FIELD}['und'][0]['target_id'] = $gid;
    }
  }
}


// TODO:
// Return $group_id
function _at_inline_set_og_ref($day_id) {
  // see entityreference_prepopulate() line 271 (!is_string($_GET[$field_name])
  //5364
  $day_node = node_load($day_id);
  $og_group_ref = field_get_items('node', $day_node, 'og_group_ref');
  //

  // TODO: Add checks
  $group_id = $og_group_ref[0]['target_id'];
  //dsm($og_group_ref);
  //$group_id = 5438;
  $_GET['og_group_ref'] = (string) $group_id;
  return $group_id;
}


/**
 * Modified version of eck__entity__add().
 */
function _at_inline_eck__entity__add($entity_type_name, $bundle_name, $day_id) {
  $entity_type = entity_type_load($entity_type_name);
  $bundle = bundle_load($entity_type_name, $bundle_name);

  $entity = entity_create($entity_type->name, array('type' => $bundle->name));

  // Set day id, since it is hidden in add/edit form
  //$wrapper = entity_metadata_wrapper('ent_race', $entity);
  //$wrapper->field_day_ref->value();
  $entity->field_day_ref['und'][0]['target_id'] = $day_id;

  return drupal_get_form("eck__entity__form_add_{$entity_type_name}_{$bundle_name}", $entity, 'at_inline_form');
}

function _at_inline_race_exists($day_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', AIRTRIBUNE_RACE_ENTITY_TYPE)
    ->entityCondition('bundle', AIRTRIBUNE_PG_RACE_TYPE)
    ->fieldCondition('field_day_ref', 'target_id', $day_id, '=');
  $result = $query->execute();
  if (!empty($result[AIRTRIBUNE_RACE_ENTITY_TYPE])) {
    $entity = array_shift($result[AIRTRIBUNE_RACE_ENTITY_TYPE]);
    return $entity->id;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_field_extra_fields()
 */
function at_inline_field_extra_fields() {

  $extra['node']['day'] = array(
    /*
    'form' => array(
      'day_set_a_task' => array(
        'label' => t('Paragliding race link'),
        'description' => t('Link for visualization'),
        'weight' => -5,
      ),
    ),
    */
    'display' => array(
      'day_set_a_task' => array(
        'label' => t('Set a task link'),
        'description' => t('Link to add/edit day task'),
        'weight' => -5,
        'callback' => 'day_set_a_task',
      ),
    ),
  );

  return $extra;
}

function day_set_a_task($entity) {
  if (!user_access('set a task')) {
    return;
  }
  $markup = _at_inline_set_a_task_link($entity);
  return $markup;
}

/**
 * Implements hook_entity_view()
 */
function at_inline_entity_view($entity, $type, $view_mode, $langcode) {

  if (!user_access('set a task')) {
    return;
  }
  if ($type == 'node' && $entity->type == 'day') {
    $markup = _at_inline_set_a_task_link($entity);

    $entity->content['day_set_a_task'] = array(
      '#type' => 'item',
      //'#title' => $title,
      '#markup' => $markup,
    );
  }

}

function _at_inline_set_a_task_link($node) {
  drupal_add_library('system', 'drupal.ajax');

  drupal_add_js('misc/jquery.form.js', 'file');
  // Fix conflict with visualization jquery version on event blog page
  drupal_add_js(drupal_get_path('module', 'at_inline') . '/at_inline.js', 'file');

  $link_text = _at_inline_race_exists($node->nid) ? t('Edit task') : t('Set a task');
  $output = t('<a href="/at-inline/nojs/' . $node->nid . '" class="use-ajax set-a-task-link" rel="nofollow">' . $link_text . '</a><div id="at-inline-' . $node->nid . '" class="at-inline-set-a-task-wrapper"></div>');
  return $output;
}


/**
 * Implements hook_views_post_execute()
 */
function at_inline_views_post_execute(&$view) {
  if ($view->name == 'event_days') {
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_js('misc/jquery.form.js', 'file');
  }
}
