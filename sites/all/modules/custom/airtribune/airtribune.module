<?php

/**
 * @file
 * Common functions that many Airtribune plugins will need to reference.
 */

include_once 'airtribune_nodes.inc';

define('AIRTRIBUNE_VIS_URL', 'http://vis.airtribune.com');
define('AIRTRIBUNE_RETRIEVE_URL', 'http://retrieve.airtribune.com');
define('AIRTRIBUNE_LANGUAGES_ICONSET', 'shiny');
define('AIRTRIBUNE_USER_MAIN_PROFILE', 'main');

// See field field_pg_contestant_status allowed values list.
define('AIRTRIBUNE_PG_CONTESTANT_WAITING_LIST', 1);
define('AIRTRIBUNE_PG_CONTESTANT_CONFIRMED', 4);
define('AIRTRIBUNE_CAROUSEL_IMAGE_STYLE', 'hotel_preview');
define('AIRTRIBUNE_INFO_CAROUSEL_IMAGE_STYLE', 'contest_gallery_thumb');

// Fields.
define('AIRTRIBUNE_USER_FULLNAME_FIELD', 'field_full_name');
define('AIRTRIBUNE_OPENCLASS_FIELD', 'field_open_class');
define('AIRTRIBUNE_GETTING_THERE_FIELD', 'field_collection_getting_there');
define('AIRTRIBUNE_COUNTRY_FIELD', 'field_country');
define('AIRTRIBUNE_CITY_FIELD', 'field_city');
define('AIRTRIBUNE_DATES_FIELD', 'field_dates');
define('AIRTRIBUNE_TIMEZONE_FIELD', 'field_time_zone');
define('AIRTRIBUNE_PG_CONTESTANT_STATUS_FIELD', 'field_pg_contestant_status');
define('AIRTRIBUNE_CONTEST_PHOTOS_FIELD', 'field_contest_photos');
define('AIRTRIBUNE_FLYING_SITE_PHOTOS_FIELD', 'field_flying_site_photos');
define('AIRTRIBUNE_AWARDS_PHOTOS_FIELD', 'field_awards_photos');
define('AIRTRIBUNE_FAI_CATEGORY_FIELD', 'field_fai_category');
define('AIRTRIBUNE_HQ_LOCATION_FIELD', 'field_hq_location');
define('AIRTRIBUNE_LOCATION_FIELD', 'field_location');
define('AIRTRIBUNE_RULES_FIELD', 'field_contest_rules');
define('AIRTRIBUNE_TINY_PATH_FIELD', 'field_tiny_path');
define('AIRTRIBUNE_POINTS_FILE_FIELD', 'field_points_file');
define('AIRTRIBUNE_REGISTRATION_SW_FIELD', 'field_registration_sw');
define('AIRTRIBUNE_DAY_RESULTS_FIELD', 'field_day_results');
define('AIRTRIBUNE_DAY_REF_FIELD', 'field_day_ref');
define('AIRTRIBUNE_COMPETITION_RESULTS_FIELD', 'field_competition_results');
define('AIRTRIBUNE_RACE_START_END_FIELD', 'field_race_start_end');
define('AIRTRIBUNE_RACE_NUMBER', 'field_race_number');
define('AIRTRIBUNE_DAY_NUMBER', 'field_day_number');
define('AIRTRIBUNE_PG_RACE_WINDOW_OPEN_CLOSE_FIELD', 'field_pg_race_window_open_close');
define('AIRTRIBUNE_DOWNLOADS_FIELD', 'field_downloads');
define('AIRTRIBUNE_PG_RACETYPE_REF_FIELD', 'field_pg_racetype_ref');
define('AIRTRIBUNE_TWITTER_WIDGET_CODE_FIELD', 'field_twitter_widget_code');
define('AIRTRIBUNE_IMAGE_FIELD', 'field_image');

define('AIRTRIBUNE_PG_RACE_POINTS_FIELD', 'field_pg_race_points');
define('AIRTRIBUNE_PG_RACE_AZIMUTH_FIELD', 'field_pg_race_azimuth');
define('AIRTRIBUNE_POINT_RADIUS_FIELD', 'field_point_radius');
define('AIRTRIBUNE_POINT_TYPE_FIELD', 'field_point_type');
define('AIRTRIBUNE_POINT_SS_ES_FIELD', 'field_point_ss_es');
define('AIRTRIBUNE_POINT_REF_FIELD', 'field_point_ref');
define('AIRTRIBUNE_POINT_LOCATION_FIELD', 'field_point_location');


// Content types.
define('AIRTRIBUNE_PG_CONTEST_TYPE', 'pg_contest');
define('AIRTRIBUNE_PG_RACE_TYPE', 'pg_race');
define('AIRTRIBUNE_NEWSBLOG_TYPE', 'newsblog');
define('AIRTRIBUNE_ACCOMMODATION_TYPE', 'accommodation');
define('AIRTRIBUNE_ACTIVITY_TYPE', 'activity');
define('AIRTRIBUNE_DAY_TYPE', 'day');

// Entity types.
define('AIRTRIBUNE_RACE_ENTITY_TYPE', 'ent_race');
define('AIRTRIBUNE_RACETYPE_ENTITY_TYPE', 'ent_racetype');
define('AIRTRIBUNE_POINT_ENTITY_TYPE', 'ent_point');
define('AIRTRIBUNE_CONTEST_POINT_ENTITY_TYPE', 'ent_contest_point');
define('AIRTRIBUNE_CUSTOMOBJECT_TYPE', 'ent_customobject');

// Views
define('AIRTRIBUNE_PARAGLIDING_PILOTS_LIST', 'paragliding_pilots_list');
define('AIRTRIBUNE_DAY_BLOG_VIEW', 'day_blog');

// Memberships
define('AIRTRIBUNE_MEMBERSHIP_CONTESTANT', 'pg_contestant');
define('AIRTRIBUNE_MEMBERSHIP_ORGANIZER', 'pg_organizer');
define('AIRTRIBUNE_MEMBERSHIP_TRACKEDOBJECT', 'tracked_object');

// Visualisation
define('AIRTRIBUNE_VIS_STATE_ONLINE', 'online');
define('AIRTRIBUNE_VIS_STATE_REPLAY', 'replay');
define('AIRTRIBUNE_VIS_STATE_AWAITING', 'awaiting');

/**
 * Implements hook_views_api().
 */
function airtribune_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'airtribune') . '/views',
  );
}



/**
 * Implements hook_ctools_plugin_directory().
 */
function airtribune_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' || $owner == 'field_validation' || $owner == 'entityreference') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_menu_alter().
 */
function airtribune_menu() {
  $items['soon_country/%'] = array(
    'page callback' => 'airtribune_soon_country',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'plugins/content_types/soon_country/soon_country.inc',
  );
  $items['event/%node/settings'] = array(
    'type' => MENU_LOCAL_TASK,
    'file' => 'airtribune.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('airtribune_event_settings_form', 1),
    'access callback' => 'airtribune_event_settings_access',
    'access arguments' => array(1),
    'title' => 'Settings',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function airtribune_menu_alter(&$items) {
  $items['event/%pm_arg'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'airtribune_pages_callback',
    'page arguments' => array(1),
    'load arguments' => array(
      'event',
      '%index',
      '%map',
    ),
  );
}

/**
 * Event settings page title callback.
 */
function airtribune_event_settings_title($event) {
  $title = "Settings form 2";
  $title = t('!name settings', array('!name' => $event->title));
  return $title;
}

/**
 * Determine whether the current user has access Event settings form
 */
function airtribune_event_settings_access($event, $op = 'edit') {
  global $user;

  $access = TRUE;  
  return $access;
}

/**
 * Implements hook_form_alter().
 */
function airtribune_form_alter(&$form, &$form_state, $form_id) {
  // Add functional of selection of the membership to OG member adding form.
  if ($form_id == 'og_ui_add_users') {
    // Remove membership fields, loaded to og_ui_add_users form by default.
    // This default membership set in people account settings
    // at /admin/config/people/accounts/fields/og_user_node
    unset($form['membership_fields']);

    // load all available memberships
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'og_membership_type')->execute();
    if (!empty($result['og_membership_type'])) {
      $membership_type_ids = array_keys($result['og_membership_type']);
      $membership_types = entity_load('og_membership_type', $membership_type_ids);
    }

    // Remove OG_MEMBERSHIP_TYPE_DEFAULT, which have ID=1 in database,
    // and also have key=1 in $membership_types array.
    unset($membership_types[1]);

    // Set default loaded membership for this form to usual 'contestant'
    $values['type'] = AIRTRIBUNE_MEMBERSHIP_CONTESTANT;

    // TODO refactor to ajax loading form
    // Can we load membership_type from $_GET ?
    $type_from_get = !empty($_GET['type']) ? $_GET['type'] : AIRTRIBUNE_MEMBERSHIP_CONTESTANT;
    $links = '';
    foreach ($membership_types as $v) {
      if ($type_from_get == $v->name) {
        // membership_type from GET parameter is correct and in database?
        $values['type'] = $type_from_get;
        $links .= "<b>&#9658;{$v->description}</b><br>";
      }
      else {
        $links .= "<a href='?type={$v->name}'>{$v->description}</a><br>";
      }
    }
    // links to select membership
    $form['og_user']['membership_type_select'] = array(
      '#markup' => $links,
      '#prefix' => '<div><div><b>' . t('Type') . '</b></div>',
      '#suffix' => '</div>',
    );

    // Add group membership form.
    $gid = $form['gid']['#value'];
    $group_type = $form['group_type']['#value'];
    $og_membership = airtribune_og_membership_create($group_type, $gid, 'user', 0, 'og_user_node', $values);
    $form_state['og_membership'] = $og_membership;

    $form['membership_fields'] = array(
      '#prefix' => '<div id="og-ui-field-name">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
      '#parents' => array('membership_fields'),
    );
    field_attach_form('og_membership', $og_membership, $form['membership_fields'], $form_state);
  }
}

/**
 * Overridden og_membership_create()
 * Create membership using predefined $values['type'], not using default membership from og_user_node
 */
function airtribune_og_membership_create($group_type, $gid, $entity_type, $etid, $field_name, $values = array()) {
  global $language;

  $values += array(
    'group_type' => $group_type,
    'gid' => $gid,
    'entity_type' => $entity_type,
    'etid' => $etid,
    'state' => OG_STATE_ACTIVE,
    'created' => time(),
    'field_name' => $field_name,
    'language' => $language->language,
  );

  if (!og_is_group_audience_field($field_name)) {
    throw new OgException(format_string('%field-name is not a valid group-audience field.', array('%field-name' => $field_name)));
  }

  $wrapper = entity_property_values_create_entity('og_membership', $values);
  return $wrapper->value();
}

/**
 * Implements hook_theme().
 */
function airtribune_theme() {
  $content_plugins_path = drupal_get_path('module', 'airtribune') . '/plugins/content_types';
  return array(
    'airtribune_user_links' => array(
      'template' => 'airtribune-user-links',
      'path' => $content_plugins_path . '/user_links',
      'file' => 'user_links.theme.inc',
      'render element' => 'elements',
    ),
    'airtribune_event_statistics_pane' => array(
      'template' => 'airtribune-event-statistics-pane',
      'path' => $content_plugins_path . '/event_statistics',
      'file' => 'event_statistics.inc',
      'render element' => 'elements',
    ),
    'airtribune_event_statistics' => array(
      'render element' => 'elements',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function airtribune_field_formatter_info() {
  return array(
    'adapitve_dates' => array(
      'label' => t('Adaptive'),
      'field types' => array('datetime'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see #2367
 */
function airtribune_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  if (!$items) {
    return;
  }

  switch ($display['type']) {

    case 'adapitve_dates':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => airtribune_format_date_interval($item['value'], $item['value2'])
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_token_info().
 *
 * @see #3217 #3235
 */
function airtribune_token_info() {
  $info['tokens']['node']['event-dates'] = array(
    'name' => t('Event dates'),
    'description' => t('Event dates (adaptive format)'),
  );
  $info['tokens']['node']['map-entry-title'] = array(
    'name' => t('Map entry changing title'),
    'description' => t('Insert activities or accommodation word in title, based on node type'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function airtribune_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    if (isset($tokens['event-dates'])) {
      $date_items = field_get_items('node', $data['node'], 'field_dates');
      $replacements['[node:event-dates]'] = airtribune_format_date_interval($date_items[0]['value'], $date_items[0]['value2']);
    }
    // used in Map Entry Item
    // replace "[node:map-entry] in [node:city]" to "activities in Sopot" / "accommodation in Sopot"
    // @see #3235
    if (isset($tokens['map-entry-title'])) {
      if ($data['node']->type == 'accommodation') {
        $replacements['[node:map-entry-title]'] = 'Accommodation';
      }
      if ($data['node']->type == 'activity') {
        $replacements['[node:map-entry-title]'] = 'Activities';
      }
    }
  }
  return $replacements;
}

/**
 * Format event dates.
 */
function airtribune_format_date_interval($start_date, $end_date) {
  $start_date = getdate($ts1 = strtotime($start_date));
  $end_date = getdate($ts2 = strtotime($end_date));

  // 23 Dec, 2012 — 5 Jan, 2013
  if ($start_date['year'] != $end_date['year']) {
    $output = date('d M, Y', $ts1) . ' — ' . date('d M, Y', $ts2);
  }
  // 28 Aug — 3 Sep, 2012
  elseif ($start_date['mon'] != $end_date['mon']) {
    $output = date('d M', $ts1) . ' — ' . date('d M, Y', $ts2);
  }
  // 24 — 26 Aug, 2012
  else {
    $output = date('d', $ts1) . ' — ' . date('d M, Y', $ts2);
  }
  return $output;
}

/**
 * Format user name.
 *
 * @see #2370
 *
 * @param object $account
 *   The account object for the user whose name is to be formatted.
 *
 * @return string
 *   An sanitized string with the given name and family to display.
 */
function airtrubune_format_username($account, $maxlength = 15) {

  // Put login as fallback user name.
  $user_name = $account->name;

  if ($profile = profile2_load_by_user($account, AIRTRIBUNE_USER_MAIN_PROFILE)) {
    $name_items = field_get_items('profile2', $profile, AIRTRIBUNE_USER_FULLNAME_FIELD);
    if (isset($name_items[0]['given'], $name_items[0]['family'])) {
      $given = $name_items[0]['given'];
      $family = $name_items[0]['family'];

      $user_name = $given . ' ' . $family;
      if (drupal_strlen($user_name) > $maxlength) {
        $user_name = $given . ' ' . truncate_utf8($family, 1) . '.';
      }
      if (drupal_strlen($user_name) > $maxlength) {
        $user_name = truncate_utf8($given, 12, TRUE, TRUE);
      }
    }
  }

  return check_plain($user_name);
}

/**
 * Get user country.
 *
 * @param object $account
 *   The account object of the user
 *
 * @return object
 *   The full country object, with ISO2, ISO3, and name
 */
function airtribune_get_user_country($account) {
  if (!is_object($account)) {
    $account = user_load($account);
  }
  if (!$account) {
    return FALSE;
  }

  if ($profile = profile2_load_by_user($account, 'pilot')) {
    $address = field_get_items('profile2', $profile, 'field_address');
    if (isset($address[0]['country'])) {
      return country_load($address[0]['country']);
    }
  }
}

function airtribune_draw_user_country_icon($account, $draw_country_name = TRUE) {
  $result = FALSE;
  $country = airtribune_get_user_country($account);
  if (isset($country->iso3)) {
    $icons = theme(
      'countryicons_icon_sprite',
      array('code' => $country->iso2, 'iconset' => AIRTRIBUNE_LANGUAGES_ICONSET)
    );
    if ($draw_country_name) {
      //$result .= " <div class='country-name'>" . $country->name . "</div>";
      $result = "&nbsp; " . $icons . " " . strtoupper($country->iso3);
    }
  }
  return $result;
}

/**
 * Returns a country code from a locate that is provided.
 */
function airtrubune_get_country_code($langcode) {
  $country_codes = array(
    'en' => 'gb',
    'ja' => 'jp',
    'pt-br' => 'br',
    'fa' => 'pr',
    'sr' => 'rs',
    'el' => 'gr',
    'sl' => 'si',
  );
  return isset($country_codes[$langcode]) ? $country_codes[$langcode] : $langcode;
}

/**
 * Implements hook_preprocess_panels_pane().
 *
 * @see #2247
 * @see airtribune_field_collection_item_view_alter()
 */
function airtribune_preprocess_panels_pane(&$vars) {
  $configuration = $vars['pane']->configuration;



  // Translate overriden titles.
  if (!empty($configuration['override_title']) && $configuration['override_title_text']) {
    $vars['title'] = t($configuration['override_title_text']);
  }
  elseif ($vars['pane']->type == 'custom' && $vars['title']) {
    $vars['title'] = t($configuration['title']);
  }

  if ($vars['pane']->subtype == 'frontpage_events-live_events_pane') {
    $vars['title'] .= l(t('View all'), 'events/current');
  }
  if ($vars['pane']->subtype == 'frontpage_events-soon_worldwide_pane') {
    $vars['title'] .= l(t('View all'), 'events/next');
  }

  // Add 'view more' links to panes.
  if (isset($configuration['more'], $vars['display']->args[0])) {
    $options = array();

    if ($configuration['more']['page'] == 'details') {
      $url = 'event/' . $vars['display']->args[0] . '/info/details';
    }

    if (isset($configuration['more']['fragment'])) {
      $options = array('fragment' => $configuration['more']['fragment']);
    }

    if (isset($configuration['more']['title'])) {
      $vars['more'] = l(t($configuration['more']['title']), $url, $options);
    }

    $vars['title'] = $vars['title'] ? l($vars['title'], $url, $options) : $vars['title'];

  }
  // Add anchors to pane titles.
  elseif (isset($vars['pane']->configuration['anchor'])) {
    $vars['pane_prefix'] = '<a name="' . $vars['pane']->configuration['anchor'] . '"></a>';
  }

  if (isset($vars['pane']->configuration['map'])) {
    $map = $vars['pane']->configuration['map'];

    $vars['title'] .= '<span class="event-map-toggle-pane">' . t('Hide') . '</span>';
    $vars['title'] .= '<span class="event-map-enable event-map-enable-' . $map . '">' . t('Enable') . '</span>';
    $vars['classes_array'][] = 'event-map-pane';

    if ($map == 'accommodations' && user_access('create accommodation content')) {
      $vars['title'] .= l('Add accommodation', 'node/add/accommodation');
    }
    if ($map == 'activities' && user_access('create activity content')) {
      $vars['title'] .= l('Add activity', 'node/add/activity');
    }
  }

  // Add link to create event page to next events pane
  if ($vars['pane']->subtype == 'next_events-sidebar_pane') {
    $vars['content'] = rtrim($vars['content'], "</div>") . '<div class="events-add">' . l(t('Create new event'), 'events/add') . '</div></div>';
  }

  // Add link to create event page to next events pane
  if ($vars['pane']->subtype == 'soon_country') {
    $links = airtribune_soon_country_countries_list();

    $location = array(
      '#theme' => 'links',
      '#attributes' => array('id' => 'countries-wrapper'),
      //'#prefix' => ,
      '#links' => $links,
    );
    $vars['title_suffix'] = '<div class="countries_title_suffix"><div class="countries_title_suffix_inner"><div class="clearfix">' . render($location) . '</div></div></div>';
  }

  // Add links to switch view of pilots list
  if (strpos($vars['pane']->subtype, 'paragliding_pilots_list') !== FALSE || strpos($vars['pane']->subtype, 'paragliding_contest_pilots_manage') !== FALSE) {
    if (!empty($vars['user']->roles[3]) || $vars['user']->uid == 1) {
      $pilots_links[] = array(
        'title' => 'Manage',
        'link' => url('event/' . $vars['display']->args[0] . '/pilots/manage'),
        'class' => 'manage' . (($vars['pane']->subtype == 'paragliding_pilots_list-manage') ? ' active' : ''),
      );
    }
    $pilots_links[] = array(
      'title' => 'Group by status',
      'link' => url('event/' . $vars['display']->args[0] . '/pilots/status'),
      'class' => 'by-status' . (($vars['pane']->subtype == 'paragliding_pilots_list-standard') ? ' active' : ''),
    );
    $pilots_links[] = array(
      'title' => 'Group by nation',
      'link' => url('event/' . $vars['display']->args[0] . '/pilots/nation'),
      'class' => 'by-nation' . (($vars['pane']->subtype == 'paragliding_pilots_list-fai') ? ' active' : ''),
    );

    $content = '<div class="switch-pilots-view">';
    foreach ($pilots_links as $pilots_link) {
      $content .= '<a href="' . $pilots_link['link'] . '" class="' . $pilots_link['class'] . '">' . t($pilots_link['title']) . '</a>';
    }
    $content .= '</div>';
    $vars['pane_prefix'] .= $content;
  }
}

/**
 * Implements hook_field_collection_item_view_alter().
 */
function airtribune_field_collection_item_view_alter(&$build) {
  if ($build['#bundle'] == AIRTRIBUNE_GETTING_THERE_FIELD) {
    foreach (element_children($build) as $key) {
      $build[$key]['#prefix'] = '<a name="' . str_replace('field_', '', $key) . '"></a>';
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @see #2615
 */
function airtribune_field_widget_image_image_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && $element['#field_name'] == AIRTRIBUNE_AWARDS_PHOTOS_FIELD) {
    foreach (element_children($element) as $delta) {
      $element[$delta]['#process'][] = 'airtribune_field_image_widget_process';
    }
  }
}

/**
 * Element proccess callback.
 *
 * @see airtribune_field_widget_image_image_form_alter()
 */
function airtribune_field_image_widget_process($element, &$form_state, $form) {
  if (isset($element['title'])) {
    $element['title']['#title'] = 'Category';
    $element['title']['#type'] = 'select';
    $element['title']['#description'] = t('Select scoring category');
    $element['title']['#options'] = airtribune_prize_categories();
  }
  return $element;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @see #3028
 */
function airtribune_field_widget_file_generic_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && in_array($element['#field_name'], array(
      AIRTRIBUNE_DAY_RESULTS_FIELD,
      AIRTRIBUNE_COMPETITION_RESULTS_FIELD
    ))
  ) {
    foreach (element_children($element) as $delta) {
      $element[$delta]['#process'][] = 'airtribune_field_file_widget_process';
    }
  }
}

/**
 * Element proccess callback.
 *
 * @see airtribune_field_widget_image_image_form_alter()
 */
function airtribune_field_file_widget_process($element, &$form_state, $form) {
  if (isset($element['description'])) {
    $element['description']['#title'] = 'Category';
    $element['description']['#type'] = 'select';
    $element['description']['#description'] = t('Select scoring category');
    $element['description']['#options'] = airtribune_prize_categories();
  }
  return $element;
}


/**
 * Get awards prize categories.
 */
function airtribune_prize_categories($category = FALSE) {
  $categories = array(
    'overall' => 'Overall',
    'women' => 'Women',
    'serial_class' => 'Serial Class',
    'open_class' => 'Open Class',
    'sport_class' => 'Sport Class',
    'nations' => 'Nations',
    'clubs' => 'Clubs',
    'teams' => 'Teams',
    'fun' => 'Fun',
    'junior' => 'Junior',
  );
  return $category ? $categories[$category] : $categories;
}

/**
 * Great-circle distance.
 */
function airtribune_calculate_distance($p1, $p2) {
  $earth_radius = 6372795;

  $p1 = array($p1[1] * M_PI / 180, $p1[0] * M_PI / 180);
  $p2 = array($p2[1] * M_PI / 180, $p2[0] * M_PI / 180);

  $cl1 = cos($p1[0]);
  $cl2 = cos($p2[0]);
  $sl1 = sin($p1[0]);
  $sl2 = sin($p2[0]);
  $delta = $p2[1] - $p1[1];
  $cdelta = cos($delta);
  $sdelta = sin($delta);

  $y = sqrt(pow($cl2 * $sdelta, 2) + pow($cl1 * $sl2 - $sl1 * $cl2 * $cdelta, 2));
  $x = $sl1 * $sl2 + $cl1 * $cl2 * $cdelta;

  $ad = atan2($y, $x);
  $dist = $ad * $earth_radius;

  return $dist;
}

/**
 * Add event context to default site template.
 */
function airtribune_page_manager_contexts_alter(&$contexts, &$placeholders) {

  if (!$contexts['node']->empty) {
    if ($contexts['node']->data->type == AIRTRIBUNE_PG_CONTEST_TYPE) {
      $raw_node = $contexts['node']->data;
    }
    // Fetch event node from OG.
    else {
      $wrapper = entity_metadata_wrapper('node', $contexts['node']->data);
      if (isset($wrapper->{OG_AUDIENCE_FIELD}) && $wrapper->{OG_AUDIENCE_FIELD}[0]->getBundle() == AIRTRIBUNE_PG_CONTEST_TYPE) {
        $raw_node = $wrapper->{OG_AUDIENCE_FIELD}[0]->value();
      }
    }
  }

  $node = empty($raw_node) ? ctools_context_create_empty('node') : ctools_context_create('node', $raw_node);
  panels_everywhere_site_template_add_context($contexts, $node, t('Event being viewed'), 'event', 'event');
}

/**
 * Implementation of hook_views_query_alter
 * @param type $view
 */
function airtribune_views_pre_build(&$view) {
  // Export pilots by parts, using second arg
  // @see #3325
  if ($view->name == 'paragliding_pilots_list_export' && $view->current_display == 'export_pilots_all_csv') {
    // By default we have only one argument in view - event nid, and all pilots must be exported.
    // But for performance purpose on big events(which have more, than 200 pilots), we need use second arg,
    // which will be used for page offset (one page = 100 pilots to export).
    if (count($view->args) == 2 && is_numeric($view->args[1])) {
      $view->items_per_page = 100;
      // page 1 = offset 0, 2 = 100, 3 = 200
      $view->offset = ($view->items_per_page * $view->args[1]) - $view->items_per_page;
    }
  }
}

/**
 * Geo distance sorting
 * Implementation of hook_views_query_alter
 * @param type $view
 * @param type $query
 */
function airtribune_views_query_alter(&$view, &$query) {
  if ($view->name == 'next_events') {
    global $_SESSION;
    unset($_SESSION['geoip']);
    // Store GeoIP data in session to improve perfomance
    if (empty($_SESSION['geoip']) && ($geoip = geoip_city())) {
      $_SESSION['geoip'] = array();
      $_SESSION['geoip']['lat'] = $geoip->latitude;
      $_SESSION['geoip']['lng'] = $geoip->longitude;
    }
    // FAI1 first
    $view->query->orderby[0]['field'] = "CASE field_fai_category_value WHEN 1 THEN 0 ELSE 1 END";
    if (!empty($_SESSION['geoip'])) {
      $lat = $_SESSION['geoip']['lat'];
      $lng = $_SESSION['geoip']['lng'];
      // create temporary temporary table with distances
      $distance_table = db_query_temporary('SELECT entity_id,
      ( 3959 * acos( cos( radians(:lat) ) * cos( radians( field_hq_location_lat ) ) * cos( radians( field_hq_location_lon ) - radians(:lng) ) + sin( radians(:lat) ) * sin( radians( field_hq_location_lat ) ) ) ) AS distance
      FROM {field_data_field_hq_location}
      ORDER BY distance;', array(":lat" => $lat, ":lng" => $lng));
      $join = new views_join;
      $join->construct($distance_table, 'node', 'nid', 'entity_id');
      $query->add_relationship('distance', $join, $distance_table);
      $query->add_orderby('distance', 'distance');
      $tmp = $view->query->orderby[1];
      $view->query->orderby[1] = $view->query->orderby[2];
      $view->query->orderby[2] = $tmp;
    }
  }
  // Prevent HQ duplication.
  // See #2976.
  if ($view->name == 'event_accommodations' && isset($view->options['group'])) {
    $view->query->add_where(
      $view->options['group'],
      db_or()
        ->condition('field_headquarter_hotel_node.nid', (int) $view->args[0], '=')
        ->condition('field_headquarter_hotel_node.nid', NULL, 'IS NULL')
    );
  }

  // Prevent Live events duplication.
  // See #3538.
  if ($view->name == 'live_events') {


    foreach($query->fields as $key => $field) {
      //$query->fields[$key]['aggregate'] = TRUE;
    }
    $query->add_groupby('nid');

  }


  // See http://drupal.org/node/1451218#comment-6136692
  if ($view->name == 'day_results') {
    $view->query->where[0]['type'] = 'OR';
  }
}


/**
 * Make normal, human sort in FAI pilot list (by nation)
 * Addressfield stored country in ISO-2, so sorting by this field leads to problem, because many countries has
 * difference with full country name. CH - Switzerland, GB - United Kingdom, RS - Serbia, ZA - South Africe, etc.
 *
 * @see #3302
 */
function airtribune_views_pre_render(&$view) {

  if ($view->name == 'paragliding_pilots_list' && $view->current_display == 'fai') {
    // get list of countries from addressfield to array, like 'ZA' => 'South Africa'
    if (!empty($view->result['0']->field_field_address['0']['raw']['country'])) {
      $countries = $view->result['0']->field_field_address['0']['rendered']['country']['#options'];
    }

    foreach ($view->result as $k => $v) {
      $current_country = $countries[$v->field_field_address[0]['raw']['country']];
      $temp_country_list[$current_country][] = $v;
    }
    // sort using key sort, because $temp_country_list like array('Great Britain' => array (...))
    ksort($temp_country_list);

    $result = array();
    foreach ($temp_country_list as $k => $v) {
      $result = array_merge($result, $v);
    }
    $view->result = $result;
  }
}

/**
 * Dynamically load pages on event/%nid based by event dates
 *
 * @see #3024
 */
function airtribune_pages_callback($context) {
  // TODO change to module_load_include()
  // Be sure the inc file containing page_manager_page_execute is loaded
//  ctools_include('page', 'page_manager', 'plugins/tasks');
  include_once(drupal_get_path('module', 'ctools') . '/page_manager/plugins/tasks/page.inc');
  include_once(drupal_get_path('module', 'path_breadcrumbs') . '/path_breadcrumbs.module');

  $node = $context->data;

  $contest_date_status = airtribune_contest_status_check_by_date($node);
  if ($contest_date_status == 'next') {
    menu_set_active_item('event/' . $node->nid . '/info');
    drupal_set_breadcrumb(path_breadcrumbs_load_variant('event/%node/info'));
    return page_manager_page_execute('event_info', $context);
  }
  elseif ($contest_date_status == 'current') {
    menu_set_active_item('event/' . $node->nid . '/blog');
    drupal_set_breadcrumb(path_breadcrumbs_load_variant('event/%node/blog'));
    return page_manager_page_execute('event_blog', $context);
  }
  elseif ($contest_date_status == 'past') {
    menu_set_active_item('event/' . $node->nid . '/results');
    drupal_set_breadcrumb(path_breadcrumbs_load_variant('event/%node/results'));
    return page_manager_page_execute('event_results', $context);
  }
}

/**
 * Add 24h to last day of event
 *
 * We have bad event datetime widget, without hours time ending, so after event save we have last
 * day with timestamp 00:00:00, so last day will be excluded from many datetime comparisons.
 * Need to add 24h, but we don't need in day change, so add only 23:50:00
 * Attention! If add more time, for example, 23:55:00 - at next node editing datetime widget change
 * date to next day.
 *
 * @see #3077
 */
function airtribune_node_presave($node) {
  // need wrapper to avoid 'EntityMalformedException: Missing bundle property' error
  airtribune_modify_event_date_include_last_day($node);
}

function airtribune_modify_event_date_include_last_day(&$node) {
  if ($node->type != 'pg_contest') {
    return;
  }
  $dates_items = field_get_items('node', $node, AIRTRIBUNE_DATES_FIELD);
  $end = strtotime($dates_items[0]['value2']);
  if (date('H:i:s', $end) == '00:00:00') {
    //$new_end = date_create($end, $dates_items[0]['timezone']);
    //date_modify($new_end, '+1 day');
    //date_modify($new_end, '-1 sec');
    $end = $end + ((23 * 60 * 60) + (50 * 60)); // 23:50:00
  }
  $node->field_dates['und']['0']['value2'] = date(DATE_FORMAT_DATETIME, $end);
}

/**
 * Implements hook_entity_insert().
 */
function airtribune_entity_insert($entity, $type) {
  // change membership for user to organizer, whom create contest node
  // @see airtribune_og_membership_presave()
  if ($entity->type == AIRTRIBUNE_PG_CONTEST_TYPE) {
    global $change_membership;
    $change_membership = AIRTRIBUNE_MEMBERSHIP_ORGANIZER;
  }
}

/**
 * Implements hook_entity_delete().
 */
function airtribune_entity_delete($entity, $type) {
  // When entity success deleted, og_membership is still in database
  // fix this by manual deletion the record
  // @see #3452
  db_delete('og_membership')
    ->condition('entity_type', $type)
    ->condition('etid', $entity->id)
    ->execute();
}

/**
 * Implements hook_init().
 */
function airtribune_init() {
  $args = array(
    'play',
    'retrieve',
    'points',
  );
  // Disable admin menu on visualisation page
  if (in_array(arg(0), $args) && is_numeric(arg(1))) {
    module_invoke('admin_menu', 'suppress');
  }

  // See #3544-2
  drupal_add_js(drupal_get_path('module', 'airtribune') . '/js/events.js');

  // We need distinguish drupal pages, to get pinba statistics.
  // Change name of script from 'index.php' to requested $q variable
  // @see #3283
  if (extension_loaded('pinba') && function_exists('pinba_script_name_set')) {
    $request = $_SERVER['REQUEST_URI'];
    // temp code, remove after moving files directory to /files
    if (strpos($request, '/sites/default/files') !== FALSE) {
      $request = substr($request, 15);
    }
    pinba_script_name_set($request);
  }

  // Set breadcrumbs for current page if it exists.
  if ($breadcrumbs = path_breadcrumbs_load_variant(current_path())) {
    drupal_set_breadcrumb($breadcrumbs);
  }
  // Redirect on from /events to needed page, based on next/current events count
  // see #3067
  if (arg(0) == 'events' && arg(1) == NULL) {
    $contests = airtribune_get_events_nids_with_date_status();
    if (!empty($contests['current']) && count($contests['current']) > 0) {
      drupal_goto('events/current');
    }
    elseif (!empty($contests['next']) && count($contests['next']) > 0) {
      drupal_goto('events/next');
    }
    else {
      drupal_goto('events/past');
    }
  }


}

/**
 * Check event for dates status
 * @param $node object
 *
 * @return event_date_status FALSE|string
 *   FALSE or 'past' or 'current' or 'next'
 *
 * @author Kraev Vasily
 */
function airtribune_contest_status_check_by_date($node) {
  $result = airtribune_extract_time_from_contest($node);
  if (!$result) {
    return FALSE;
  }
  return airtribune_compare_dates($result['start_local'], $result['end_local']);
}

/**
 * Helper function, load node & extract time and offset from fields
 *
 * @param $node object
 *
 * @return $result array
 *   'start', 'end', 'start_local', 'end_local', 'localtime', 'offset'. FALSE if event not found
 *
 * @author Kraev Vasily
 */
function airtribune_extract_time_from_contest($node) {
  // if we get node->nid instead node object
  if (!is_object($node)) {
    $node = node_load($node);
  }

  if (!$node) {
    return FALSE;
  }

  // we use tzfield module for timezone, because we need city of event,
  // in datefiled stored the default UTC timezone, so we load timezone from tzfield
  $tz_field = field_get_items('node', $node, AIRTRIBUNE_TIMEZONE_FIELD);
  $dates_field = field_get_items('node', $node, AIRTRIBUNE_DATES_FIELD);

  date_default_timezone_set('UTC');
  $tz = !empty($tz_field[0]['value']) ? $tz_field[0]['value'] : 'UTC';
  $tz = new DateTimeZone($tz);
  // get offset of event timezone from UTC
  $offset = $tz->getOffset(new DateTime("now", new DateTimezone('UTC')));
  if (empty($offset)) {
    $offset = 0;
  }
  $result['offset'] = $offset;
  $result['localtime'] = REQUEST_TIME + $offset;
  $result['start'] = strtotime($dates_field[0]['value']);
  $result['end'] = strtotime($dates_field[0]['value2']);
  // Because datetime in fields set for local, but stored in database as UTC, we substract offset.
  $result['start_local'] = strtotime($dates_field[0]['value']) - $offset;
  $result['end_local'] = strtotime($dates_field[0]['value2']) - $offset;

  return $result;
}

/**
 * Helper function, load node & extract time and offset from fields
 *
 * @param $entity object
 * @param $offset int contest offset time
 *
 * @return $result array
 *   - 'start', 'deadline', 'window_open', 'window_close' - UTC time.
 *   - 'start_local', 'deadline_local', 'window_open_local', 'window_close_local' - local time.
 *   - 'countdown' - seconds before race start.
 * @author Kraev Vasily
 */
function airtribune_extract_time_from_race($entity, $offset) {
  // If we get integer race id, not object, then load entity.
  if (is_int($entity)) {
    $entity = entity_load(AIRTRIBUNE_RACE_ENTITY_TYPE, array($entity));
    $entity = array_shift($entity);
  }
  if (!($entity) || empty($offset)) {
    return FALSE;
  }

  $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);
  $start_end = $wrapper->{AIRTRIBUNE_RACE_START_END_FIELD}->value();
  $window_open_close = $wrapper->{AIRTRIBUNE_PG_RACE_WINDOW_OPEN_CLOSE_FIELD}->value();

  date_default_timezone_set('UTC');
  $result['start'] = strtotime($start_end['value']);
  $result['deadline'] = strtotime($start_end['value2']);
  $result['window_open'] = strtotime($window_open_close['value']);
  $result['window_close'] = strtotime($window_open_close['value2']);
  // Because datetime in fields set for local, but stored in database as UTC, we substract offset.
  $result['start_local'] = strtotime($start_end['value']) - $offset;
  $result['deadline_local'] = strtotime($start_end['value2']) - $offset;
  $result['window_open_local'] = strtotime($window_open_close['value']) - $offset;
  $result['window_close_local'] = strtotime($window_open_close['value2']) - $offset;
  $result['countdown'] = $result['start_local'] - REQUEST_TIME;

  return $result;
}

/**
 * Compare dates with 'now' moment, using timezone offset
 * Helper function to airtribune_contest_status_check_by_date()
 *
 * @param $start_date unix_stamp
 * @param $end_date unix_stamp
 *
 * @return event_date_status FALSE|string
 *   FALSE or 'past' or 'current' or 'next'
 *
 * @author Kraev Vasily
 */
function airtribune_compare_dates($start_date, $end_date) {
  $now = REQUEST_TIME;
  if (empty($start_date) || empty($end_date)) {
    return FALSE;
  }
  elseif ($now < $start_date) {
    return 'next';
  }
  elseif ($now >= $start_date && $now <= $end_date) {
    return 'current';
  }
  elseif ($now > $end_date) {
    return 'past';
  }
}

/**
 * Get all events nids with date status
 *
 * @return array with [ past | current | next ] events nids
 *
 * @author Kraev Vasily
 */
function airtribune_get_events_nids_with_date_status() {
  $result = array();

  // get all published events
  $contests = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', AIRTRIBUNE_PG_CONTEST_TYPE)
    ->condition('n.status', 1)
    ->execute();

  foreach ($contests as $current_contest) {
    // drupal way, with caching
    $contest = node_load($current_contest->nid);
    $status = airtribune_contest_status_check_by_date($contest);

    // probably more fast, based on sql
//    $event_dates = db_select('field_data_field_dates', 'd')
//      ->fields('d', array('field_dates_value', 'field_dates_value2'))
//      ->condition('d.entity_id', $event->nid)
//      ->execute()
//      ->fetchObject();
//    $event_offset = db_select('field_data_field_time_zone', 't')
//      ->fields('t', array('field_time_zone_value'))
//      ->condition('t.entity_id', $event->nid)
//      ->execute()
//      ->fetchField();
//    $start = strtotime($event_dates->field_dates_value);
//    $end = strtotime($event_dates->field_dates_value2);
//    $tz = new DateTimeZone($event_offset);
//    $offset = $tz->getOffset(new DateTime("now", new DateTimezone('UTC')));
//    $status = airtribune_compare_dates($start, $end, $offset);

    $result[$status][] = $current_contest->nid;
  }

  return $result;
}

/**
 * How much time has passed since the beginning of the event
 *
 * @param object $node
 * @param string $granularity sec/hour/day
 *
 * @return int|float seconds, hours or days
 *
 * @author Kraev Vasily
 */
function airtribune_how_time_after_event_start($node, $granularity = 'day') {
  $result = airtribune_extract_time_from_contest($node);
  $contest_date_status = airtribune_contest_status_check_by_date($node);
  if ($result && ($contest_date_status == 'current' || $contest_date_status == 'past')) {
    $seconds = REQUEST_TIME - ($result['start_local']);
    if ($granularity == 'day') {
      return ($seconds / 3600 / 24);
    }
    elseif ($granularity == 'hour') {
      return ($seconds / 3600);
    }
    else {
      return $seconds;
    }
  }
  return FALSE;
}

/**
 * Implements hook_css_alter.
 * Kills all drupal css on external js-pages.
 */
function airtribune_css_alter(&$css) {
  $args = array(
    'play',
    'retrieve',
    'points',
  );
  if (in_array(arg(0), $args) && is_numeric(arg(1))) {
    unset($css[drupal_get_path('theme', 'airtribune2') . '/css/global.base.css']);
  }
}

/**
 * Implements hook_js_alter().
 */
function airtribune_js_alter(&$javascript) {
  // Disable custom views-accordion.js for some views
  // @see #3555
  $views_page = views_get_page_view();
  if (is_object($views_page)) {
    if ($views_page->name == 'events_list' && $views_page->current_display == 'page_events_past') {
      drupal_add_js(drupal_get_path('module', 'airtribune') . '/js/event_headers.js');
      return;
    }
  }
  // @see #3098-1.
  $accodion_js = 'sites/all/modules/contrib/views_accordion/views-accordion.js';
  if (isset($javascript[$accodion_js])) {
    $javascript[$accodion_js]['data'] = drupal_get_path('module', 'airtribune') . '/js/views-accordion.js';
  }
}

/**
 * Implements hook_airtribune__field_group_content_alter().
 *
 * Split divide how_to_got_there fields into two columns.
 * @see #3112-13
 */
function airtribune_airtribune_field_group_content_alter(&$elements) {
  if ($elements['#id'] == 'node_pg_flyingsite_default_group_how_to_get_here') {
    foreach (element_children($elements, TRUE) as $index => $key) {
      $elements[$index % 2 ? 'gt_right' : 'gt_left'][$key] = $elements[$key];
      unset($elements[$key]);
    }

    $elements['gt_left']['#theme_wrappers'] = $elements['gt_right']['#theme_wrappers'] = array('container');
    $elements['gt_left']['#attributes'] = array('id' => 'gt-left');
    $elements['gt_left']['#weight'] = -1;
    $elements['gt_right']['#attributes'] = array('id' => 'gt-right');
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * @see #3025-29
 * @see http://drupal.org/node/1719948
 */
function airtribune_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'node') {
    $setting = auto_nodetitle_get_setting($entity_form['#entity']->type);
    if ($setting == AUTO_NODETITLE_ENABLED) {
      // We will autogenerate the title later, just hide the title field in the
      // meanwhile.
      $entity_form['title']['#value'] = 'ant';
      $entity_form['title']['#type'] = 'value';
      $entity_form['title']['#required'] = FALSE;
    }
    elseif ($setting == AUTO_NODETITLE_OPTIONAL) {
      $entity_form['title']['#required'] = FALSE;
    }
  }
}

/**
 * Get single gid value from group member entity
 *
 * @return group id
 *
 * @author Vyacheslav Malchik <info@>
 */
function _airtribune_get_gid($entity_type, $entity) {
  $entity_groups = og_get_entity_groups($entity_type, $entity);
  $gids = reset($entity_groups);
  $gid = array_shift($gids);

  return $gid;
}

/**
 * Get paragliding race visualisation state
 *
 * @return race_state string
 *   'online' | 'replay' | 'awaiting'
 *
 * @author Kapelshikov Alexandr
 */
function _airtribune_pg_race_online_state($etid) {
  // Load pg_race entity
  $entities = entity_load(AIRTRIBUNE_RACE_ENTITY_TYPE, array($etid));
  if (empty($entities)) {
    return;
  }
  $entity = array_shift($entities);

  // Get referenced pg_contest node
  $wrapper = entity_metadata_wrapper(AIRTRIBUNE_RACE_ENTITY_TYPE, $entity);
  $nodes = $wrapper->{OG_AUDIENCE_FIELD}->value();
  if (empty($nodes)) {
    return;
  }
  $node = array_shift($nodes);

  // Get event time offset
  $contest_time = airtribune_extract_time_from_contest($node);
  if (!isset($contest_time['offset'])) {
    return;
  }
  $offset = $contest_time['offset'];

  $start_end = $wrapper->{AIRTRIBUNE_RACE_START_END_FIELD}->value();
  $start = strtotime($start_end['value']);
  $end = strtotime($start_end['value2']);

  // TODO: Get local time
  $localtime = time() + $offset;

  // Compare dates to get state
  if ($start <= $localtime && $localtime < $end) {
    // online
    return AIRTRIBUNE_VIS_STATE_ONLINE;
  }
  elseif ($localtime >= $end) {
    // replay. race finished
    return AIRTRIBUNE_VIS_STATE_REPLAY;
  }
  else {
    // race haven't started yet
    return AIRTRIBUNE_VIS_STATE_AWAITING;
  }
}

function _at_get_contest_trackers($contest_id = NULL, $contestant_id = NULL) {
  $view = views_get_view('contest_trackers');
  $view->set_arguments(array($contest_id, $contestant_id));
  $view->query->where[0]['type'] = 'OR';
  $view->execute();
  $response = $view->result;
  $ids = array();
  foreach ($response as $tracker) {
    $ids[] = $tracker->id;
  }
  return implode('+', $ids);
}

/**
 * Implements hook_og_membership_presave().
 *
 * @see #3444 #3446
 */
function airtribune_og_membership_presave(OgMembership $og_membership) {
  // we can't know, what is it - usual pg_contestant, which register on contest,
  // or contest organiser, which create contest, because OG membership entities
  // will be saved after contest entity save. So using global variable is best
  // way to define, what type of membership we need.
  // @see airtribune_entity_insert()
  global $change_membership;
  if (!empty($change_membership)) {
    $og_membership->type = $change_membership;
  }

  switch ($og_membership->entity_type) {
    case AIRTRIBUNE_CUSTOMOBJECT_TYPE:
      $og_membership->type = AIRTRIBUNE_MEMBERSHIP_TRACKEDOBJECT;
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Sometimes users fail to reset password because PostgreSQL does
 * case-insensitive string matching. So we need to replace
 * default form validator to find accounts by name or by mail.
 *
 * @see #3516
 */
function airtribune_form_user_pass_alter(&$form, &$form_state, $form_id) {
  $form['#validate'] = array('airtribune_user_pass_validate');
}

/**
 * Form validation callback.
 *
 * @see airtribune_form_user_pass_alter()
 */
function airtribune_user_pass_validate($form, &$form_state) {

  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }
  // No success, lets try to find the account with insensitive string comparison.
  if (!$account) {
    $uid = db_query(
      "SELECT u.uid FROM {users} u WHERE LOWER(u.name) = LOWER(?) OR LOWER(u.mail) = LOWER(?)",
      array($name, $name)
    )->fetchField();
    if ($uid) {
      $account = user_load($uid);
    }
  }
  if (isset($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    form_set_error('name', t('Sorry, %name is not recognized as a user name or an e-mail address.', array('%name' => $name)));
  }

}


function airtribune_cron() {
  _create_day_for_contest();
}

/**
 * Programmatically create 'day' node at 05.00AM local time of contest.
 * @see #3553
 */
function _create_day_for_contest() {
  // Get all current contests
  $contests = airtribune_get_events_nids_with_date_status();

  foreach ($contests['current'] as $key => $contest_nid) {
    $contest = node_load($contest_nid);

    if ($contest_date = airtribune_extract_time_from_contest($contest)) {
      $offset = $contest_date['offset'];
    }
    else {
      $offset = 0;
    }

    // Get last day for this contest.
    $days = get_days_ids_for_contest($contest);
    $last_day = node_load(end($days));

    // Time for this day, with according local time offset
    $last_day_created = $last_day->created + $offset;
    $now = REQUEST_TIME + $offset;

    // Need variables for output to debug.
    $dmy_now = date('d.m.Y', $now);
    $dmy_last_day_created = date('d.m.Y', $last_day_created);
    $h_now = date('H', $now);

    // Last day node not created today?
    if ($dmy_now != $dmy_last_day_created) {
      // Day node must be created after 05.00 AM
      if ($h_now > 5) {
        // Create new 'day' node for this contest day.
        $node = new stdClass();
        $node->type = AIRTRIBUNE_DAY_TYPE;
        $node->language = 'en';
        node_object_prepare($node);
        // Set title.
        $day_num = get_last_day_number_in_contest($contest) + 1;
        $node->title = 'Day ' . $day_num;
        // By default day status is "OK".
        $node->field_day_status['und']['0']['value'] = 0;
        // OG reference - contest nid.
        $node->og_group_ref['und']['0']['target_id'] = $contest_nid;
        // Author of the day is the author (creator) of contest.
        $node->name = $contest->name;
        $node->uid = $contest->uid;
        // Generate path for day node.
        //$path = $contest->path . '/day' . date('dmY');
        //$node->path = array('alias' => $path);
        node_save($node);
        // Debug info
        $debug_day_node_create = array(
          '1 contest' => $contest->nid . ' / ' . $contest->title,
          '2 days nids in contest' => $days,
          '3 last day created time / day' => $last_day_created . ' / ' . $dmy_last_day_created,
          '4 now time / day / hour' => $now . ' / ' . $dmy_now . ' / ' . $h_now,
          '6 created day number' => $day_num,
          '7 created node nid' => $node->nid,
        );
        watchdog('airtribune', 'Automatic create day node. !debug', array('!debug' => '<pre>' . print_r($debug_day_node_create, TRUE) . '</pre>'));
      }
    }
  }
}

/**
 * Count contestants.
 */
function airtribune_count_pilots($nid, $status = NULL) {
  $view = views_get_view('paragliding_contest_pilots_stats');
  $view->set_arguments(array($nid, $status));

  $view->execute();
  return count($view->result);
}

/**
 * Returns HTML for an event statistics block.
 */
function theme_airtribune_event_statistics($vars) {
  $elements = $vars['elements'];
  $output = '<div' . drupal_attributes($elements['#attributes']) . '>';
  $output .= '<div class="es-count">' . $elements['#count'] . '</div>';
  $output .= '<div class="es-label">';
  if (empty($elements['#url'])) {
    $output .= $elements['#text_1'];
  }
  else {
    $output .= l($elements['#text_1'], $elements['#url'], array('context' => 'event-statistics'));
  }
  $output .= '<br/><span>' . t($elements['#text_2'], array(), array('context' => 'event-statistics-accommodation')) . '</span>';
  $output .= '</div></div>';
  return $output;
}
