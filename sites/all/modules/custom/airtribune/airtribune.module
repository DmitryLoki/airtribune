<?php

/**
 * @file
 * Common functions that many Airtribune plugins will need to reference.
 */

define('AIRTRIBUNE_LANGUAGES_ICONSET', 'shiny');
define('AIRTRIBUNE_USER_MAIN_PROFILE', 'main');

// See field field_pg_contestant_status allowed values list.
define('AIRTRIBUNE_PG_CONTESTANT_CONFIRMED', 4);
define('AIRTRIBUNE_CAROUSEL_IMAGE_STYLE', 'hotel_preview');
define('AIRTRIBUNE_INFO_CAROUSEL_IMAGE_STYLE', 'contest_gallery_thumb');

// Fields.
define('AIRTRIBUNE_USER_FULLNAME_FIELD', 'field_full_name');
define('AIRTRIBUNE_OPENCLASS_FIELD', 'field_open_class');
define('AIRTRIBUNE_GETTING_THERE_FIELD', 'field_collection_getting_there');
define('AIRTRIBUNE_COUNTRY_FIELD', 'field_country');
define('AIRTRIBUNE_CITY_FIELD', 'field_city');
define('AIRTRIBUNE_DATES_FIELD', 'field_dates');
define('AIRTRIBUNE_TIMEZONE_FIELD', 'field_time_zone');
define('AIRTRIBUNE_OG_GROUP_REF_FIELD', 'og_group_ref');
define('AIRTRIBUNE_PG_CONTESTANT_STATUS_FIELD', 'field_pg_contestant_status');
define('AIRTRIBUNE_CONTEST_PHOTOS_FIELD', 'field_contest_photos');
define('AIRTRIBUNE_FLYING_SITE_PHOTOS_FIELD', 'field_flying_site_photos');
define('AIRTRIBUNE_AWARDS_PHOTOS_FIELD', 'field_awards_photos');
define('AIRTRIBUNE_FAI_CATEGORY_FIELD', 'field_fai_category');
define('AIRTRIBUNE_HQ_LOCATION_FIELD', 'field_hq_location');
define('AIRTRIBUNE_LOCATION_FIELD', 'field_location');
define('AIRTRIBUNE_RULES_FIELD', 'field_contest_rules');
define('AIRTRIBUNE_TINY_PATH_FIELD', 'field_tiny_path');

// Content types.
define('AIRTRIBUNE_PG_CONTEST_TYPE', 'pg_contest');
define('AIRTRIBUNE_NEWSBLOG_TYPE', 'newsblog');
define('AIRTRIBUNE_ACCOMMODATION_TYPE', 'accommodation');
define('AIRTRIBUNE_ACTIVITY_TYPE', 'activity');

// Views
define('AIRTRIBUNE_PARAGLIDING_PILOTS_LIST', 'paragliding_pilots_list');

/**
 * Implements hook_ctools_plugin_directory().
 */
function airtribune_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' || $owner == 'field_validation') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_theme().
 */
function airtribune_theme() {
  $content_plugins_path = drupal_get_path('module', 'airtribune') . '/plugins/content_types';
  return array(
    'airtribune_user_links' => array(
      'template' => 'airtribune-user-links',
      'path' => $content_plugins_path . '/user_links',
      'file' => 'user_links.theme.inc',
      'render element' => 'elements',
    ),
    'airtribune_event_statistics_pane' => array(
      'template' => 'airtribune-event-statistics-pane',
      'path' => $content_plugins_path . '/event_statistics',
      'file' => 'event_statistics.inc',
      'render element' => 'elements',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function airtribune_field_formatter_info() {
  return array(
    'adapitve_dates' => array(
      'label' => t('Adaptive'),
      'field types' => array('datetime'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see #2367
 * @see #2732
 */
function airtribune_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  if (!$items) {
    return;
  }
  switch ($display['type']) {

    case 'adapitve_dates':
      foreach ($items as $delta => $item) {
        $date1 = getdate($ts1 = strtotime($item['value']));
        $date2 = getdate($ts2 = strtotime($item['value2']));

        // 23 Dec, 2012 — 5 Jan, 2013
        if ($date1['year'] != $date2['year']) {
          $dates = date('d M, Y', $ts1) . ' — ' . date('d M, Y', $ts2);
        }
        // 28 Aug — 3 Sep, 2012
        elseif ($date1['mon'] != $date2['mon']) {
          $dates = date('d M', $ts1) . ' — ' . date('d M, Y', $ts2);
        }
        // 24 — 26 Aug, 2012
        else {
          $dates = date('d', $ts1) . ' — ' . date('d M, Y', $ts2);
        }
        $element[$delta] = array('#markup' => $dates);
      }

      break;
  }

  return $element;
}



/**
 * Format user name.
 *
 * @see #2370
 *
 * @param object $account
 *   The account object for the user whose name is to be formatted.
 *
 * @return string
 *   An sanitized string with the given name and family to display.
 */
function airtrubune_format_username($account) {

  // Put login as fallback user name.
  $user_name = $account->name;

  if ($profile = profile2_load_by_user($account, AIRTRIBUNE_USER_MAIN_PROFILE)) {
    $name_items = field_get_items('profile2', $profile, AIRTRIBUNE_USER_FULLNAME_FIELD);
    if (isset($name_items[0]['given'], $name_items[0]['family'])) {
      $given = $name_items[0]['given'];
      $family = $name_items[0]['family'];

      $user_name = $given . ' ' . $family;
      if (drupal_strlen($user_name) > 15) {
        $user_name = $given . ' ' . truncate_utf8($family, 1) . '.';
      }
      if (drupal_strlen($user_name) > 15) {
        $user_name = truncate_utf8($given, 12, TRUE, TRUE);
      }
    }
  }

  return check_plain($user_name);
}

/**
 * Returns a country code from a locate that is provided.
 */
function airtrubune_get_country_code($langcode) {
  $country_codes = array(
    'en' => 'gb',
    'ja' => 'jp',
    'pt-br' => 'br',
    'fa' => 'pr',
    'sr' => 'rs',
    'el' => 'gr',
    'sl' => 'si',
  );
  return isset($country_codes[$langcode]) ? $country_codes[$langcode] : $langcode;
}

/**
 * Implements hook_preprocess_panels_pane().
 *
 * @see #2247
 * @see airtribune_field_collection_item_view_alter()
 */
function airtribune_preprocess_panels_pane(&$vars) {

  $configuration = $vars['pane']->configuration;


  // Translate overriden titles.
  if (!empty($configuration['override_title']) && $configuration['override_title_text']) {
    $vars['title'] = t($configuration['override_title_text']);
  }
  elseif ($vars['pane']->type == 'custom' && $vars['title']) {
    $vars['title'] = t($configuration['title']);
  }

  // Add 'view more' links to panes.
  if (isset($configuration['more'], $vars['display']->args[0])) {
    $options = array();

    if ($configuration['more']['page'] == 'details') {
      $url = 'event/' . $vars['display']->args[0] . '/info/details';
    }

    if (isset($configuration['more']['fragment'])) {
      $options  = array('fragment' => $configuration['more']['fragment']);
    }

    if (isset($configuration['more']['title'])) {
      $vars['more'] = l(t($configuration['more']['title']), $url, $options);
    }

    $vars['title'] = $vars['title'] ? l( $vars['title'], $url, $options) : $vars['title'];

  }
  // Add anchors to pane titles.
  elseif (isset($vars['pane']->configuration['anchor'])) {
    $vars['pane_prefix'] = '<a name="' . $vars['pane']->configuration['anchor'] . '"></a>';
  }

  if (isset($vars['pane']->configuration['map'])) {
    $map = $vars['pane']->configuration['map'];

    $vars['title'] .= '<span class="event-map-toggle-pane">' . t('Hide') . '</span>';
    $vars['title'] .= '<span class="event-map-enable event-map-enable-' . $map . '">' . t('Enable') . '</span>';
    $vars['classes_array'][] = 'event-map-pane';

    if ($map == 'accommodations' && user_access('create accommodation content')) {
      $vars['title'] .= l('Add accommodation', 'node/add/accommodation');
    }
    if ($map == 'activities' && user_access('create activity content')) {
      $vars['title'] .= l('Add activity', 'node/add/activity');
    }
  }

  // Add link to create event page to next events pane
  if ($vars['pane']->subtype == 'next_events-sidebar_pane') {
    $vars['content'] = rtrim($vars['content'], "</div>") . '<div class="events-add">' . l(t('Create new event'), 'events/add') . '</div></div>';
  }

  // Add links to switch view of pilots list
  if (strpos($vars['pane']->subtype, 'paragliding_pilots_list') !== FALSE) {
    $pilots_links[] = array(
      'title' => 'Group by status',
      'link' => url('event/' . $vars['display']->args[0] . '/pilots/status'),
      'class' => 'by-status' . (($vars['pane']->subtype == 'paragliding_pilots_list-standard') ? ' active' : ''),
    );
    $pilots_links[] = array(
      'title' => 'Group by nation',
      'link' => url('event/' . $vars['display']->args[0] . '/pilots/nation'),
      'class' => 'by-nation' . (($vars['pane']->subtype == 'paragliding_pilots_list-fai') ? ' active' : ''),
    );

    $content = '<div class="switch-pilots-view">';
    foreach ($pilots_links as $pilots_link) {
      $content .= '<a href="' . $pilots_link['link'] . '" class="' . $pilots_link['class'] . '">' . t($pilots_link['title']) . '</a>';
    }
    $content .= '</div>';
    $vars['pane_prefix'] .= $content;
  }
}

/**
 * Implements hook_field_collection_item_view_alter().
 */
function airtribune_field_collection_item_view_alter(&$build) {
  if ($build['#bundle'] == AIRTRIBUNE_GETTING_THERE_FIELD) {
    foreach (element_children($build) as $key) {
      $build[$key]['#prefix'] = '<a name="' . str_replace('field_', '', $key) . '"></a>';
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @see #2615
 */
function airtribune_field_widget_image_image_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && $element['#field_name'] == AIRTRIBUNE_AWARDS_PHOTOS_FIELD) {
    foreach (element_children($element) as $delta) {
      $element[$delta]['#process'][] = 'airtribune_field_widget_process';
    }
  }
}

/**
 * Element proccess callback.
 *
 * @see airtribune_field_widget_image_image_form_alter()
 */
function airtribune_field_widget_process($element, &$form_state, $form) {
  $element['title']['#title'] = 'Category';
  $element['title']['#type'] = 'select';
  $element['title']['#description'] = t('Select scoring category');
  $element['title']['#options'] = airtribune_get_awards_prize_categories();
  return $element;
}

/**
 * Get awards prize categories.
 */
function airtribune_get_awards_prize_categories($category = FALSE) {
  $categories = array(
    'overall' => 'Overall',
    'women' => 'Women',
    'serial_class' => 'Serial Class',
    'open_class' => 'Open Class',
    'sport_class' => 'Sport Class',
    'nations' => 'Nations',
    'clubs' => 'Clubs',
    'teams' => 'Teams',
  );
  return $category ? $categories[$category] : $categories;
}

/**
 * Great-circle distance.
 */
function airtribune_calculate_distance($p1, $p2) {
  $earth_radius = 6372795;

  $p1 = array($p1[1] * M_PI / 180, $p1[0] * M_PI / 180);
  $p2 = array($p2[1] * M_PI / 180, $p2[0] * M_PI / 180);

  $cl1 = cos($p1[0]);
  $cl2 = cos($p2[0]);
  $sl1 = sin($p1[0]);
  $sl2 = sin($p2[0]);
  $delta = $p2[1] - $p1[1];
  $cdelta = cos($delta);
  $sdelta = sin($delta);

  $y = sqrt(pow($cl2 * $sdelta, 2) + pow($cl1 * $sl2 - $sl1 * $cl2 * $cdelta, 2));
  $x = $sl1 * $sl2 + $cl1 * $cl2 * $cdelta;

  $ad = atan2($y, $x);
  $dist = $ad * $earth_radius;

  return $dist;
}

/**
 * Add event context to default site template.
 */
function airtribune_page_manager_contexts_alter(&$contexts, &$placeholders) {

  if (!$contexts['node']->empty) {
    if ($contexts['node']->data->type == AIRTRIBUNE_PG_CONTEST_TYPE) {
      $raw_node = $contexts['node']->data;
    }
    // Fetch event node from OG.
    else {
      $wrapper = entity_metadata_wrapper('node', $contexts['node']->data);
      if (isset($wrapper->{AIRTRIBUNE_OG_GROUP_REF_FIELD}) && $wrapper->{AIRTRIBUNE_OG_GROUP_REF_FIELD}[0]->getBundle() == AIRTRIBUNE_PG_CONTEST_TYPE) {
        $raw_node = $wrapper->{AIRTRIBUNE_OG_GROUP_REF_FIELD}[0]->value();
      }
    }
  }

  $node = empty($raw_node) ? ctools_context_create_empty('node') : ctools_context_create('node', $raw_node);
  panels_everywhere_site_template_add_context($contexts, $node, t('Event being viewed'), 'event', 'event');
}

/**
 * Geo distance sorting
 * Implementation of hook_views_query_alter
 * @param type $view
 * @param type $query 
 */
function airtribune_views_query_alter(&$view, &$query) {
  if ($view->name == 'next_events') {
    global $_SESSION;
    unset($_SESSION['geoip']);
    // Store GeoIP data in session to improve perfomance
    if(empty($_SESSION['geoip']) && ($geoip = geoip_city())) {
      $_SESSION['geoip'] = array();
      $_SESSION['geoip']['lat'] = $geoip->latitude;
      $_SESSION['geoip']['lng'] = $geoip->longitude;
    }
    // FAI1 first
    $view->query->orderby[0]['field'] = "CASE field_fai_category_value WHEN 1 THEN 0 ELSE 1 END";
    if (!empty($_SESSION['geoip'])) {
      $lat = $_SESSION['geoip']['lat'];
      $lng = $_SESSION['geoip']['lng'];
      // create temporary temporary table with distances
      $distance_table = db_query_temporary('SELECT entity_id,
      ( 3959 * acos( cos( radians(:lat) ) * cos( radians( field_hq_location_lat ) ) * cos( radians( field_hq_location_lon ) - radians(:lng) ) + sin( radians(:lat) ) * sin( radians( field_hq_location_lat ) ) ) ) AS distance 
      FROM {field_data_field_hq_location}
      ORDER BY distance;', array(":lat" => $lat, ":lng" => $lng));
      $join = new views_join;
      $join->construct($distance_table, 'node', 'nid', 'entity_id');
      $query->add_relationship('distance', $join, $distance_table);
      $query->add_orderby('distance', 'distance');
      $tmp = $view->query->orderby[1];
      $view->query->orderby[1] = $view->query->orderby[2];
      $view->query->orderby[2] = $tmp; 
    }
  }
  // Prevent HQ duplication.
  // See #2976.
  if ($view->name == 'event_accommodations') {
    $view->query->add_where(
      $view->options['group'],
      db_or()
        ->condition('field_headquarter_hotel_node.nid', (int) $view->args[0], '=')
        ->condition('field_headquarter_hotel_node.nid', NULL, 'IS NULL')
    );
  }

}

/**
 * Implements hook_init().
 */
function airtribune_init() {
  // Set breadcrumbs for current page if it exists.
  if ($breadcrumbs = path_breadcrumbs_load_variant(current_path())) {
    drupal_set_breadcrumb($breadcrumbs);
  }

}

