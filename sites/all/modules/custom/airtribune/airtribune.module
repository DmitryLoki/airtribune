<?php

/**
 * @file
 * Common functions that many Airtribune plugins will need to reference.
 */

define('AIRTRIBUNE_LANGUAGES_ICONSET', 'shiny');
define('AIRTRIBUNE_USER_MAIN_PROFILE', 'main');

// See field field_pg_contestant_status allowed values list.
define('AIRTRIBUNE_PG_CONTESTANT_CONFIRMED', 4);
define('AIRTRIBUNE_CAROUSEL_IMAGE_STYLE', 'hotel_preview');

// Fields.
define('AIRTRIBUNE_USER_FULLNAME_FIELD', 'field_full_name');
define('AIRTRIBUNE_OPENCLASS_FIELD', 'field_open_class');
define('AIRTRIBUNE_GETTING_THERE_FIELD', 'field_collection_getting_there');
define('AIRTRIBUNE_COUNTRY_FIELD', 'field_country');
define('AIRTRIBUNE_CITY_FIELD', 'field_city');
define('AIRTRIBUNE_DATES_FIELD', 'field_dates');
define('AIRTRIBUNE_TIMEZONE_FIELD', 'field_time_zone');
define('AIRTRIBUNE_OG_GROUP_REF_FIELD', 'og_group_ref');
define('AIRTRIBUNE_PG_CONTESTANT_STATUS_FIELD', 'field_pg_contestant_status');
define('AIRTRIBUNE_AWARDS_PHOTOS_FIELD', 'field_awards_photos');
define('AIRTRIBUNE_FAI_CATEGORY_FIELD', 'field_fai_category');
define('AIRTRIBUNE_HQ_LOCATION_FIELD', 'field_hq_location');
define('AIRTRIBUNE_LOCATION_FIELD', 'field_location');
define('AIRTRIBUNE_RULES_FIELD', 'field_contest_rules');

// Content types.
define('AIRTRIBUNE_PG_CONTEST_TYPE', 'pg_contest');
define('AIRTRIBUNE_NEWSBLOG_TYPE', 'newsblog');
define('AIRTRIBUNE_ACCOMMODATION_TYPE', 'accommodation');
define('AIRTRIBUNE_ACTIVITY_TYPE', 'activity');

/**
 * Implements hook_ctools_plugin_directory().
 */
function airtribune_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' || $owner == 'field_validation') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_theme().
 */
function airtribune_theme() {
  $content_plugins_path = drupal_get_path('module', 'airtribune') . '/plugins/content_types';
  return array(
    'airtribune_user_pane' => array(
      'template' => 'airtribune-user-pane',
      'path' => $content_plugins_path . '/airtribune_user',
      'file' => 'airtribune_user.inc',
      'render element' => 'elements',
    ),
    'airtribune_event_statistics_pane' => array(
      'template' => 'airtribune-event-statistics-pane',
      'path' => $content_plugins_path . '/airtribune_event_statistics',
      'file' => 'airtribune_event_statistics.inc',
      'render element' => 'elements',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function airtribune_field_formatter_info() {
  return array(
    'adapitve_dates' => array(
      'label' => t('Adaptive'),
      'field types' => array('datetime'),
    ),
    'airtribune_carousel' => array(
      'label' => t('Carousel'),
      'field types' => array('image'),

    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see #2367
 * @see #2732
 */
function airtribune_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  if (!$items) {
    return;
  }
  switch ($display['type']) {

    case 'adapitve_dates':

      foreach ($items as $delta => $item) {
        $date1 = getdate($ts1 = strtotime($item['value']));
        $date2 = getdate($ts2 = strtotime($item['value2']));

        // 23 Dec, 2012 — 5 Jan, 2013
        if ($date1['year'] != $date2['year']) {
          $dates = date('d M, Y', $ts1) . ' — ' . date('d M, Y', $ts2);
        }
        // 28 Aug — 3 Sep, 2012
        elseif ($date1['mon'] != $date2['mon']) {
          $dates = date('d M', $ts1) . ' — ' . date('d M, Y', $ts2);
        }
        // 24 — 26 Aug, 2012
        else {
          $dates = date('d', $ts1) . ' — ' . date('d M, Y', $ts2);
        }
        $element[$delta] = array('#markup' => $dates);
      }

      break;

    case 'airtribune_carousel':

      foreach ($items as $item) {
        $images[] = theme('image_formatter', array('item' => $item, 'image_style' => AIRTRIBUNE_CAROUSEL_IMAGE_STYLE));
      };
      $options = array(
        'wrap' => 'circular',
        'scroll' => 1,
        //'visible' => 1,
        'start' => 2,
      );

      $element[0]['#markup'] = theme('jcarousel', array('items' => $images, 'options' => $options));
      //$element[0]['#attached']['js'] = array(drupal_get_path('module', 'airtribune') . '/js/jcarousel.js');
      $element[0]['#attached']['js'] = array(drupal_get_path('module', 'airtribune') . '/js/jcarousel-circular.js');

      break;
  }

  return $element;
}



/**
 * Format user name.
 *
 * @see #2370
 *
 * @param object $account
 *   The account object for the user whose name is to be formatted.
 *
 * @return string
 *   An sanitized string with the given name and family to display.
 */
function airtrubune_format_username($account) {

  // Put login as fallback user name.
  $user_name = $account->name;

  if ($profile = profile2_load_by_user($account, AIRTRIBUNE_USER_MAIN_PROFILE)) {
    $name_items = field_get_items('profile2', $profile, AIRTRIBUNE_USER_FULLNAME_FIELD);
    if (isset($name_items[0]['given'], $name_items[0]['family'])) {
      $given = $name_items[0]['given'];
      $family = $name_items[0]['family'];

      $user_name = $given . ' ' . $family;
      if (drupal_strlen($user_name) > 15) {
        $user_name = $given . ' ' . truncate_utf8($family, 1) . '.';
      }
      if (drupal_strlen($user_name) > 15) {
        $user_name = truncate_utf8($given, 12, TRUE, TRUE);
      }
    }
  }

  return check_plain($user_name);
}

/**
 * Returns a country code from a locate that is provided.
 */
function airtrubune_get_country_code($langcode) {
  $country_codes = array(
    'en' => 'gb',
    'ja' => 'jp',
    'pt-br' => 'br',
    'fa' => 'pr',
    'sr' => 'rs',
    'el' => 'gr',
    'sl' => 'si',
  );
  return isset($country_codes[$langcode]) ? $country_codes[$langcode] : $langcode;
}

/**
 * Implements hook_preprocess_panels_pane().
 *
 * @see #2247
 * @see airtribune_field_collection_item_view_alter()
 */
function airtribune_preprocess_panels_pane(&$vars) {

  // Add 'view more' links to panes.
  if (isset($vars['pane']->configuration['more'], $vars['display']->args[0])) {

    $url = 'event/' . $vars['display']->args[0] . '/info/details';
    $options  = array('fragment' => $vars['pane']->configuration['more']['fragment']);
    $vars['title'] = $vars['title'] ? l( $vars['title'], $url, $options) : $vars['title'];

    // For some panes the 'view more' link should not be shown.
    if (isset($vars['pane']->configuration['more']['title'])) {
      $vars['more'] = l($vars['pane']->configuration['more']['title'], $url, $options);
    }
  }
  // Add anchors to pane titles.
  elseif (isset($vars['pane']->configuration['anchor'])) {
    $vars['pane_prefix'] = '<a name="' . $vars['pane']->configuration['anchor'] . '"></a>';
  }

  if (isset($vars['pane']->configuration['map'])) {
    $map = $vars['pane']->configuration['map'];

    $vars['title'] .= '<span class="event-map-toggle-pane">' . t('Hide') . '</span>';
    $vars['title'] .= '<span class="event-map-enable event-map-enable-' . $map . '">' . t('Enable') . '</span>';
    $vars['classes_array'][] = 'event-map-pane';

    if ($map == 'accommodations' && user_access('create accommodation content')) {
      $vars['title'] .= l('Add accommodation', 'node/add/accommodation');
    }
    if ($map == 'activities' && user_access('create activity content')) {
      $vars['title'] .= l('Add activity', 'node/add/activity');
    }
  }

  // Add link to create event page to next events pane
  if ($vars['pane']->subtype == 'next_events-sidebar_pane') {
    $vars['content'] = rtrim($vars['content'], "</div>") . '<div class="events-add">' . l(t('Create new event'), 'events/add') . '</div></div>';
  }

  // Add links to switch view of pilots list
  if (strpos($vars['pane']->subtype, 'paragliding_pilots_list') !== FALSE) {
    $pilots_links[] = array(
      'title' => 'Group by status',
      'link' => url('event/' . $vars['display']->args[0] . '/pilots/status'),
      'class' => 'by-status' . (($vars['pane']->subtype == 'paragliding_pilots_list-standard') ? ' active' : ''),
    );
    $pilots_links[] = array(
      'title' => 'Group by country',
      'link' => url('event/' . $vars['display']->args[0] . '/pilots/country'),
      'class' => 'by-country' . (($vars['pane']->subtype == 'paragliding_pilots_list-fai') ? ' active' : ''),
    );

    $content = '<div class="switch-pilots-view">';
    foreach ($pilots_links as $pilots_link) {
      $content .= '<a href="' . $pilots_link['link'] . '" class="' . $pilots_link['class'] . '">' . t($pilots_link['title']) . '</a>';
    }
    $content .= '</div>';
    $vars['pane_prefix'] .= $content;
  }
}

/**
 * Implements hook_field_collection_item_view_alter().
 */
function airtribune_field_collection_item_view_alter(&$build) {
  if ($build['#bundle'] == AIRTRIBUNE_GETTING_THERE_FIELD) {
    foreach (element_children($build) as $key) {
      $build[$key]['#prefix'] = '<a name="' . str_replace('field_', '', $key) . '"></a>';
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @see #2615
 */
function airtribune_field_widget_image_image_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && $element['#field_name'] == AIRTRIBUNE_AWARDS_PHOTOS_FIELD) {
    foreach (element_children($element) as $delta) {
      $element[$delta]['#process'][] = 'airtribune_field_widget_process';
    }
  }
}

/**
 * Element proccess callback.
 *
 * @see airtribune_field_widget_image_image_form_alter()
 */
function airtribune_field_widget_process($element, &$form_state, $form) {
  $element['title']['#title'] = 'Category';
  $element['title']['#type'] = 'select';
  $element['title']['#description'] = t('Select scoring category');
  $element['title']['#options'] = airtribune_get_awards_prize_categories();
  return $element;
}

/**
 * Get awards prize categories.
 */
function airtribune_get_awards_prize_categories($category = FALSE) {
  $categories = array(
    'overall' => t('Overall'),
    'women' => t('Women'),
    'serial_class' => t('Serial Class'),
    'open_class' => t('Open Class'),
    'sport_class' => t('Sport Class'),
    'nations' => t('Nations'),
    'clubs' => t('Clubs'),
    'teams' => t('Teams'),
  );
  return $category ? $categories[$category] : $categories;
}

/**
 * Great-circle distance.
 */
function airtribune_calculate_distance($p1, $p2) {
  $earth_radius = 6372795;

  $p1 = array($p1[1] * M_PI / 180, $p1[0] * M_PI / 180);
  $p2 = array($p2[1] * M_PI / 180, $p2[0] * M_PI / 180);

  $cl1 = cos($p1[0]);
  $cl2 = cos($p2[0]);
  $sl1 = sin($p1[0]);
  $sl2 = sin($p2[0]);
  $delta = $p2[1] - $p1[1];
  $cdelta = cos($delta);
  $sdelta = sin($delta);

  $y = sqrt(pow($cl2 * $sdelta, 2) + pow($cl1 * $sl2 - $sl1 * $cl2 * $cdelta, 2));
  $x = $sl1 * $sl2 + $cl1 * $cl2 * $cdelta;

  $ad = atan2($y, $x);
  $dist = $ad * $earth_radius;

  return $dist;
}

/**
 * 
 * Alternative for field_get_items().
 * Return values with delta keys.
 * @author Vyacheslav Malchik <info@vkey.biz>
 * @todo Get revisions
 */
function _airtribune_field_get_items_with_delta($entity_type, $entity, $field_name, $langcode = NULL) {
  global $language;
  if (!isset($langcode)) {
    $langcode = $language->language;
  }
  $entity_info = entity_get_info($entity_type);
  $entity_id_name = $entity_info['entity keys']['id'];
  $field_info = field_info_field($field_name);
  $field_storages = $field_info['storage']['details']['sql'][FIELD_LOAD_CURRENT]['field_data_'.$field_name];
  foreach ($field_storages as $field_storage) {
    $field_sql[] = $field_storage;
  }
  $query = db_select('field_data_' . $field_name, 'f')
    ->fields('f', array_merge($field_sql, array('delta')))
    ->condition('f.entity_id', $entity->{$entity_id_name})
    ->condition('f.language', $langcode)
    ->orderBy('f.delta', 'ASC')
    ->execute();
  
  $result = array();
  while ($values = $query->fetchAssoc()) {
    $delta = $values['delta'];
    foreach ($values as $key => $value) {
      if ($key != 'delta') {
        $result[$delta][str_replace($field_name.'_', '', $key)] = $value;
      }
    }
  }
  return $result;
}
