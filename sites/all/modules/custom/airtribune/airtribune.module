<?php

/**
 * @file
 * Common functions that many Airtribune plugins will need to reference.
 */

define('AIRTRIBUNE_VIS_URL','http://vis.airtribune.com');
define('AIRTRIBUNE_LANGUAGES_ICONSET', 'shiny');
define('AIRTRIBUNE_USER_MAIN_PROFILE', 'main');

// See field field_pg_contestant_status allowed values list.
define('AIRTRIBUNE_PG_CONTESTANT_CONFIRMED', 4);
define('AIRTRIBUNE_CAROUSEL_IMAGE_STYLE', 'hotel_preview');
define('AIRTRIBUNE_INFO_CAROUSEL_IMAGE_STYLE', 'contest_gallery_thumb');

// Fields.
define('AIRTRIBUNE_USER_FULLNAME_FIELD', 'field_full_name');
define('AIRTRIBUNE_OPENCLASS_FIELD', 'field_open_class');
define('AIRTRIBUNE_GETTING_THERE_FIELD', 'field_collection_getting_there');
define('AIRTRIBUNE_COUNTRY_FIELD', 'field_country');
define('AIRTRIBUNE_CITY_FIELD', 'field_city');
define('AIRTRIBUNE_DATES_FIELD', 'field_dates');
define('AIRTRIBUNE_TIMEZONE_FIELD', 'field_time_zone');
define('AIRTRIBUNE_OG_GROUP_REF_FIELD', 'og_group_ref');
define('AIRTRIBUNE_PG_CONTESTANT_STATUS_FIELD', 'field_pg_contestant_status');
define('AIRTRIBUNE_CONTEST_PHOTOS_FIELD', 'field_contest_photos');
define('AIRTRIBUNE_FLYING_SITE_PHOTOS_FIELD', 'field_flying_site_photos');
define('AIRTRIBUNE_AWARDS_PHOTOS_FIELD', 'field_awards_photos');
define('AIRTRIBUNE_FAI_CATEGORY_FIELD', 'field_fai_category');
define('AIRTRIBUNE_HQ_LOCATION_FIELD', 'field_hq_location');
define('AIRTRIBUNE_LOCATION_FIELD', 'field_location');
define('AIRTRIBUNE_RULES_FIELD', 'field_contest_rules');
define('AIRTRIBUNE_TINY_PATH_FIELD', 'field_tiny_path');
define('AIRTRIBUNE_POINTS_FILE_FIELD', 'field_points_file');
define('AIRTRIBUNE_REGISTRATION_SW_FIELD', 'field_registration_sw');
define('AIRTRIBUNE_DAY_RESULTS_FIELD', 'field_day_results');
define('AIRTRIBUNE_DAY_REF_FIELD', 'field_day_ref');
define('AIRTRIBUNE_COMPETITION_RESULTS_FIELD', 'field_competition_results');
define('AIRTRIBUNE_RACE_START_END_FIELD', 'field_race_start_end');
define('AIRTRIBUNE_PG_RACE_WINDOW_OPEN_CLOSE_FIELD', 'field_pg_race_window_open_close');

define('AIRTRIBUNE_PG_RACE_POINTS_FIELD', 'field_pg_race_points');
define('AIRTRIBUNE_POINT_RADIUS_FIELD', 'field_point_radius');
define('AIRTRIBUNE_POINT_TYPE_FIELD', 'field_point_type');
define('AIRTRIBUNE_POINT_SS_ES_FIELD', 'field_point_ss_es');
define('AIRTRIBUNE_POINT_REF_FIELD', 'field_point_ref');

// Content types.
define('AIRTRIBUNE_PG_CONTEST_TYPE', 'pg_contest');
define('AIRTRIBUNE_PG_RACE_TYPE', 'pg_race');
define('AIRTRIBUNE_NEWSBLOG_TYPE', 'newsblog');
define('AIRTRIBUNE_ACCOMMODATION_TYPE', 'accommodation');
define('AIRTRIBUNE_ACTIVITY_TYPE', 'activity');

// Entity types.
define('AIRTRIBUNE_RACE_ENTITY_TYPE', 'ent_race');
define('AIRTRIBUNE_RACETYPE_ENTITY_TYPE', 'ent_racetype');

// Views
define('AIRTRIBUNE_PARAGLIDING_PILOTS_LIST', 'paragliding_pilots_list');

/**
 * Implements hook_ctools_plugin_directory().
 */
function airtribune_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' || $owner == 'field_validation' || $owner == 'entityreference') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_menu_alter().
 */
function airtribune_menu_alter(&$items) {
  $items['event/%pm_arg'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'airtribune_pages_callback',
    'page arguments' => array(1),
    'load arguments' => array(
      'event',
      '%index',
      '%map',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function airtribune_theme() {
  $content_plugins_path = drupal_get_path('module', 'airtribune') . '/plugins/content_types';
  return array(
    'airtribune_user_links' => array(
      'template' => 'airtribune-user-links',
      'path' => $content_plugins_path . '/user_links',
      'file' => 'user_links.theme.inc',
      'render element' => 'elements',
    ),
    'airtribune_event_statistics_pane' => array(
      'template' => 'airtribune-event-statistics-pane',
      'path' => $content_plugins_path . '/event_statistics',
      'file' => 'event_statistics.inc',
      'render element' => 'elements',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function airtribune_field_formatter_info() {
  return array(
    'adapitve_dates' => array(
      'label' => t('Adaptive'),
      'field types' => array('datetime'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see #2367
 */
function airtribune_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  if (!$items) {
    return;
  }

  switch ($display['type']) {

    case 'adapitve_dates':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => airtribune_format_date_interval($item['value'], $item['value2'])
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_token_info().
 *
 * @see #3217
 */
function airtribune_token_info() {
  $info['tokens']['node']['event-dates'] = array(
    'name' => t('Event dates'),
    'description' => t('Event dates (adaptive format)'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function airtribune_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node']) && isset($tokens['event-dates'])) {
    $date_items = field_get_items('node', $data['node'], 'field_dates');
    $replacements['[node:event-dates]'] =  airtribune_format_date_interval($date_items[0]['value'], $date_items[0]['value2']);
  }
  return $replacements;
}

/**
 * Format event dates.
 */
function airtribune_format_date_interval($start_date, $end_date) {
  $start_date = getdate($ts1 = strtotime($start_date));
  $end_date = getdate($ts2 = strtotime($end_date));

  // 23 Dec, 2012 — 5 Jan, 2013
  if ($start_date['year'] != $end_date['year']) {
    $output = date('d M, Y', $ts1) . ' — ' . date('d M, Y', $ts2);
  }
  // 28 Aug — 3 Sep, 2012
  elseif ($start_date['mon'] != $end_date['mon']) {
    $output = date('d M', $ts1) . ' — ' . date('d M, Y', $ts2);
  }
  // 24 — 26 Aug, 2012
  else {
    $output = date('d', $ts1) . ' — ' . date('d M, Y', $ts2);
  }
  return $output;
}

/**
 * Format user name.
 *
 * @see #2370
 *
 * @param object $account
 *   The account object for the user whose name is to be formatted.
 *
 * @return string
 *   An sanitized string with the given name and family to display.
 */
function airtrubune_format_username($account) {

  // Put login as fallback user name.
  $user_name = $account->name;

  if ($profile = profile2_load_by_user($account, AIRTRIBUNE_USER_MAIN_PROFILE)) {
    $name_items = field_get_items('profile2', $profile, AIRTRIBUNE_USER_FULLNAME_FIELD);
    if (isset($name_items[0]['given'], $name_items[0]['family'])) {
      $given = $name_items[0]['given'];
      $family = $name_items[0]['family'];

      $user_name = $given . ' ' . $family;
      if (drupal_strlen($user_name) > 15) {
        $user_name = $given . ' ' . truncate_utf8($family, 1) . '.';
      }
      if (drupal_strlen($user_name) > 15) {
        $user_name = truncate_utf8($given, 12, TRUE, TRUE);
      }
    }
  }

  return check_plain($user_name);
}

/**
 * Returns a country code from a locate that is provided.
 */
function airtrubune_get_country_code($langcode) {
  $country_codes = array(
    'en' => 'gb',
    'ja' => 'jp',
    'pt-br' => 'br',
    'fa' => 'pr',
    'sr' => 'rs',
    'el' => 'gr',
    'sl' => 'si',
  );
  return isset($country_codes[$langcode]) ? $country_codes[$langcode] : $langcode;
}

/**
 * Implements hook_preprocess_panels_pane().
 *
 * @see #2247
 * @see airtribune_field_collection_item_view_alter()
 */
function airtribune_preprocess_panels_pane(&$vars) {

  $configuration = $vars['pane']->configuration;


  // Translate overriden titles.
  if (!empty($configuration['override_title']) && $configuration['override_title_text']) {
    $vars['title'] = t($configuration['override_title_text']);
  }
  elseif ($vars['pane']->type == 'custom' && $vars['title']) {
    $vars['title'] = t($configuration['title']);
  }

  // Add 'view more' links to panes.
  if (isset($configuration['more'], $vars['display']->args[0])) {
    $options = array();

    if ($configuration['more']['page'] == 'details') {
      $url = 'event/' . $vars['display']->args[0] . '/info/details';
    }

    if (isset($configuration['more']['fragment'])) {
      $options  = array('fragment' => $configuration['more']['fragment']);
    }

    if (isset($configuration['more']['title'])) {
      $vars['more'] = l(t($configuration['more']['title']), $url, $options);
    }

    $vars['title'] = $vars['title'] ? l( $vars['title'], $url, $options) : $vars['title'];

  }
  // Add anchors to pane titles.
  elseif (isset($vars['pane']->configuration['anchor'])) {
    $vars['pane_prefix'] = '<a name="' . $vars['pane']->configuration['anchor'] . '"></a>';
  }

  if (isset($vars['pane']->configuration['map'])) {
    $map = $vars['pane']->configuration['map'];

    $vars['title'] .= '<span class="event-map-toggle-pane">' . t('Hide') . '</span>';
    $vars['title'] .= '<span class="event-map-enable event-map-enable-' . $map . '">' . t('Enable') . '</span>';
    $vars['classes_array'][] = 'event-map-pane';

    if ($map == 'accommodations' && user_access('create accommodation content')) {
      $vars['title'] .= l('Add accommodation', 'node/add/accommodation');
    }
    if ($map == 'activities' && user_access('create activity content')) {
      $vars['title'] .= l('Add activity', 'node/add/activity');
    }
  }

  // Add link to create event page to next events pane
  if ($vars['pane']->subtype == 'next_events-sidebar_pane') {
    $vars['content'] = rtrim($vars['content'], "</div>") . '<div class="events-add">' . l(t('Create new event'), 'events/add') . '</div></div>';
  }

  // Add links to switch view of pilots list
  if (strpos($vars['pane']->subtype, 'paragliding_pilots_list') !== FALSE) {
    $pilots_links[] = array(
      'title' => 'Group by status',
      'link' => url('event/' . $vars['display']->args[0] . '/pilots/status'),
      'class' => 'by-status' . (($vars['pane']->subtype == 'paragliding_pilots_list-standard') ? ' active' : ''),
    );
    $pilots_links[] = array(
      'title' => 'Group by nation',
      'link' => url('event/' . $vars['display']->args[0] . '/pilots/nation'),
      'class' => 'by-nation' . (($vars['pane']->subtype == 'paragliding_pilots_list-fai') ? ' active' : ''),
    );

    $content = '<div class="switch-pilots-view">';
    foreach ($pilots_links as $pilots_link) {
      $content .= '<a href="' . $pilots_link['link'] . '" class="' . $pilots_link['class'] . '">' . t($pilots_link['title']) . '</a>';
    }
    $content .= '</div>';
    $vars['pane_prefix'] .= $content;
  }
}

/**
 * Implements hook_field_collection_item_view_alter().
 */
function airtribune_field_collection_item_view_alter(&$build) {
  if ($build['#bundle'] == AIRTRIBUNE_GETTING_THERE_FIELD) {
    foreach (element_children($build) as $key) {
      $build[$key]['#prefix'] = '<a name="' . str_replace('field_', '', $key) . '"></a>';
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @see #2615
 */
function airtribune_field_widget_image_image_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && $element['#field_name'] == AIRTRIBUNE_AWARDS_PHOTOS_FIELD) {
    foreach (element_children($element) as $delta) {
      $element[$delta]['#process'][] = 'airtribune_field_image_widget_process';
    }
  }
}

/**
 * Element proccess callback.
 *
 * @see airtribune_field_widget_image_image_form_alter()
 */
function airtribune_field_image_widget_process($element, &$form_state, $form) {
  if (isset($element['title'])) {
    $element['title']['#title'] = 'Category';
    $element['title']['#type'] = 'select';
    $element['title']['#description'] = t('Select scoring category');
    $element['title']['#options'] = airtribune_prize_categories();
  }
  return $element;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @see #3028
 */
function airtribune_field_widget_file_generic_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && in_array($element['#field_name'], array(AIRTRIBUNE_DAY_RESULTS_FIELD, AIRTRIBUNE_COMPETITION_RESULTS_FIELD))) {
    foreach (element_children($element) as $delta) {
      $element[$delta]['#process'][] = 'airtribune_field_file_widget_process';
    }
  }
}

/**
 * Element proccess callback.
 *
 * @see airtribune_field_widget_image_image_form_alter()
 */
function airtribune_field_file_widget_process($element, &$form_state, $form) {
  if (isset($element['description'])) {
    $element['description']['#title'] = 'Category';
    $element['description']['#type'] = 'select';
    $element['description']['#description'] = t('Select scoring category');
    $element['description']['#options'] = airtribune_prize_categories();
  }
  return $element;
}


/**
 * Get awards prize categories.
 */
function airtribune_prize_categories($category = FALSE) {
  $categories = array(
    'overall' => 'Overall',
    'women' => 'Women',
    'serial_class' => 'Serial Class',
    'open_class' => 'Open Class',
    'sport_class' => 'Sport Class',
    'nations' => 'Nations',
    'clubs' => 'Clubs',
    'teams' => 'Teams',
    'fun' => 'Fun',
    'junior' => 'Junior',
  );
  return $category ? $categories[$category] : $categories;
}

/**
 * Great-circle distance.
 */
function airtribune_calculate_distance($p1, $p2) {
  $earth_radius = 6372795;

  $p1 = array($p1[1] * M_PI / 180, $p1[0] * M_PI / 180);
  $p2 = array($p2[1] * M_PI / 180, $p2[0] * M_PI / 180);

  $cl1 = cos($p1[0]);
  $cl2 = cos($p2[0]);
  $sl1 = sin($p1[0]);
  $sl2 = sin($p2[0]);
  $delta = $p2[1] - $p1[1];
  $cdelta = cos($delta);
  $sdelta = sin($delta);

  $y = sqrt(pow($cl2 * $sdelta, 2) + pow($cl1 * $sl2 - $sl1 * $cl2 * $cdelta, 2));
  $x = $sl1 * $sl2 + $cl1 * $cl2 * $cdelta;

  $ad = atan2($y, $x);
  $dist = $ad * $earth_radius;

  return $dist;
}

/**
 * Add event context to default site template.
 */
function airtribune_page_manager_contexts_alter(&$contexts, &$placeholders) {

  if (!$contexts['node']->empty) {
    if ($contexts['node']->data->type == AIRTRIBUNE_PG_CONTEST_TYPE) {
      $raw_node = $contexts['node']->data;
    }
    // Fetch event node from OG.
    else {
      $wrapper = entity_metadata_wrapper('node', $contexts['node']->data);
      if (isset($wrapper->{AIRTRIBUNE_OG_GROUP_REF_FIELD}) && $wrapper->{AIRTRIBUNE_OG_GROUP_REF_FIELD}[0]->getBundle() == AIRTRIBUNE_PG_CONTEST_TYPE) {
        $raw_node = $wrapper->{AIRTRIBUNE_OG_GROUP_REF_FIELD}[0]->value();
      }
    }
  }

  $node = empty($raw_node) ? ctools_context_create_empty('node') : ctools_context_create('node', $raw_node);
  panels_everywhere_site_template_add_context($contexts, $node, t('Event being viewed'), 'event', 'event');
}

/**
 * Geo distance sorting
 * Implementation of hook_views_query_alter
 * @param type $view
 * @param type $query
 */
function airtribune_views_query_alter(&$view, &$query) {
  if ($view->name == 'next_events') {
    global $_SESSION;
    unset($_SESSION['geoip']);
    // Store GeoIP data in session to improve perfomance
    if(empty($_SESSION['geoip']) && ($geoip = geoip_city())) {
      $_SESSION['geoip'] = array();
      $_SESSION['geoip']['lat'] = $geoip->latitude;
      $_SESSION['geoip']['lng'] = $geoip->longitude;
    }
    // FAI1 first
    $view->query->orderby[0]['field'] = "CASE field_fai_category_value WHEN 1 THEN 0 ELSE 1 END";
    if (!empty($_SESSION['geoip'])) {
      $lat = $_SESSION['geoip']['lat'];
      $lng = $_SESSION['geoip']['lng'];
      // create temporary temporary table with distances
      $distance_table = db_query_temporary('SELECT entity_id,
      ( 3959 * acos( cos( radians(:lat) ) * cos( radians( field_hq_location_lat ) ) * cos( radians( field_hq_location_lon ) - radians(:lng) ) + sin( radians(:lat) ) * sin( radians( field_hq_location_lat ) ) ) ) AS distance
      FROM {field_data_field_hq_location}
      ORDER BY distance;', array(":lat" => $lat, ":lng" => $lng));
      $join = new views_join;
      $join->construct($distance_table, 'node', 'nid', 'entity_id');
      $query->add_relationship('distance', $join, $distance_table);
      $query->add_orderby('distance', 'distance');
      $tmp = $view->query->orderby[1];
      $view->query->orderby[1] = $view->query->orderby[2];
      $view->query->orderby[2] = $tmp;
    }
  }
  // Prevent HQ duplication.
  // See #2976.
  if ($view->name == 'event_accommodations' && isset($view->options['group'])) {
    $view->query->add_where(
      $view->options['group'],
      db_or()
        ->condition('field_headquarter_hotel_node.nid', (int) $view->args[0], '=')
        ->condition('field_headquarter_hotel_node.nid', NULL, 'IS NULL')
    );
  }

  // See http://drupal.org/node/1451218#comment-6136692
  if ($view->name == 'day_results') {
    $view->query->where[0]['type'] = 'OR';
  }

}

/**
 * Dynamically load pages on event/%nid based by event dates
 *
 * @see #3024
 */
function airtribune_pages_callback($context) {
  // TODO change to module_load_include()
  // Be sure the inc file containing page_manager_page_execute is loaded
//  ctools_include('page', 'page_manager', 'plugins/tasks');
  include_once(drupal_get_path('module', 'ctools') .'/page_manager/plugins/tasks/page.inc');
  include_once(drupal_get_path('module', 'path_breadcrumbs') .'/path_breadcrumbs.module');

  $node = $context->data;

  $event_date_status = airtribune_event_status_check_by_date($node);
  if ($event_date_status == 'next') {
    menu_set_active_item('event/'.$node->nid.'/info');
    drupal_set_breadcrumb(path_breadcrumbs_load_variant('event/%node/info'));
    return page_manager_page_execute('event_info', $context);
  }
  elseif ($event_date_status == 'current') {
    menu_set_active_item('event/'.$node->nid.'/blog');
    drupal_set_breadcrumb(path_breadcrumbs_load_variant('event/%node/blog'));
    return page_manager_page_execute('event_blog', $context);
  }
  elseif ($event_date_status == 'past') {
    menu_set_active_item('event/'.$node->nid.'/results');
    drupal_set_breadcrumb(path_breadcrumbs_load_variant('event/%node/results'));
    return page_manager_page_execute('event_results', $context);
  }
}

/**
 * Add 24h to last day of event
 *
 * We have bad event datetime widget, without hours time ending, so after event save we have last
 * day with timestamp 00:00:00, so last day will be excluded from many datetime comparisons.
 * Need to add 24h, but we don't need in day change, so add only 23:50:00
 * Attention! If add more time, for example, 23:55:00 - at next node editing datetime widget change
 * date to next day.
 *
 * @see #3077
 */
function airtribune_node_presave($node) {
  // need wrapper to avoid 'EntityMalformedException: Missing bundle property' error
  airtribune_modify_event_date_include_last_day($node);
}
function airtribune_modify_event_date_include_last_day(&$node) {
  if ($node->type != 'pg_contest') {
    return;
  }
  $dates_items = field_get_items('node', $node, AIRTRIBUNE_DATES_FIELD);
  $end = strtotime($dates_items[0]['value2']);
  if (date('H:i:s', $end) == '00:00:00') {
    //$new_end = date_create($end, $dates_items[0]['timezone']);
    //date_modify($new_end, '+1 day');
    //date_modify($new_end, '-1 sec');
    $end = $end + ( (23 * 60 * 60) + (50 * 60) ); // 23:50:00
  }
  $node->field_dates['und']['0']['value2'] = date(DATE_FORMAT_DATETIME, $end);
}

/**
 * Implements hook_init().
 */
function airtribune_init() {

  // Set breadcrumbs for current page if it exists.
  if ($breadcrumbs = path_breadcrumbs_load_variant(current_path())) {
    drupal_set_breadcrumb($breadcrumbs);
  }
  // Redirect on from /events to needed page, based on next/current events count
  // see #3067
  if (arg(0) == 'events' && arg(1) == NULL) {
    $events = airtribune_get_events_nids_with_date_status();
    if (!empty($events['current']) && count($events['current']) > 0) {
      drupal_goto('events/current');
    }
    elseif (!empty($events['next']) && count($events['next']) > 0) {
      drupal_goto('events/next');
    }
    else {
      drupal_goto('events/past');
    }
  }
}

/**
 * Check event for dates status
 * @param $node object
 *
 * @return event_date_status FALSE|string
 *   FALSE or 'past' or 'current' or 'next'
 *
 * @author Kraev Vasily
 */
function airtribune_event_status_check_by_date($node) {
  $result = airtribune_extract_time_from_event($node);
  if (!$result) return FALSE;
  return airtribune_compare_dates($result['start'], $result['end'], $result['offset']);
}

/**
 * Helper function, load node & extract time and offset from fields
 *
 * @param $node object
 *
 * @return $result array
 *   with 'start', 'end' & 'offset'. FALSE if event not found
 *
 * @author Kraev Vasily
 */
function airtribune_extract_time_from_event($node) {
  // if we get node->nid instead node object
  if (!is_object($node)) {
    $node = node_load($node);
  }

  if (!$node) {
    return FALSE;
  }

  // we use tzfield module for timezone, because we need city of event,
  // in datefiled stored the default UTC timezone, so we load timezone from tzfield
  $tz_field = field_get_items('node', $node, AIRTRIBUNE_TIMEZONE_FIELD);
  $dates_field = field_get_items('node', $node, AIRTRIBUNE_DATES_FIELD);

  $tz = !empty($tz_field[0]['value']) ? $tz_field[0]['value'] : 'UTC';
  $tz = new DateTimeZone($tz);
  // get offset of event timezone from UTC
  $result['offset'] = $tz->getOffset(new DateTime("now", new DateTimezone('UTC')));

  $result['start'] = strtotime($dates_field[0]['value']);
  $result['end']   = strtotime($dates_field[0]['value2']);

  return $result;
}

/**
 * Compare dates with 'now' moment, using timezone offset
 * Helper function to airtribune_event_status_check_by_date()
 *
 * @param $start_date unix_stamp
 * @param $end_date unix_stamp
 * @param $offset int seconds
 *
 * @return event_date_status FALSE|string
 *   FALSE or 'past' or 'current' or 'next'
 *
 * @author Kraev Vasily
 */
function airtribune_compare_dates($start_date, $end_date, $offset = 0) {
  $now = REQUEST_TIME;
  if ($offset) {
    $start_date += $offset;
    $end_date   += $offset;
  }
  if (empty($start_date) || empty($end_date)) return FALSE;
  elseif ($now < $start_date) return 'next';
  elseif ($now >= $start_date && $now <= $end_date) return 'current';
  elseif ($now > $end_date) return 'past';
}

/**
 * Get all events nids with date status
 *
 * @return array with [ past | current | next ] events nids
 *
 * @author Kraev Vasily
 */
function airtribune_get_events_nids_with_date_status() {
  $result = array();

  // get all published events
  $events = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', AIRTRIBUNE_PG_CONTEST_TYPE)
      ->condition('n.status', 1)
      ->execute();

  foreach ($events as $event) {
    // drupal way, with caching
    $node = node_load($event->nid);
    $status = airtribune_event_status_check_by_date($node);

    // probably more fast, based on sql
//    $event_dates = db_select('field_data_field_dates', 'd')
//      ->fields('d', array('field_dates_value', 'field_dates_value2'))
//      ->condition('d.entity_id', $event->nid)
//      ->execute()
//      ->fetchObject();
//    $event_offset = db_select('field_data_field_time_zone', 't')
//      ->fields('t', array('field_time_zone_value'))
//      ->condition('t.entity_id', $event->nid)
//      ->execute()
//      ->fetchField();
//    $start = strtotime($event_dates->field_dates_value);
//    $end = strtotime($event_dates->field_dates_value2);
//    $tz = new DateTimeZone($event_offset);
//    $offset = $tz->getOffset(new DateTime("now", new DateTimezone('UTC')));
//    $status = airtribune_compare_dates($start, $end, $offset);

    $result[$status][] = $event->nid;
  }

  return $result;
}

/**
 * How much time has passed since the beginning of the event
 *
 * @param object $node
 * @param string $granularity sec/hour/day
 *
 * @return int|float seconds, hours or days
 *
 * @author Kraev Vasily
 */
function airtribune_how_time_after_event_start($node, $granularity = 'day') {
  $result = airtribune_extract_time_from_event($node);
  if ($result && airtribune_event_status_check_by_date($node) == 'current') {
    $seconds = REQUEST_TIME - ($result['start'] + $result['offset']);
    if ($granularity == 'day') return ($seconds/3600/24);
    elseif ($granularity == 'hour') return ($seconds/3600);
    else return $seconds;
  }
  return FALSE;
}

/**
 * Implements hook_js_alter().
 */
function airtribune_js_alter(&$javascript) {
  // @see #3098-1.
  $accodion_js = 'sites/all/modules/contrib/views_accordion/views-accordion.js';
  if (isset($javascript[$accodion_js])) {
    $javascript[$accodion_js]['data'] = drupal_get_path('module', 'airtribune') . '/js/views-accordion.js';
  }
}

/**
 * Implements hook_airtribune__field_group_content_alter().
 *
 * Split divide how_to_got_there fields into two columns.
 * @see #3112-13
 */
function airtribune_airtribune_field_group_content_alter(&$elements) {

  if ($elements['#id'] == 'node_pg_contest_default_group_how_to_get_here') {
    foreach (element_children($elements, TRUE) as $index => $key) {
      $elements[$index % 2 ? 'gt_right' : 'gt_left'][$key] = $elements[$key];
      unset($elements[$key]);
    }

    $elements['gt_left']['#theme_wrappers'] = $elements['gt_right']['#theme_wrappers'] = array('container');
    $elements['gt_left']['#attributes'] = array('id' => 'gt-left');
    $elements['gt_left']['#weight'] = -1 ;
    $elements['gt_right']['#attributes'] = array('id' => 'gt-right');
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * @see #3025-29
 * @see http://drupal.org/node/1719948
 */
function airtribune_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'node') {
    $setting = auto_nodetitle_get_setting($entity_form['#entity']->type);
    if ($setting == AUTO_NODETITLE_ENABLED) {
      // We will autogenerate the title later, just hide the title field in the
      // meanwhile.
      $entity_form['title']['#value'] = 'ant';
      $entity_form['title']['#type'] = 'value';
      $entity_form['title']['#required'] = FALSE;
    }
    elseif ($setting == AUTO_NODETITLE_OPTIONAL) {
      $entity_form['title']['#required'] = FALSE;
    }
  }
}
