<?php

define('VIEWS_EVENTS_LIST', 'events_list');

define('VIEWS_EVENTS_LIST_NEXT', 'page_events_next');
define('VIEWS_EVENTS_LIST_CURRENT', 'page_events_current');
define('VIEWS_EVENTS_LIST_PAST', 'page_events_past');

define('AT_VIEWS_TABS_CACHE_CID', 'at_views_tabs');

define('AT_CONTEST_CONTENT_TYPE', 'pg_contest');

define('MAIN_PROFILE_TYPE', 'main');
define('CONTESTANT_MEMBERSHIP_TYPE', 'pg_contestant');

/**
 * Implements hook_permission().
 */
function at_helper_permission() {
  return array(
    'view my_events page' => array(
      'title' => t('View "My events" page'),
      'description' => t('View list of organizer personal events.'),
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function at_helper_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($router_item['tab_root'] == 'events') {
    $tabs = array(
      'events/next' => VIEWS_EVENTS_LIST_NEXT,
      'events/current' => VIEWS_EVENTS_LIST_CURRENT,
      'events/past' => VIEWS_EVENTS_LIST_PAST,
    );
    if (!empty($data['tabs'][0]['output'])) {
      foreach ($data['tabs'][0]['output'] as $key => $tab) {
        $path = $tab['#link']['path'];
        if (in_array($path, array_keys($tabs)) && !at_helper_contest_link_show($tabs[$path])) {
          unset($data['tabs'][0]['output'][$key]);
          $data['tabs'][0]['count']--;
        }
      }
    }
  }
}

// TODO: take user timezone into consideration
/**
 * Check weather to show/hide current tab;
 */
function at_helper_contest_link_show($display_id, $break = FALSE) {
  $match = FALSE;

  $current_time = time();
  $data = at_helper_contest_cache_get();
  switch ($display_id) {
    case VIEWS_EVENTS_LIST_NEXT:
      if (!empty($data['next_start_max'])) {
        if (strtotime($data['next_start_max']) > $current_time) {
          $match = TRUE;
        }
      }
      break;
    case VIEWS_EVENTS_LIST_CURRENT:
      // Check for lasting at the moment events.
      if (!empty($data['current_finish_max'])) {
        if (strtotime($data['current_finish_max']) >= $current_time) {
          $match = TRUE;
        }
      }
      // Check for closest next events.
      elseif (!empty($data['current_start_min']) && strtotime($data['current_start_min']) <= $current_time) {
        if (!$break) {
          // If closest event could have already started or even finished, update cache.
          at_helper_contest_cache_update();
          $match = at_helper_contest_link_show($display_id, TRUE);
        }
        // Avoid infinite cycles.
        else {
          $match = FALSE;
        }
      }
      break;
    case VIEWS_EVENTS_LIST_PAST:
      if (!empty($data['last_finish_min'])) {
        if (strtotime($data['last_finish_min']) < $current_time) {
          $match = TRUE;
        }
      }
      break;
  }
  return $match;
}


/**
 * Get cached contest periods info.
 */
function at_helper_contest_cache_get() {
  $cache = cache_get(AT_VIEWS_TABS_CACHE_CID);
  if (!$cache) {
    $data = at_helper_contest_cache_update();
  }
  else {
    $data = $cache->data;
  }
  return $data;
}

/**
 * Update cache.
 */
function at_helper_contest_cache_update() {
  $data = array(
    'next_start_max' => NULL,
    'current_finish_max' => NULL, // Greatest among current
    'current_start_min' => NULL, // Lowest among next. If it is <= current, cache should be updated
    'last_finish_min' => NULL,
  );

  // Next
  $result_next = views_get_view_result(VIEWS_EVENTS_LIST, VIEWS_EVENTS_LIST_NEXT);
  $start_max = $start_max_timestamp = NULL;
  $start_min = $start_min_timestamp = NULL;
  if (!empty($result_next)) {
    foreach ($result_next as $row) {
      if (!isset($row->field_field_dates[0]['raw']['value'])) {
        continue;
      }
      $start = $row->field_field_dates[0]['raw']['value'];
      // Look for maximum start among next events.
      if (empty($start_max) || (!empty($start_max) && strtotime($start) > $start_max_timestamp)) {
        $start_max = $start;
        $start_max_timestamp = strtotime($start_max);
      }

      // Look for minimum start among next events. Used for current events tab.
      if (empty($start_min) || (!empty($start_min) && strtotime($start) < $start_min_timestamp)) {
        $start_min = $start;
        $start_min_timestamp = strtotime($start_min);
      }
    }
  }
  $data['next_start_max'] = $start_max;
  $data['current_start_min'] = $start_min;

  // Current
  $finish_max = $finish_max_timestamp = NULL;
  $result_current = views_get_view_result(VIEWS_EVENTS_LIST, VIEWS_EVENTS_LIST_CURRENT);
  if (!empty($result_current)) {
    foreach ($result_current as $row) {
      if (!isset($row->field_field_dates[0]['raw']['value']) || !isset($row->field_field_dates[0]['raw']['value2'])) {
        continue;
      }
      $start = $row->field_field_dates[0]['raw']['value'];
      $finish = $row->field_field_dates[0]['raw']['value2'];
      // Look for maximum finish amoung current events.
      if (empty($finish_max) || (!empty($finish_max) && strtotime($finish) >= $finish_max_timestamp)) {
        $finish_max = $finish;
        $finish_max_timestamp = strtotime($finish);
      }
    }
  }
  $data['current_finish_max'] = $finish_max;


  // Past
  $finish_min = $finish_min_timestamp = NULL;
  $result_past = views_get_view_result(VIEWS_EVENTS_LIST, VIEWS_EVENTS_LIST_PAST);
  if (!empty($result_past)) {
    foreach ($result_past as $row) {
      if (!isset($row->field_field_dates[0]['raw']['value2'])) {
        continue;
      }
      $finish = $row->field_field_dates[0]['raw']['value2'];
      // Look form minimum finish among last.
      if (empty($finish_min) || (!empty($finish_min) && strtotime($finish) > $finish_min_timestamp)) {
        $finish_min = $finish;
        $finish_min_timestamp = strtotime($finish_min);
      }
    }
  }
  $data['last_finish_min'] = $finish_min;

  cache_clear_all(AT_VIEWS_TABS_CACHE_CID, 'cache');
  cache_set(AT_VIEWS_TABS_CACHE_CID, $data);
  return $data;
}

/**
 * Implements hook_node_insert().
 */
function at_helper_node_insert($node) {
  cache_clear_all(AT_VIEWS_TABS_CACHE_CID, 'cache');
}

/**
 * Implements hook_node_update().
 */
function at_helper_node_update($node) {
  cache_clear_all(AT_VIEWS_TABS_CACHE_CID, 'cache');
}

/**
 * Implements hook_node_delete().
 */
function at_helper_node_delete($node) {
  cache_clear_all(AT_VIEWS_TABS_CACHE_CID, 'cache');
}

// TODO: Use new ajax-validation for views_form_paragliding_pilots_list_manage.

/**
 * Implements hook_form_alter().
 */
function at_helper_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'views_form_paragliding_pilots_list_manage':
    case 'editablefields_as_link_form':
      $form['#validate'][] = 'at_helper_og_form_validate';
      // TODO: Add after_build only when performing ajax validation.
      //~ $form['#after_build'][] = '_at_helper_user_register_extra_after_build';
      //~ // TODO: Add after_build only when performing ajax validation.
      $form['#after_build'][] = '_at_helper_og_form_extra_after_build';
      
      
      // Moved from at_validation.module
      
      // Fix clientside validation for editablefields_as_link.
      // @see #3485
      $langcode = $form['#langcode'];
      $name = key($form_state['field']);
      if ($name == 'field_phone') {
        // We use custom widget to output phone number, which combine 2 fields: country code & number in one at client.
        // Instead default 'value' this field have name 'full_number'.
        $value = 'full_number';
      }
      else {
        $value = 'value';
      }
      // Example 'field_phone[und][0][full_number]'
      $fieldname = $name . '[' . $langcode .'][0][' . $value . ']';

      $clientside_validation_settings = &drupal_static('clientside_validation_settings', array());
      // Use 'editablefields-as-link-form' insted $form['#id'] because data will be copy from first form, without suffix
      // such --2 --3 and also. @see clientside_validation_js_alter()
      $clientside_validation_settings['clientsideValidation']['forms']['editablefields-as-link-form']['rules'][$fieldname]['required'] = TRUE;
      $clientside_validation_settings['clientsideValidation']['forms'][$form['#id']]['general']['errorElement'] = 'label';
      $clientside_validation_settings['clientsideValidation']['groups'] = "";
      $clientside_validation_settings['clientsideValidation']['general']['usexregxp'] = 0;
      break;
  }
}

function _at_helper_og_form_extra_after_build($form, $form_state) {

  if (isset($form['field_contestant_number'])) {
    $form['field_contestant_number']['und'][0]['#element_validate'][] = 'at_helper_og_form_validate';
  }
  return $form;
}

/**
 * Implements hook_field_widget_form_alter().
 * 
 * Alter Start/Finish and Open/Close Event fields' labels
 */
function at_helper_field_widget_form_alter(&$element, &$form_state, $context) {
  if (!empty($element['#field_name'])) {
    switch ($element['#field_name']) {
      case AIRTRIBUNE_RACE_START_END_FIELD :
      case AIRTRIBUNE_PG_RACE_WINDOW_OPEN_CLOSE_FIELD :
        $element['#after_build'] = array('_at_helper_race_time_after_build');
        break;
    }
  }
}

/**
 * Change date components labels.
 */
function _at_helper_race_time_after_build($element, $form_state) {
  $labels = array(
    AIRTRIBUNE_RACE_START_END_FIELD => array(
      'value' => t('Start time'),
      'value2' => t('Task deadline time'),
    ),
    AIRTRIBUNE_PG_RACE_WINDOW_OPEN_CLOSE_FIELD => array(
      'value' => t('Window open time'),
      'value2' => t('Window close time'),
    ),
  );
  $element['value']['#title'] = $labels[$element['#field_name']]['value'];
  $element['value2']['#title'] = $labels[$element['#field_name']]['value2'];
  return $element;
}

// TODO: Clean unnecessary code (related to registration).
function at_helper_og_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  // Contest pilots manage page.
  if (!empty($form['#form_id']) && !empty($form_state['triggering_element']['#array_parents']) &&
      $form['#form_id'] == 'views_form_paragliding_pilots_list_manage' &&
      $form_state['triggering_element']['#array_parents'][0] == 'field_contestant_number') {
    $parents = $form_state['triggering_element']['#array_parents'];
    // Remove the 'actions' and 'link' elements.
    array_pop($parents);
    array_pop($parents);
    // Get element (for futher usage with form_error, if pilot number exists).
    $element = &$form;
    foreach ($parents as $parent) {
      $element = &$element[$parent];
    }
    // Load entity to get contest ID.
    $entity = $form_state['editablefields_entities'][$element['#entity_type']][$element['#entity_id']];
    entity_form_submit_build_entity($element['#entity_type'], $entity, $element, $form_state);
    // Get contest ID & pilot number.
    $gid = $entity->gid;
    $pilot_number = $values['field_contestant_number'][$parents[1]]['field_contestant_number'][LANGUAGE_NONE][0]['value'];
  }
  // Pilot registration for pontest page.
  else {
    // Get element (for futher usage with form_error, if pilot number exists).
    $element = isset($form['field_contestant_number']) ? $form['field_contestant_number'] : $form;
    // Get contest ID & pilot number.
    $gid = !empty($values['gid']) ? $values['gid'] : FALSE;
    if (!empty($form['#entity']->gid) && strpos($form['#id'], 'editablefields-as-link-form') !== FALSE) {
      $gid = $form['#entity']->gid;
    }
    $pilot_number = !empty($values['field_contestant_number'][LANGUAGE_NONE][0]['value'])
      ? $values['field_contestant_number'][LANGUAGE_NONE][0]['value']
      : FALSE;
  }

  if ($gid && $pilot_number) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'og_membership');
    $query->entityCondition('bundle', CONTESTANT_MEMBERSHIP_TYPE);
    $query->propertyCondition('gid', $gid);
    $query->fieldCondition('field_contestant_number', 'value', $pilot_number);
    //$query->fieldCondition('field_full_name', 'family', $family);
    $number_exists = $query->count()->execute();
    if ($number_exists) {
      form_error($element, t('This number is used by another pilot.'));
    }
  }
}


/**
 * Implements hook_views_query_alter()
 */
function at_helper_views_query_alter(&$view, &$query) {
  if ($view->name == 'events_map') {
    // Remove extra filters.
    switch ($_GET['q']) {
      case 'events/past' :
        unset($query->where[1]['conditions'][2]);
        unset($query->where[1]['conditions'][4]);
        unset($query->where[1]['conditions'][5]);
        break;
      case 'events/next' :
        unset($query->where[1]['conditions'][3]);
        unset($query->where[1]['conditions'][4]);
        unset($query->where[1]['conditions'][5]);
        break;
      default :
        unset($query->where[1]['conditions'][2]);
        unset($query->where[1]['conditions'][3]);
        break;
    }
  }
}

/**
 * Implements hook_views_post_execute()
 */
function at_helper_views_post_execute(&$view) {
  if ($view->name == 'event_days') {
    // Hide header map if there is no points for the day (Event Blog page)
    foreach ($view->result as $k => $v) {
      if (empty($v->field_field_pg_race_points)) {
        $view->result[$k]->field_field_core_id = array();
        $view->result[$k]->field_field_core_id_1 = array();
      }
    }
  }

}


/**
 * Implements hook_preprocess_HOOK()
 *
 * Set Event Days Blog images' caption as colorbox popup title
 */
function at_helper_preprocess_media_colorbox(&$variables) {
  if (!empty($variables['file_id'])) {
    $file_id = $variables['file_id'];
    $media_colorbox_caption = '';
    $file = file_load($file_id);
    if (!empty($file->{AIRTRIBUNE_MEDIA_DESCRIPTION_FIELD}['und'][0]['value'])) {
      $media_colorbox_caption = $file->{AIRTRIBUNE_MEDIA_DESCRIPTION_FIELD}['und'][0]['value'];
    }
    $variables['media_colorbox_caption'] = $media_colorbox_caption;

    // Add classes for hover images for VIDEO previews.
    $file_styles = _at_helper_file_view_alter_styles();
    if (isset($file_styles[$file_id])) {
      $style = $file_styles[$file_id];
      if (!empty($file->filemime) && in_array($file->filemime, array('video/vimeo', 'video/youtube'))) {
        $variables['item_class'] = 'media-corbox-video-preview ' . str_replace('_', '-', $style);
      }
    }
  }
}


/**
 * Implements hook_ctools_plugin_directory().
 */
function at_helper_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}


/**
 * Implements hook_og_membership_insert().
 *
 * Clean pilots list cache on new pilot registration
 */
function at_helper_og_membership_insert($og_membership) {

  // Check if it is user membership
  if ($og_membership->entity_type == 'user' && $og_membership->group_type == 'node') {
    // Get event id
    $gid = $og_membership->gid;
    $node = node_load($gid);
    if ($node->nid && $node->type == 'pg_contest') {
      _at_helper_clear_pilots_list_cache();
    }
  }


}

function at_helper_user_presave(&$edit, $account, $category) {
  if (isset($account->status) && isset($edit['status']) && $account->status == 0 && $edit['status'] == 1) {
    _at_helper_clear_pilots_list_cache();
  }
}

function _at_helper_clear_pilots_list_cache() {
  $cids = array(
    'paragliding_pilots_list' => 'cache_views_data',
    'paragliding_contest_pilots_stats:default:results' => 'cache_views_data',
    'panels_simple_cache:page-event_pilots:page_event_pilots_panel_context' => 'cache',
  );
  foreach ($cids as $cid => $bin) {
    cache_clear_all($cid, $bin, TRUE);
  }
}

/**
 * Implements hook_field_attach_presave()
 */
function at_helper_field_attach_presave($entity_type, $entity) {
  if ($entity_type == 'node' && $entity->type == AIRTRIBUNE_DAY_TYPE && !empty($entity->at_helper_day_form_flag)) {
    // Get day images data.
    $node_wrapper = entity_metadata_wrapper('node', $entity);
    $images_value = $node_wrapper->{AIRTRIBUNE_IMAGE_FIELD}->value();
    if (!empty($images_value)) {
      // Get referenced event data
      $og_audience_value = $node_wrapper->{OG_AUDIENCE_FIELD}->value();
      $event_title = !empty($og_audience_value[0]->title) ? $og_audience_value[0]->title : '';

      $day_number = $node_wrapper->{AIRTRIBUNE_DAY_NUMBER}->value();
      $day_number = !empty($day_number) ? 'Day' . $day_number : '';
      foreach ($images_value as $k => $v) {
        if (!empty($v['image_field_caption']['value'])) {
          $components = array($v['image_field_caption']['value'], 'Paragliding', $event_title, $day_number);
        }
        else {
          $components = array('Paragliding', $event_title, $day_number, $photo_number, sprintf('%03d', $k + 1));
        }
        $images_value[$k]['alt'] = $images_value[$k]['title'] = implode(' ', $components);
      }
      // Set updated value
      $node_wrapper->{AIRTRIBUNE_IMAGE_FIELD}->set($images_value);
    }
  }
}

/**
 * Implements hook_field_attach_form()
 */
function at_helper_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // Set flag for image title tags change (in at_helper_field_attach_presave)
  if ($entity_type == 'node' && $entity->type == AIRTRIBUNE_DAY_TYPE) {
    $form['#node']->at_helper_day_form_flag = TRUE;
  }
}

// ------------------------------
// Grants and permissions
// ------------------------------

// TODO:
/**
 * Implements hook_node_access()
 */
function at_helper_node_access($node, $op, $account) {
  // TODO: Check user role for organizer or author is enough?
  if (isset($node->uid) && $node->uid == $account->uid && _at_helper_event_edit_denied($node)) {
    return NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Check event finish date.
 * Deny access to edit event if it finished more than five days ago.
 */
function _at_helper_event_edit_denied($node) {
  if ($node->type == AIRTRIBUNE_PG_CONTEST_TYPE) {
    // Finish date delta = 5 days
    $end_delta = 5 * 24 * 3600;

    // Get event end date without offset.
    $contest_time = airtribune_extract_time_from_contest($node);
    $end = $contest_time['end_local'];

    // Deny access if event finished more than five days ago.
    if ($end + $end_delta <= time()) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}


// ------------------------------
// Media Colorbox Formatter
// ------------------------------

// TODO: Change style right here.

/**
 * Implements hook_field_formatter_prepare_view().
 * 
 * This chages styles for all instances of AIRTRIBUNE_IMAGE_FIELD display
 * if formatter is set to Media Colorbox. Both for nodes and views.
 * #3996 and related issues
 */
function media_colorbox_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  //~ dsm($type);
  //~ dsm('formatter');
  //~ dsm($items);
  //~ dsm($displays);
  
  // TODO: Add bricks info into display settings (instead of using static variable).
  // And override theme_media_colorbox()
  
  
  if ($field['field_name'] == AIRTRIBUNE_IMAGE_FIELD && !empty($items)) {
    
    $imgs = array_shift($items);
    if (!empty($imgs)) {
      $file_styles = array();

      $count = count($imgs);
      switch($count){
        case 1:
          $image_styles = array('event_blog_teaser_first');
        break;
        case 2:
          $image_styles = array('event_blog_teaser_second');
        break;
        case 3:
          $image_styles = array('event_blog_teaser_third', 'event_blog_teaser_fourth');
        break;
        case 4:
          $image_styles = array('event_blog_teaser_fifth', 'event_blog_teaser_sixth');
        break;
        case 5:
          $image_styles = array('event_blog_teaser_first', 'event_blog_teaser_sixth_extra', 'event_blog_teaser_sixth_extra', 'event_blog_teaser_sixth');
        break;
        case 6:
          $image_styles = array('event_blog_teaser_second', 'event_blog_teaser_second', 'event_blog_teaser_sixth_extra', 'event_blog_teaser_sixth', 'event_blog_teaser_sixth_extra', 'event_blog_teaser_sixth');
        break;
        case 7:
          $image_styles = array('event_blog_teaser_first', 'event_blog_teaser_seventh');
        break;
        case 8:
          $image_styles = array('event_blog_teaser_second', 'event_blog_teaser_second', 'event_blog_teaser_seventh');
        break;
        case 9:
          $image_styles = array('event_blog_teaser_third', 'event_blog_teaser_fourth', 'event_blog_teaser_fourth', 'event_blog_teaser_seventh');
        break;
        default:
          $image_styles = array('event_blog_teaser_first', 'event_blog_teaser_eighth');
        break;
      }

      $is_count = 0;

      foreach ($imgs as $img) {
        if(!empty($image_styles[$is_count])){
          $image_style = $image_style_other = $image_styles[$is_count];
        }
        else{
          $image_style = $image_style_other;
        }

        //~ $file_styles[$img['fid']] = 'event_blog_teaser_eighth';
        $file_styles[$img['fid']] = $image_style;
        $is_count++;
      }

      //~ dsm($file_styles);
      _at_helper_file_view_alter_styles($file_styles);
    }
  }
  elseif (in_array($field['field_name'], array(AIRTRIBUNE_CONTEST_PHOTOS_FIELD, AIRTRIBUNE_FLYING_SITE_PHOTOS_FIELD)) && !empty($items)) {
    $imgs = array_shift($items);
    if (!empty($imgs)) {
      //~ $image_style = 'contest_gallery_thumb';
      $image_style = 'contest_thumbnail';
      
      $file_styles = array();
      foreach ($imgs as $img) {
        $file_styles[$img['fid']] = $image_style;
      }
      _at_helper_file_view_alter_styles($file_styles);
      
    }
  }
}

/**
 * Implements hook_file_view_alter().
 *
 * Override Event Blog images' styles. See theme_media_colorbox().
 */
function at_helper_file_view_alter(&$build, &$type) {
  if (!empty($build['#file']->fid)) {
    $fid = $build['#file']->fid;
    // TODO: Save statically
    $file_styles = _at_helper_file_view_alter_styles();
    // Check if it's an image or video file.
    if (isset($file_styles[$fid])) {
      $style = $file_styles[$fid];
      if (!empty($build['file']['#image_style'])) {
        $build['file']['#image_style'] = $style;
      }
      elseif (!empty($build['file']['#style_name'])) {
        $build['file']['#style_name'] = $style;
      }
    }
  }
}

function _at_helper_file_view_alter_styles($file_styles = NULL) {
  static $styles = array();

  if (isset($file_styles)) {
    //~ $styles = $file_styles;
    // Store all style for views case because first all fields are processed
    // and only then rendered.
    $styles += $file_styles;
  }

  return $styles;
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 * 
 * Alter media_colorbox formatter to set Bricks scheme.
 * Uses hook provided by field_formatter_settings module.
 */
function at_helper_field_formatter_settings_form_alter(&$element, &$form_state, $context) {
  if (empty($form_state['view_mode']) || empty($form_state['instance']['display'][$form_state['view_mode']]['type'])) {
    return;
  }
  if ($form_state['instance']['display'][$form_state['view_mode']]['type'] == 'media_colorbox') {
    
    $settings = $form_state['instance']['display'][$form_state['view_mode']]['settings'];
    //~ dsm($form_state);
    $schemes = array(
      '' => t('- None -'),
      'test' => t('Test'),
    );
    
    $scheme = (isset($settings['bricks_scheme']) && isset($schemes[$settings['bricks_scheme']])) ? $settings['bricks_scheme'] : '';
    //~ dsm($element);
    $element['bricks_scheme'] = array(
      //~ '#type' => 'textfield',
      '#type' => 'select',
      '#options' => $schemes,
      '#title' => t('Bricks scheme'),
      '#description' => t('Image styles bricks scheme'),
      '#default_value' => $scheme,
    );
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 * 
 * Alter media_colorbox formatter settings summary.
 * Uses hook provided by field_formatter_settings module.
 */
function at_helper_field_formatter_settings_summary_alter(&$summary, array $context) {
  if ($context['instance']['display'][$context['view_mode']]['type'] == 'media_colorbox') {
    
    $settings = $context['instance']['display'][$context['view_mode']]['settings'];
    
    $schemes = array(
      '' => t('- None -'),
      'test' => t('Test'),
    );
    $scheme = (isset($settings['bricks_scheme']) && isset($schemes[$settings['bricks_scheme']])) ? $settings['bricks_scheme'] : '';
    $summary .= '<br />' . t('Bricks scheme: ') . $schemes[$scheme];
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function at_helper_field_formatter_info_alter(&$info) {
  // Add bricks_scheme settings into formatter info.
  // Otherwise panels won't save setting.
  $info['media_colorbox']['settings']['bricks_scheme'] = '';
}


/**
 * Helper to dsm variable only once.
 */
function dsm_once($var, $key = 'none') {
  static $vars = array();
  if (!in_array($key, $vars)) {
    dsm($var);
    $vars[] = $key;
  }
}
