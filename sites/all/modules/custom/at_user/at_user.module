<?php

/**
 * Implements hook_menu().
 */
function at_user_menu() {
  $items = array();

  $items['profile-pilot/%user/user'] = array(
    'title' => 'User',
    'page callback' => 'at_user_redirect_to_user',
    'page arguments' => array(1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/contestant'] = array(
    'title' => 'Contestant',
    'page callback' => 'at_user_redirect_to_contestant',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('edit own pilot profile'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

function at_user_redirect_to_contestant($user) {
  drupal_goto('profile-pilot/' . $user->uid . '/edit');
}

function at_user_redirect_to_user($user) {
  drupal_goto('user/' . $user->uid . '/edit');
}

/**
 * Implements hook_menu_alter().
 */
function at_user_menu_alter(&$items) {
  // hide the tab on the user account page
  $items['user/%user_category/edit/main']['access callback'] = FALSE;
  // override to our
  $items['user/registrationpassword/%/%/%']['page arguments'] = array(
    'at_user_registrationpassword_confirm_account',
    2,
    3,
    4
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for the user edit form.
 */
function at_user_form_user_profile_form_alter(&$form, &$form_state) {
  // merge the profile2 form with the user account form
  // if profile type = 'main' & checkbox 'Provide a separate page for editing profiles' is unset, so userCategory = TRUE
  if (($type = profile2_get_types('main')) && $type->userCategory) {
    if (empty($form_state['profiles'])) {
      $profile = profile2_load_by_user($form['#user'], 'main');
      if (empty($profile)) {
        $profile = profile_create(array('type' => 'main', 'uid' => $form['#user']->uid));
      }
      $form_state['profiles'][$profile->type] = $profile;
    }
    profile2_attach_form($form, $form_state);
  }
}

/*
 * Implements hook_form_alter for user create/login/pass-reset
 */
function at_user_form_alter(&$form, $form_state, $form_id) {
  global $user;

  if ($form_id == 'user_profile_form') {
    // TODO maybe use hide() instead unset() to form elements?

    // Hide LDAP_* fields.
    $form_el = array_keys($form);
    foreach ($form_el as $element) {
      if (strpos($element, 'ldap') !== FALSE) {
        unset($form[$element]);
      }
    }

    // Hide unnessecary elements.
    unset($form['field_og_user_hg']);
    unset($form['locale']);
    unset($form['masquerade']);
    unset($form['metatags']);
    unset($form['mimemail']);
    unset($form['og_user_node']);
    unset($form['signature_settings']);
    unset($form['timezone']);
    unset($form['xmlsitemap']);

    // From tpl, used in futher hook_process.
    $form['account']['mail']['#attached']['js'][] = drupal_get_path('module', 'at_user') . '/js/mail_change.js';
    $form['field_avatar']['#attached']['js'][] = drupal_get_path('module', 'at_user') . '/js/auto_upload.js';

    // Form API "item" haven't #attributes, use prefix/suffix.
    $form['name_gender_dob'] = array(
      '#type' => 'item',
      '#prefix' => '<div id="name-gender-dob">',
      '#suffix' => '</div>',
    );
    $form['mail_change'] = array(
      '#type' => 'item',
      '#prefix' => '<div id="mail-change">',
      '#suffix' => '</div>',
    );
    $form['account']['mail_dummy'] = array(
      '#type' => 'item',
      '#title' => t('Email'),
      '#markup' => $form['account']['mail']['#value'],
      '#prefix' => '<div id="mail-dummy">',
      '#suffix' => '<div id="mail-edit-pencil">âœŽ</div></div>',
    );
    $form['personalisation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Personalisation'),
      '#prefix' => '<div id="personalisation">',
      '#suffix' => '</div>',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attributes' => array('class' => array('collapsible', 'collapsed')),
    );
    $form['pass_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Change password'),
      '#prefix' => '<div id="password-fieldset">',
      '#suffix' => '</div>',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attributes' => array('class' => array('collapsible', 'collapsed')),
    );
    // End from tpl.

    // 'optional URL', validating & theming.
    // @see #4498
    $form['#validate'][] = 'at_user_optional_url_validate';
    $form['field_tiny_path']['und'][0]['value']['#attributes']['placeholder'] = t('yourname');
    $optional_url = field_get_items('user', $form['#user'], 'field_tiny_path');
    // If user already set optional url, show this as text.
    if ($optional_url) {
      $form['field_tiny_path'] = $form['field_tiny_path']['und'][0]['value'];
      $form['field_tiny_path']['#type'] = 'item';
      $form['field_tiny_path']['#markup'] = $form['field_tiny_path']['#default_value'];
      $form['field_tiny_path']['#description'] = NULL;
    }
    $form['basic_url'] = array(
      '#type' => 'item',
      '#title' => t('Basic URL'),
      '#markup' => 'airtribune.com/' . $form['#user']->uid,
      '#weight' => $form['field_tiny_path']['#weight'] - 1,
    );

    // make upload & delete (user_picture / avatar imagefield) without form_submit
    // see #2764
    if (isset($form_state['values']['field_user_avatar_und_0_remove_button']) &&
      $form_state['values']['field_user_avatar_und_0_remove_button'] == "Remove"
    ) {
      at_user_photo_ajax_remove($form, $form_state, $form_id);
    }
    $lang = $form['field_user_avatar']['#language'];
    // own field validators
    $form['field_user_avatar'][$lang][0]['#upload_validators'] = array();
    //unset($form['field_user_avatar'][$lang][0]['#upload_validators']['file_validate_image_resolution']);
    $form['field_user_avatar'][$lang][0]['#upload_validators']['file_validate_extensions'] = array(0 => 'png gif jpg jpeg');
    $form['field_user_avatar'][$lang][0]['#upload_validators']['at_user_file_validate_image_resolution'] = array(
      0 => NULL,
      1 => '400x400'
    );
    $form['field_user_avatar'][$lang][0]['#upload_validators']['file_validate_size'] = array(0 => (1024 * 1024));
    $form['field_user_avatar'][$lang][0]['#upload_validators']['at_user_photo_ajax_upload'] = array();

    // if user initiate procedure of password reset, we hide main div with avatar, name, and birthday by jQuery
    // and show only password change form
    if (!empty($_GET['pass-reset-token'])) {
      drupal_add_js(drupal_get_path('module', 'at_user') . '/js/pass_reset.js');
    }

    // see #2817
    // send mail to user on password change
    $form['#submit'][] = 'at_user_notify_user_at_password_change';
    // Unset 'current password' field
    unset($form['account']['current_pass']);
    unset($form['account']['current_pass_required_values']);
    $form['#validate'] = array_diff($form['#validate'], array('user_validate_current_pass'));
  }
  // see #2633
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    $form['inline_errors']['#markup'] = '';
    $form['inline_errors']['#weight'] = -10;
    $form['#validate'][] = 'at_user_login_error_msg';
    $form['#validate'][] = 'at_user_login_error_redirect_to_form';
  }
}

function at_user_password_title_change($element) {
  $element['pass1']['#title'] = t("New password");
  $element['pass2']['#title'] = t("Repeat new password");
  return $element;
}

function at_user_photo_ajax_remove(&$form, $form_state, $form_id) {
  global $user;

  if ($file = file_load($user->picture)) {
    // When a module is managing a file, it must manage the usage count.
    // Here we decrement the usage count with file_usage_delete().
    file_usage_delete($file, 'file', 'user', 1);
    file_usage_delete($file, 'user', 'user', 1);

    // The file_delete() function takes a file object and checks to see if
    // the file is being used by any other modules. If it is the delete
    // operation is cancelled, otherwise the file is deleted.
    file_delete($file);

    // empty fields & save user data
    $edit['picture'] = NULL;
    $edit['field_user_avatar'] = NULL;
    $saved_user = user_save($user, $edit);
  }
}

function at_user_file_validate_image_resolution(stdClass $file, $maximum_dimensions = 0, $minimum_dimensions = 0) {
  $errors = array();

  // Check first that the file is an image.
  if ($info = image_get_info($file->uri)) {
    if ($maximum_dimensions) {
      // Check that it is smaller than the given dimensions.
      list($width, $height) = explode('x', $maximum_dimensions);
      if ($info['width'] > $width || $info['height'] > $height) {
        // Try to resize the image to fit the dimensions.
        if ($image = image_load($file->uri)) {
          image_scale($image, $width, $height);
          image_save($image);
          $file->filesize = $image->info['file_size'];
          // this line commented to avoid repeated messages at ajax-uploading without form_submit
          // drupal_set_message(t('The image was resized to fit within the maximum allowed dimensions of %dimensions pixels.', array('%dimensions' => $maximum_dimensions)), 'status', FALSE);
        }
        else {
          $errors[] = t('The image is too large; the maximum dimensions are %dimensions pixels.', array('%dimensions' => $maximum_dimensions));
        }
      }
    }

    if ($minimum_dimensions) {
      // Check that it is larger than the given dimensions.
      list($width, $height) = explode('x', $minimum_dimensions);
      if ($info['width'] < $width || $info['height'] < $height) {
        $errors[] = t('The image is too small; the minimum dimensions are %dimensions pixels.', array('%dimensions' => $minimum_dimensions));
      }
    }
  }

  return $errors;
}

function at_user_photo_ajax_upload(stdClass $file) {
  global $user;

  if ($res = file_copy($file, 'public://pictures/')) {
    $account = user_load($user->uid);

    $edit['picture'] = $res;
    $edit['field_user_avatar']['und'][] = array(
      // 'alt' => '',
      // 'title' => '',
      // 'width' => 100,
      // 'height' => 100,
      'fid' => $res->fid,
      'uid' => $res->uid,
      'uri' => $res->destination,
      'status' => $res->status,
      'filename' => $res->filename,
      'filemime' => $res->filemime,
      'filesize' => $res->filesize,
      'timestamp' => $res->timestamp,
    );
    $saved_user = user_save($account, $edit);
  }

  // it's form upload validator, so we need return empty array to avoid errors
  return array();
}

function at_user_notify_user_at_password_change(&$form, $form_state) {
  // load user by form, becose password can be changed by admin / editor
  // so we need uid & mail for changed user
  $user = $form_state['user'];
  // check for changes
  if (!empty($form_state['input']['pass']['pass1'])) {
    $name = $form_state['profiles']['main']->field_full_name['und']['0']['safe'];
    $fullname = $name['given'] . ' ' . $name['family'];
    drupal_mail('system', 'mail', $user->mail, user_preferred_language($user),
      array(
        'context' => array(
          'subject' => t(AT_MSG_EMAIL_SUBJ_USER_PASSWORD_CHANGE),
          'message' => t(AT_MSG_EMAIL_BODY_USER_PASSWORD_CHANGE . AT_MSG_EMAIL_BODY_SIGNATURE, array('@fullname' => $fullname))
        )
      )
    );
  }
  // manual redirect to user/edit page, to avoid '/edit?pass-reset-token=' in URI
  // if this token exists in URI, we hide with jQuery all, except password fields
  // see form_alter / user_profile_form
  if (!empty($_GET['pass-reset-token'])) {
    drupal_goto('user/' . $user->uid . '/edit');
  }
}

function at_user_optional_url_validate(&$form, &$form_state) {
  $tiny_path = $form_state['values']['field_tiny_path']['und'][0]['value'];
  if ($tiny_path) {
    // Not suitable by regex, or digits only.
    if (preg_match('/^[0-9]+$/si', $tiny_path) || !preg_match('/^[a-z0-9_-]+$/i', $tiny_path))
    {
      form_set_error('field_tiny_path', t('Your can use only latin symbols (aâ€“z), digits (0â€“9), minus and underscore.'));
    }
    // Submited value for alias already exist in system, and alias not belongs to this user.
    if (!drupal_valid_path($tiny_path)) {
      $source = drupal_lookup_path('source', $tiny_path);
      if ($source && ($source != $tiny_path)) {
        form_set_error('field_tiny_path', t('This URL already exists. Choose another one.'));
      }
    }
  }
}


function at_user_login_error_msg($form, &$form_state) {
  at_messages_msg_changer();
}

function at_user_login_error_redirect_to_form($form, &$form_state) {
  // user type wrong password / name
  if (empty($form_state['uid'])) {
    // at user login block
    if ($form_state['values']['form_id'] == 'user_login_block') {
      // A destination in $_GET always overrides the drupal_goto function arguments
      $_GET['destination'] = "user/login";
      // go to destination
      drupal_goto();
    }
    // update form, need for form-redirect and markup update
    $form_state['rebuild'] = TRUE;
  }
}

function at_user_process_panels_pane(&$vars, $hook) {
  $pane = $vars['pane'];
  if ($pane->subtype == 'form' && $pane->css['template_suggestion'] == 'user-edit-form') {
    $form = &$vars['content'];

    $form['actions']['submit']['#suffix'] = '<a id="mail-edit-cancel-link">or Cancel</a>';
    $form['field_user_avatar']['und'][0]['#title'] = '';
    // print drupal_render($form['field_user_avatar']);

    $form['account']['mail']['#title'] = t('Email');
    $form['account']['mail']['#attributes']['placeholder'] = t('Enter your email');
    $form['account']['mail']['#description'] = t('Your email is your login in the system. To change email you must enter your new email. Your email will be changed after confirmation.');
    $form['account']['current_pass']['#title'] = t('Current password');
    $form['account']['current_pass']['#description'] = t('Your current password. If your forgot your password, you can reset it <a href="/user/password">here</a>.');
    $form['account']['pass']['pass1']['#title'] = t("New password");
    $form['account']['pass']['pass2']['#title'] = t("Confirm new password");
    $form['account']['pass']['#attached']['js'][0] = 'sites/all/themes/airtribune2/js/user.js';

    $form['name_gender_dob']['#markup'] .= drupal_render($form['account']['mail_dummy']);

    // Main profile Name field
    if (!empty($form['profile_main'])) {

      $options = array(
        '#prefix' => '',
        '#suffix' => '',
        '#title_display' => 'before',
      );
      $form['profile_main']['field_full_name']['und'][0]['given'] = array_merge($form['profile_main']['field_full_name']['und'][0]['given'], $options);
      $form['profile_main']['field_full_name']['und'][0]['family'] = array_merge($form['profile_main']['field_full_name']['und'][0]['family'], $options);
      $form['profile_main']['field_full_name']['und'][0]['given']['#attributes']['placeholder'] = t('Enter your name');
      $form['profile_main']['field_full_name']['und'][0]['family']['#attributes']['placeholder'] = t('Enter your surname');
      // Temporary fix for Name label translation (see http://drupal.org/node/1788156)
      $form['profile_main']['field_full_name']['und'][0]['given']['#title'] = t('Name');
      $form['profile_main']['field_full_name']['und'][0]['family']['#title'] = t('Surname');
      // Add title to first field, and remove fieldset.
      $form['profile_main']['field_birthdate']['und'][0]['value']['day']['#title'] = t('Date of birth');
      $form['profile_main']['field_birthdate']['und'][0]['#title'] = '';

      $form['name_gender_dob']['#markup'] .= drupal_render($form['profile_main']['field_full_name']['und'][0]['given']);
      $form['name_gender_dob']['#markup'] .= drupal_render($form['profile_main']['field_full_name']['und'][0]['family']);
      $form['name_gender_dob']['#markup'] .= drupal_render($form['profile_main']['field_gender']);
      $form['name_gender_dob']['#markup'] .= drupal_render($form['profile_main']['field_birthdate']['und'][0]['value']);

      unset($form['profile_main']);
    }

    $form['mail_change']['#markup'] .= drupal_render($form['account']['mail']);
    $form['mail_change']['#markup'] .= drupal_render($form['account']['current_pass']);

    // Use own password change fieldset & hide default.
    $form['pass_fieldset']['current_pass'] = $form['account']['current_pass'];
    $form['pass_fieldset']['pass']         = $form['account']['pass'];
    hide($form['account']['pass']);

    // Personalisation.
    // Add placeholder & class to social links field.
    $socials = array('Facebook', 'Google Plus', 'Youtube', 'Vimeo', 'Istagram');
    $soc_links = &$form['field_social_links']['und'];
    foreach (array_keys($soc_links) as $element) {
      // [und][0], [und][1], ...
      if (is_int($element)) {
        $form['field_social_links']['und'][$element]['url']['#class'] = array($socials[$element]);
        $form['field_social_links']['und'][$element]['url']['#attributes']['placeholder'] = $socials[$element];
      }
    }
    $form['field_header_image']['und'][0]['select']['#title'] = t('Add image');
    $form['field_header_image']['und'][0]['remove']['#title'] = t('Delete');

    $form['personalisation']['basic_url'] = $form['basic_url'];
    $form['personalisation']['field_tiny_path'] = $form['field_tiny_path'];
    $form['personalisation']['field_header_image'] = $form['field_header_image'];
    $form['personalisation']['field_social_links'] = $form['field_social_links'];
    unset($form['basic_url']);
    unset($form['field_tiny_path']);
    unset($form['field_header_image']);
    unset($form['field_social_links']);
  }
}

/**
 * Menu callback; process one time login link and redirects to the user page on success.
 * Overridden function of user_registrationpassword_confirm_account at user_registrationpassword.pages.inc
 */
function at_user_registrationpassword_confirm_account($form, &$form_state, $uid, $timestamp, $hashed_pass) {
  global $user;
  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    if ($user->uid == $uid) {
      drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array(
        '%user' => $user->name,
        '!user_edit' => url("user/$user->uid/edit")
      )));
    }
    // A different user is already logged in on the computer.
    else {
      $reset_link_account = user_load($uid);
      if (!empty($reset_link_account)) {
        drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
          array(
            '%other_user' => $user->name,
            '%resetting_user' => $reset_link_account->name,
            '!logout' => url('user/logout')
          )));
      }
      else {
        // Invalid one-time link specifies an unknown user.
        drupal_set_message(t('The one-time login link you clicked is invalid.'));
      }
    }
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
    $timeout = 86400;
    $current = REQUEST_TIME;
    // Some redundant checks for extra security ?
    $users = user_load_multiple(array($uid), array('status' => '0'));
    if ($timestamp <= $current && $account = reset($users)) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
      elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        watchdog('user', 'User %name used one-time login link at time %timestamp.', array(
          '%name' => $account->name,
          '%timestamp' => $timestamp
        ));
        // Activate the user.
        $account = user_save($account, array('status' => 1));
        // Set the new user.
        $user = $account;
        // user_login_finalize() also updates the login timestamp of the
        // user, which invalidates further use of the one-time login link.
        user_login_finalize();
        drupal_set_message(t('You have just used your one-time login link. Your account is now active.'));
        // AIRTRIBUNE SECTION
        // we must know, at which event pilot registered
        $event_nid = db_select('og_membership', 'm')
          ->fields('m', array('gid'))
          ->condition(
            db_or()
              ->condition('m.type', 'pg_contestant')
              ->condition('m.type', 'hg_contestant')
          )
          ->condition('m.etid', $user->uid)
          ->execute()
          ->fetchField();
        // if pilot registered on some event
        if ($event_nid) {
          // load info about event & organiser of this event
          $event = node_load($event_nid);
          $event_title = trim($event->title);
          $organiser = user_load($event->uid);
          // show welcome-message 'your registered to [event-name]' to pilot
          drupal_set_message(t(AT_MSG_SITE_GUEST_REG_ON_EVENT_AFTER_ACCOUNT_ACTIVE, array('@event_name' => $event_title)));
          // try to load pre-saved mails about pilot registration to event
          $mail_dir = drupal_realpath('public://') . '/mail';
          $mail_to_pilot = unserialize(@file_get_contents($mail_dir . '/' . $user->uid . '_to_pilot.mail'));
          $mail_to_org = unserialize(@file_get_contents($mail_dir . '/' . $user->uid . '_to_org.mail'));
          // if mails loaded, then send them to pilot & organiser
          if ($mail_to_pilot && $mail_to_org) {
            $mail_pilot = drupal_mail('system', 'mail', $user->mail, user_preferred_language($user), array('context' => $mail_to_pilot));
            $mail_org = drupal_mail('system', 'mail', $organiser->mail, user_preferred_language($organiser), array('context' => $mail_to_org));
            unlink($mail_dir . '/' . $user->uid . '_to_pilot.mail');
            unlink($mail_dir . '/' . $user->uid . '_to_org.mail');
          }
          else {
            watchdog('mail', 'cant load & send confirm email about pilot registration for uid: !uid', array('!uid' => $user->uid), WATCHDOG_ERROR);
          }
//        dpm($mail_dir, 'mail_dir');
//        dpm($event, 'event');
//        dpm($user, 'user');
//        dpm($organiser, 'organiser');
//        dpm($mail_pilot, 'mail_pilot');
//        dpm($mail_org, 'mail_org');
          // redirect to pilot list
          drupal_goto('event/' . $event->nid . '/pilots');
        }
        else {
          drupal_goto('user');
        }
        // AIRTRIBUNE SECTION END
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}

/**
 * Get full name of user
 *
 * @param $user
 *   uid or user object
 *
 * @return
 *   NULL if user not found
 *   Name & Surname from main profile (if filled), otherwise user->name
 */
function at_user_get_full_name($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  if (!$user) {
    return NULL;
  }

  $user_profile = profile2_load_by_user($user);
  if (!empty($user_profile['main']->field_full_name[LANGUAGE_NONE][0]['given'])) {
    // $name = drupal_render(field_view_field('profile2', $user_profile['main'], 'field_full_name', array('label' => 'hidden')));
    // more fast
    $name = $user_profile['main']->field_full_name[LANGUAGE_NONE][0]['given'] . ' ' .
            $user_profile['main']->field_full_name[LANGUAGE_NONE][0]['family'];
  }
  else {
    $name = $user->name;
  }

  return $name;
}

/**
 * Get contestant number of this user on this event
 *
 * @param $uid
 *   user uid
 * @param $event_nid
 *   event nid
 *
 * @return
 *   NULL if number not found
 *   Contestant number of this user on this event
 */
function at_user_get_contestant_number($uid, $event_nid) {
  $og_id = db_select('og_membership', 'm')
    ->fields('m', array('id'))
    ->condition(
      db_or()
        ->condition('m.type', 'pg_contestant')
        ->condition('m.type', 'hg_contestant')
    )
    ->condition('m.etid', $uid)
    ->condition('m.gid', $event_nid)
    ->condition('m.state', 1)
    ->execute()
    ->fetchField();

  $number = db_select('field_data_field_contestant_number', 'n')
    ->fields('n', array('field_contestant_number_value'))
    ->condition(
      db_or()
        ->condition('n.bundle', 'pg_contestant')
        ->condition('n.bundle', 'hg_contestant')
    )
    ->condition('n.entity_id', $og_id)
    ->condition('n.deleted', 0)
    ->execute()
    ->fetchField();

  $contestant_number = $number ? $number : NULL;

  return $contestant_number;
}