<?php

/**
 * Implements hook_menu().
 */
function at_user_menu() {
  $items = array();

  $items['profile-pilot/%user/user'] = array(
    'title' => 'Edit user',
    'page callback' => 'at_user_redirect_to_user',
    'page arguments' => array(1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%/pilot'] = array(
    'title' => 'Edit pilot',
    'page callback' => 'at_user_redirect_to_pilot',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('edit own pilot profile'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

function at_user_redirect_to_pilot($nid) {
  drupal_goto('profile-pilot/' . arg(1) . '/edit');
}

function at_user_redirect_to_user($nid) {
  drupal_goto('user/' . arg(1) . '/edit');
}

/**
 * Implements hook_menu_alter().
 */
function at_user_menu_alter(&$items) {
  // hide the tab on the user account page
  $items['user/%user_category/edit/main']['access callback'] = FALSE;
  // override to our
  $items['user/registrationpassword/%/%/%']['page arguments'] = array('at_user_registrationpassword_confirm_account', 2, 3, 4);
}

/**
 * Implements hook_form_FORM_ID_alter() for the user edit form.
 */
function at_user_form_user_profile_form_alter(&$form, &$form_state) {
  // merge the profile2 form with the user account form
  // if profile type = 'main' & checkbox 'Provide a separate page for editing profiles' is unset, so userCategory = TRUE
  if (($type = profile2_get_types('main')) && $type->userCategory) {
    if (empty($form_state['profiles'])) {
      $profile = profile2_load_by_user($form['#user'], 'main');
      if (empty($profile)) {
        $profile = profile_create(array('type' => 'main', 'uid' => $form['#user']->uid));
      }
      $form_state['profiles'][$profile->type] = $profile;
    }
    profile2_attach_form($form, $form_state);
  }
}

/*
 * Implements hook_form_alter for user create/login/pass-reset
 */
function at_user_form_alter(&$form, $form_state, $form_id) {
  global $user;

  if ($form_id == 'user_profile_form') {
    // make upload & delete (user_picture / avatar imagefield) without form_submit
    // see #2764
    if (isset($form_state['values']['field_user_avatar_und_0_remove_button']) &&
        $form_state['values']['field_user_avatar_und_0_remove_button'] == "Remove") {
      at_user_photo_ajax_remove($form, $form_state, $form_id);
    }
    $lang = $form['field_user_avatar']['#language'];
    // own field validators
    $form['field_user_avatar'][$lang][0]['#upload_validators'] = array();
    //unset($form['field_user_avatar'][$lang][0]['#upload_validators']['file_validate_image_resolution']);
    $form['field_user_avatar'][$lang][0]['#upload_validators']['file_validate_extensions'] = array(0=>'png gif jpg jpeg');
    $form['field_user_avatar'][$lang][0]['#upload_validators']['at_user_file_validate_image_resolution'] = array(0=>'150x150',1=>'60x60');
    $form['field_user_avatar'][$lang][0]['#upload_validators']['file_validate_size'] = array(0=>(200*1024));
    $form['field_user_avatar'][$lang][0]['#upload_validators']['at_user_photo_ajax_upload'] = array();

    // see #2817
    // send mail to user on password change
    $form['#submit'][] = 'at_user_notify_user_at_password_change';
    // Unset 'current password' field
    unset($form['account']['current_pass']);
    unset($form['account']['current_pass_required_values']);
    $form['#validate'] = array_diff($form['#validate'], array('user_validate_current_pass'));
  }
  // see #2633
  if ($form_id == 'user_login_block') {
    $form['#action'] = '/' . variable_get('site_frontpage', '') . '?destination=user';
  }
  // see #2633
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    $form['inline_errors']['#markup'] = '';
    $form['inline_errors']['#weight'] = -10;
    $form['#validate'][] = 'at_user_login_error_msg';
    $form['#validate'][] = 'at_user_login_error_redirect_to_form';
  }
}

function at_user_password_title_change($element) {
  $element['pass1']['#title'] = t("New password");
  $element['pass2']['#title'] = t("Repeat new password");
  return $element;
}

function at_user_photo_ajax_remove(&$form, $form_state, $form_id) {
  global $user;

  if ($file = file_load($user->picture)) {
    // When a module is managing a file, it must manage the usage count.
    // Here we decrement the usage count with file_usage_delete().
    file_usage_delete($file, 'file', 'user', 1);
    file_usage_delete($file, 'user', 'user', 1);

    // The file_delete() function takes a file object and checks to see if
    // the file is being used by any other modules. If it is the delete
    // operation is cancelled, otherwise the file is deleted.
    file_delete($file);

    // empty fields & save user data
    $edit['picture'] = null;
    $edit['field_user_avatar'] = null;
    $saved_user = user_save($user, $edit);
  }
}

function at_user_file_validate_image_resolution(stdClass $file, $maximum_dimensions = 0, $minimum_dimensions = 0) {
  $errors = array();

  // Check first that the file is an image.
  if ($info = image_get_info($file->uri)) {
    if ($maximum_dimensions) {
      // Check that it is smaller than the given dimensions.
      list($width, $height) = explode('x', $maximum_dimensions);
      if ($info['width'] > $width || $info['height'] > $height) {
        // Try to resize the image to fit the dimensions.
        if ($image = image_load($file->uri)) {
          image_scale($image, $width, $height);
          image_save($image);
          $file->filesize = $image->info['file_size'];
          // this line commented to avoid repeated messages at ajax-uploading without form_submit
          // drupal_set_message(t('The image was resized to fit within the maximum allowed dimensions of %dimensions pixels.', array('%dimensions' => $maximum_dimensions)), 'status', FALSE);
        }
        else {
          $errors[] = t('The image is too large; the maximum dimensions are %dimensions pixels.', array('%dimensions' => $maximum_dimensions));
        }
      }
    }

    if ($minimum_dimensions) {
      // Check that it is larger than the given dimensions.
      list($width, $height) = explode('x', $minimum_dimensions);
      if ($info['width'] < $width || $info['height'] < $height) {
        $errors[] = t('The image is too small; the minimum dimensions are %dimensions pixels.', array('%dimensions' => $minimum_dimensions));
      }
    }
  }

  return $errors;
}

function at_user_photo_ajax_upload(stdClass $file) {
  global $user;

  if ($res = file_copy($file, 'public://pictures/')) {
    $account         = user_load($user->uid);

    $edit['picture'] = $res;
    $edit['field_user_avatar']['und'][] = array(
      // 'alt' => '',
      // 'title' => '',
      // 'width' => 100,
      // 'height' => 100,
      'fid'       => $res->fid,
      'uid'       => $res->uid,
      'uri'       => $res->destination,
      'status'    => $res->status,
      'filename'  => $res->filename,
      'filemime'  => $res->filemime,
      'filesize'  => $res->filesize,
      'timestamp' => $res->timestamp,
    );
    $saved_user = user_save($account, $edit);
  }

  // it's form upload validator, so we need return empty array to avoid errors
  return array();
}

function at_user_notify_user_at_password_change(&$form, $form_state) {
  // load user by form, becose password can be changed by admin / editor
  // so we need uid & mail for changed user
  $user = $form_state['user'];
  // check for changes
  if (!empty($form_state['input']['pass']['pass1'])) {
    $name = $form_state['profiles']['main']->field_full_name['und']['0']['safe'];
    $fullname = $name['given'] . ' ' . $name['family'];
    drupal_mail('system', 'mail', $user->mail, $user->language,
      array(
        'context' => array(
          'subject' => t(AT_MSG_EMAIL_SUBJ_PREFIX . AT_MSG_EMAIL_SUBJ_USER_PASSWORD_CHANGE),
          'message' => t(AT_MSG_EMAIL_BODY_USER_PASSWORD_CHANGE . AT_MSG_EMAIL_BODY_SIGNATURE, array('@fullname' => $fullname))
        )
      )
    );
  }
}

function at_user_login_error_msg($form, &$form_state) {
  at_messages_msg_changer();
}

function at_user_login_error_redirect_to_form($form, &$form_state) {
  // user type wrong password / name
  if (empty($form_state['uid'])) {
    // at user login block
    if ($form['#form_id'] == 'user_login_block') {
      // $form_state['redirect'] = "user/login";
      // drupal_goto('user/login?mail='.$form_state['values']['name']);
      drupal_goto('user/login');
    }
    // update form, need for form-redirect and markup update
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function at_user_preprocess_page(&$variables) {
  $tabs_to_disable = array(
    // 'user/%/devel', 'node/%/devel', 'node/%/log',
    'user/%/view', 'profile-pilot/%/view', 'profile-main/%/view'
  );
  foreach ($variables['tabs'] as $group_key => $tab_group) {
    if (is_array($tab_group)) {
      foreach ($tab_group as $key => $tab) {
        if (isset($tab['#link']['path']) && in_array($tab['#link']['path'], $tabs_to_disable)){
          unset($variables['tabs'][$group_key][$key]);
        }
      }
    }
  }
}

/**
 * Menu callback; process one time login link and redirects to the user page on success.
 * Overridden function of user_registrationpassword_confirm_account at user_registrationpassword.pages.inc
 */
function at_user_registrationpassword_confirm_account($form, &$form_state, $uid, $timestamp, $hashed_pass) {
  global $user;
  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    if ($user->uid == $uid) {
      drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->uid/edit"))));
    }
    // A different user is already logged in on the computer.
    else {
      $reset_link_account = user_load($uid);
      if (!empty($reset_link_account)) {
        drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
          array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));
      }
      else {
        // Invalid one-time link specifies an unknown user.
        drupal_set_message(t('The one-time login link you clicked is invalid.'));
      }
    }
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
    $timeout = 86400;
    $current = REQUEST_TIME;
    // Some redundant checks for extra security ?
    $users = user_load_multiple(array($uid), array('status' => '0'));
    if ($timestamp <= $current && $account = reset($users)) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
      elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
        // Activate the user.
        $account = user_save($account, array('status' => 1));
        // Set the new user.
        $user = $account;
        // user_login_finalize() also updates the login timestamp of the
        // user, which invalidates further use of the one-time login link.
        user_login_finalize();
        drupal_set_message(t('You have just used your one-time login link. Your account is now active.'));
        // AIRTRIBUNE SECTION
        // we must know, at which event pilot registered
        $event_nid = db_select('og_membership', 'm')
          ->fields('m', array('gid'))
          ->condition('m.type', 'pg_contestant')
          ->condition('m.etid', $user->uid)
          ->execute()
          ->fetchField();
        // load info about event & organiser of this event
        $event = node_load($event_nid);
        $event_title = trim($event->title);
        $organiser = user_load($event->uid);
        // show welcome-message 'your registered to [event-name]' to pilot
        drupal_set_message(t(AT_MSG_SITE_GUEST_REG_ON_EVENT_AFTER_ACCOUNT_ACTIVE, array('@event_name' => $event_title)));
        // try to load pre-saved mails about pilot registration to event
        $mail_dir = drupal_realpath('public://') . '/mail';
        $mail_to_pilot = unserialize(@file_get_contents($mail_dir . '/' . $user->uid . '_to_pilot.mail'));
        $mail_to_org = unserialize(@file_get_contents($mail_dir . '/' . $user->uid . '_to_org.mail'));
        // if mails loaded, then send them to pilot & organiser
        if ($mail_to_pilot && $mail_to_org) {
          $mail_pilot = drupal_mail('system', 'mail', $user->mail, $user->language, array('context' => $mail_to_pilot));
          $mail_org = drupal_mail('system', 'mail', $organiser->mail, $organiser->language, array('context' => $mail_to_org));
          unlink($mail_dir . '/' . $user->uid . '_to_pilot.mail');
          unlink($mail_dir . '/' . $user->uid . '_to_org.mail');
        } else {
          watchdog(WATCHDOG_ERROR, 'cant load & send confirm email about pilot registration for uid: !uid', array('!uid' => $user->uid));
        }
//        dpm($mail_dir, 'mail_dir');
//        dpm($event, 'event');
//        dpm($user, 'user');
//        dpm($organiser, 'organiser');
//        dpm($mail_pilot, 'mail_pilot');
//        dpm($mail_org, 'mail_org');
        // redirect to pilot list
        drupal_goto('event/' . $event->nid . '/pilots');
        // AIRTRIBUNE SECTION END
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}

/**
 * Get full name of user
 *
 * @param $user
 *   uid or user object
 *
 * @return
 *   NULL if user not found
 *   Name & Surname from main profile (if filled), otherwise user->name
 */
function at_user_get_full_name($user) {
  // if $user not object
  if (!is_object($user)) {
    $user = user_load($user);
  }

  // user not found
  if (!$user) {
    return NULL;
  }

  $user_profile = profile2_load_by_user($user);
  if (!empty($user_profile['main']->field_full_name['und'][0]['given'])) {
    $name = $user_profile['main']->field_full_name['und'][0]['given'] . ' ' . $user_profile['main']->field_full_name['und'][0]['family'];
  }
  else {
    $name = $user->name;
  }

  return $name;
}

/**
 * Get contestant number of this user on this event
 *
 * @param $uid
 *   user uid
 * @param $event_nid
 *   event nid
 *
 * @return
 *   NULL if number not found
 *   Contestant number of this user on this event
 */
function at_user_get_contestant_number($uid, $event_nid) {
  $og_id = db_select('og_membership', 'm')
    ->fields('m', array('id'))
    ->condition('m.type', 'pg_contestant')
    ->condition('m.etid', $uid)
    ->condition('m.gid', $event_nid)
    ->condition('m.state', 1)
    ->execute()
    ->fetchField();

  $number = db_select('field_data_field_contestant_number', 'n')
    ->fields('n', array('field_contestant_number_value'))
    ->condition('n.bundle', 'pg_contestant')
    ->condition('n.entity_id', $og_id)
    ->condition('n.deleted', 0)
    ->execute()
    ->fetchField();

  $contestant_number = $number ? $number : NULL;

  return $contestant_number;
}