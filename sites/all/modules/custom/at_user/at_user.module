<?php

/**
 * Implements hook_menu().
 */
function at_user_menu() {
  $items = array();

  $items['profile-pilot/%user/user'] = array(
    'title' => 'Edit user',
    'page callback' => 'at_user_redirect_to_user',
    'page arguments' => array(1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%/pilot'] = array(
    'title' => 'Edit pilot',
    'page callback' => 'at_user_redirect_to_pilot',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('edit own pilot profile'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

function at_user_redirect_to_pilot($nid) {
  drupal_goto('profile-pilot/' . arg(1) . '/edit');
}

function at_user_redirect_to_user($nid) {
  drupal_goto('user/' . arg(1) . '/edit');
}

/**
 * Implements hook_menu_alter().
 */
function at_user_menu_alter(&$items) {
  // hide the tab on the user account page
  $items['user/%user_category/edit/main']['access callback'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter() for the user edit form.
 */
function at_user_form_user_profile_form_alter(&$form, &$form_state) {
  // merge the profile2 form with the user account form
  // if profile type = 'main' & checkbox 'Provide a separate page for editing profiles' is unset, so userCategory = TRUE
  if (($type = profile2_get_types('main')) && $type->userCategory) {
    if (empty($form_state['profiles'])) {
      $profile = profile2_load_by_user($form['#user'], 'main');
      if (empty($profile)) {
        $profile = profile_create(array('type' => 'main', 'uid' => $form['#user']->uid));
      }
      $form_state['profiles'][$profile->type] = $profile;
    }
    profile2_attach_form($form, $form_state);
  }
}

/*
 * Implements hook_form_alter for user create/login/pass-reset
 */
function at_user_form_alter(&$form, $form_state, $form_id) {
  // make upload & delete (user_picture / avatar imagefield) without form_submit
  // see #2764
  if ($form_id == 'user_profile_form') {
    $lang = $form['field_user_avatar']['#language'];
    $form['field_user_avatar'][$lang][0]['#upload_validators']['at_user_photo_ajax_upload'] = array();
//    if (isset($form_state['triggering_element']['#id']) &&
//      $form_state['triggering_element']['#id'] == 'edit-field-avatar-und-0-remove-button') {
    if (isset($form_state['values']['field_user_avatar_und_0_remove_button']) &&
        $form_state['values']['field_user_avatar_und_0_remove_button'] == "Remove") {
      at_user_photo_ajax_remove($form, $form_state, $form_id);
    }
  }
  // see #2633
  if ($form_id == 'user_login_block') {
    $form['#action'] = '/' . variable_get('site_frontpage', '') . '?destination=user';
  }
  // see #2633
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    $form['inline_errors']['#markup'] = '';
    $form['inline_errors']['#weight'] = -10;
    $form['#validate'][] = 'at_user_change_login_error_msg_validate';
    $form['#validate'][] = 'at_user_change_login_error_inline_validate';
  }
}

function at_user_photo_ajax_remove(&$form, $form_state, $form_id) {
  global $user;

  if ($file = file_load($user->picture)) {
    // When a module is managing a file, it must manage the usage count.
    // Here we decrement the usage count with file_usage_delete().
    file_usage_delete($file, 'file', 'user', 1);
    file_usage_delete($file, 'user', 'user', 1);

    // The file_delete() function takes a file object and checks to see if
    // the file is being used by any other modules. If it is the delete
    // operation is cancelled, otherwise the file is deleted.
    file_delete($file);

    // empty fields & save user data
    $edit['picture'] = null;
    $edit['field_user_avatar'] = null;
    $saved_user = user_save($user, $edit);
  }
  // drupal_set_message(t('The image @image_name was removed.', array('@image_name' => $file->filename)));
}

function at_user_photo_ajax_upload(stdClass $file) {
  global $user;

  if ($res = file_copy($file, 'public://pictures/')) {
    $account         = user_load($user->uid);
    $edit['picture'] = $res;
    $edit['field_user_avatar']['und'][] = array(
      // 'alt' => '',
      // 'title' => '',
      // 'width' => 100,
      // 'height' => 100,
      'fid'       => $res->fid,
      'uid'       => $res->uid,
      'uri'       => $res->destination,
      'status'    => $res->status,
      'filename'  => $res->filename,
      'filemime'  => $res->filemime,
      'filesize'  => $res->filesize,
      'timestamp' => $res->timestamp,
    );
    $saved_user = user_save($account, $edit);
  }

  // it's form upload validator, so we need return empty array to avoid errors
  return array();
}

function at_user_change_login_error_msg_validate($form, &$form_state) {
  if (empty($_SESSION['messages'])) {
    return;
  }
  foreach($_SESSION['messages']['error'] as $key => $error) {
    if ($error == 'Sorry, unrecognized username or password. <a href="/user/password">Have you forgotten your password?</a>') {
      $_SESSION['messages']['error'][$key] = 'The username or password you have entered is incorrect.<br/><a href="/user/password">Forgot your password?</a>';
    }
  }
}

function at_user_change_login_error_inline_validate($form, &$form_state) {
  // user type wrong password / name
  if (empty($form_state['uid'])) {
    // at user login block
    if ($form['#form_id'] == 'user_login_block') {
      // $form_state['redirect'] = "user/login";
      // drupal_goto('user/login?mail='.$form_state['values']['name']);
      drupal_goto('user/login');
    }
    // at login form at user/login
    if (form_get_errors()) {
      $form_errors = form_get_errors();
      $drupal_errors = drupal_get_messages('error');
      //form_clear_error();
      $form_state['complete form']['inline_errors']['#markup'] = '<div class="inline_login_errors">';
      foreach($drupal_errors['error'] as $key => $error) {
          $form_state['complete form']['inline_errors']['#markup'] .= $error . "<br/>";
      }
      $form_state['complete form']['inline_errors']['#markup'] .= '</div>';
    }
    // update form, need for form-redirect and markup update
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function at_user_preprocess_page(&$variables) {
  $tabs_to_disable = array(
    // 'user/%/devel', 'node/%/devel', 'node/%/log',
    'user/%/view', 'profile-pilot/%/view', 'profile-main/%/view'
  );
  foreach ($variables['tabs'] as $group_key => $tab_group) {
    if (is_array($tab_group)) {
      foreach ($tab_group as $key => $tab) {
        if (isset($tab['#link']['path']) && in_array($tab['#link']['path'], $tabs_to_disable)){
          unset($variables['tabs'][$group_key][$key]);
        }
      }
    }
  }
}