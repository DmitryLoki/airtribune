<?php

/**
 * Implements hook_menu().
 */
function at_user_menu() {
  $items = array();

  $items['is_email_exists/%'] = array(
    'title' => 'Is email exists',
    'page callback' => 'at_user_is_email_exists',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['is_user_exists/%/%/%'] = array(
    'title' => 'Is email exists',
    'page callback' => 'at_user_is_user_exists',
    'page arguments' => array(1,2,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['user/%/pilot'] = array(
    'title' => 'Edit pilot',
    'page callback' => 'at_user_redirect_to_pilot',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('edit own pilot profile'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['profile-pilot/%user/user'] = array(
    'title' => 'Edit user',
    'page callback' => 'at_user_redirect_to_user',
    'page arguments' => array(1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function at_user_redirect_to_pilot($nid) {
  drupal_goto('profile-pilot/' . arg(1) . '/edit');
}

function at_user_redirect_to_user($nid) {
  drupal_goto('user/' . arg(1) . '/edit');
}

function at_user_is_email_exists($mail) {
  if (empty($mail)) {
    return;
  }
  $count = db_select('users', 'u')
    ->condition('mail', $mail)
    ->countQuery()
    ->execute()
    ->fetchField();
  if ($count) {
    $result['exists'] = 'TRUE'; // can pass boolean to js?
    echo drupal_json_encode($result);
  }
}

function at_user_is_user_exists($first_name, $last_name, $birthday) {
  if (empty($first_name) || empty($last_name) || empty($birthday)) {
    return;
  }

  $result['exists'] = 'FALSE';

  $users_with_name = db_select('field_data_field_full_name', 'n')
    ->condition(
      db_and()
        ->condition('field_full_name_given', $first_name, '=')
        ->condition('field_full_name_family', $last_name, '=')
    )
    ->countQuery()
    ->execute();

  $users_with_birthday = db_select('field_data_field_birthdate', 'b')
    ->condition('field_birthdate_value', $birthday, '=')
    ->countQuery()
    ->execute();

  foreach ($users_with_name as $n_eid) {
    foreach ($users_with_birthday as $b_eid) {
      if ($n_eid == $b_eid) {
        $result['exists'] = 'TRUE';
      }
    }
  }

  echo drupal_json_encode($result);
}

/*
  select entity_id from field_data_field_full_name where field_full_name_family='Ivanovich' and field_full_name_given='Ivan'
  select entity_id from field_data_field_birthdate where field_birthdate_value='2013-01-14'

  $users = db_select('field_data_field_birthdate', 'bd')
    ->fields('bd', array('entity_id'))
    ->condition('bd.field_birthdate_value', '2013-01-14', '=')
    //->leftJoin('field_data_field_full_name', 'name', 'bd.entity_id = name.entity_id')
    ->innerJoin('field_data_field_full_name', 'name', 'bd.entity_id = name.entity_id')
    ->condition('name.field_full_name_family', 'Ivanovich', '=')
    ->condition('name.field_full_name_given', 'Ivan', '=')
    ->execute();
  print_r($users->__toString());
  var_dump($users);

  $users = db_select('field_data_field_birthdate', 'bd')
    ->join('field_data_field_full_name', 'name', 'bd.entity_id = name.entity_id')
    ->fields('bd', array('entity_id'))
    ->condition('bd.field_birthdate_value', '2013-01-14')
    ->condition('name.field_full_name_family', 'Ivanovich')
    ->condition('name.field_full_name_given', 'Ivan')
    ->execute();
 var_dump($users);
*/

/**
 * Implements hook_menu_alter().
 */
function at_user_menu_alter(&$items) {
  // hide the tab on the user account page
  $items['user/%user_category/edit/main']['access callback'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter() for the user edit form.
 */
function at_user_form_user_profile_form_alter(&$form, &$form_state) {
  // merge the profile2 form with the user account form
  // if profile type = 'main' & checkbox 'Provide a separate page for editing profiles' is unset, so userCategory = TRUE
  if (($type = profile2_get_types('main')) && $type->userCategory) {
    if (empty($form_state['profiles'])) {
      $profile = profile2_load_by_user($form['#user'], 'main');
      if (empty($profile)) {
        $profile = profile_create(array('type' => 'main', 'uid' => $form['#user']->uid));
      }
      $form_state['profiles'][$profile->type] = $profile;
    }
    profile2_attach_form($form, $form_state);
  }
}

/*
 * Implements hook_form_alter for user create/login/pass-reset
 */
function at_user_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    drupal_add_js(drupal_get_path('module', 'at_user') . '/at_user_helper.js');
  }
  // see #2633
  if ($form_id == 'user_login_block') {
    $form['#action'] = '/' . variable_get('site_frontpage', '') . '?destination=user';
  }
  // see #2633
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    $form['inline_errors']['#markup'] = '';
    $form['inline_errors']['#weight'] = -10;
    $form['#validate'][] = 'at_user_change_login_error_msg_validate';
    $form['#validate'][] = 'at_user_change_login_error_inline_validate';
  }
}

function at_user_change_login_error_msg_validate($form, &$form_state) {
  if (empty($_SESSION['messages'])) {
    return;
  }
  foreach($_SESSION['messages']['error'] as $key => $error) {
    if ($error == 'Sorry, unrecognized username or password. <a href="/user/password">Have you forgotten your password?</a>') {
      $_SESSION['messages']['error'][$key] = 'The username or password you have entered is incorrect.<br/><a href="/user/password">Forgot your password?</a>';
    }
  }
}

function at_user_change_login_error_inline_validate($form, &$form_state) {
  // user type wrong password / name
  if (empty($form_state['uid'])) {
    // at user login block
    if ($form['#form_id'] == 'user_login_block') {
      // $form_state['redirect'] = "user/login";
      // drupal_goto('user/login?mail='.$form_state['values']['name']);
      drupal_goto('user/login');
    }
    // at login form at user/login
    if (form_get_errors()) {
      $form_errors = form_get_errors();
      $drupal_errors = drupal_get_messages('error');
      //form_clear_error();
      $form_state['complete form']['inline_errors']['#markup'] = '<div class="inline_login_errors">';
      foreach($drupal_errors['error'] as $key => $error) {
          $form_state['complete form']['inline_errors']['#markup'] .= $error . "<br/>";
      }
      $form_state['complete form']['inline_errors']['#markup'] .= '</div>';
    }
    // update form, need for form-redirect and markup update
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function at_user_preprocess_page(&$variables) {
  $tabs_to_disable = array(
    // 'user/%/devel', 'node/%/devel', 'node/%/log',
    'user/%/view', 'user/%/ulogin', 'profile-main/%/view'
  );
  foreach ($variables['tabs'] as $group_key => $tab_group) {
    if (is_array($tab_group)) {
      foreach ($tab_group as $key => $tab) {
        if (isset($tab['#link']['path']) && in_array($tab['#link']['path'], $tabs_to_disable)){
          unset($variables['tabs'][$group_key][$key]);
        }
      }
    }
  }
}