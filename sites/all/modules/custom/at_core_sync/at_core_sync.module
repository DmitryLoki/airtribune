<?php

include_once 'at_core_sync.features.inc';

define('AIRTRIBUNE_CORE_ID_FIELD', 'field_core_id');

/**
 * @file
 * Installation file for the Airtribune Core API module.
 */

/**
 * Implements hook_init().
 */
function at_core_sync_init() {
  // Add global variables for Core API access
  drupal_add_js(array(
      'at_core_sync' => array(
        'apiVersion' => at_core_sync_get_api_version(),
        'apiDomain' => at_core_sync_get_api_domain(),
        'apiUrl' => at_core_sync_get_api_url(),
      )
    ), 'setting');
}

/**
 * Returns synchronization class
 */
function _get_class_by_entity($entity_type, $entity) {
  require_once drupal_get_path('module', 'at_core_sync') . '/at_core_sync.class.inc';

  $class = FALSE;
  $tmp = $entity_type;

  if (!empty($entity->type)) {
    $tmp .= ':' . $entity->type;
  }
  $classes = array(
    'node:pg_contest' => 'ATSyncContest',
    'node:hg_contest' => 'ATSyncContest',
    'node:day' => 'ATSyncDay',
    'user' => 'ATSyncUser',
    'og_membership:pg_contestant' => 'ATSyncGlider',
    'og_membership:hg_contestant' => 'ATSyncGlider',
    'og_membership:pg_winddummy' => 'ATSyncWindDummy',
    'og_membership:pg_organizer' => 'ATSyncOrganizer',
    'og_membership:tracked_object' => 'ATSyncStaff',
    'ent_race:pg_race' => 'ATSyncRace',
    'ent_tracker:device' => 'ATSyncTracker',
  );

  if (!empty($classes[$tmp])) {
    $class = $classes[$tmp];
    return new $class($entity_type, $entity);
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_entity_delete().
 */
function at_core_sync_entity_delete($entity, $type) {
  at_core_sync_entity_sync($type, $entity, 'delete');
}

/**
 * Implements hook_entity_update().
 */
function at_core_sync_entity_update($entity, $type) {
  at_core_sync_entity_sync($type, $entity);
  at_core_sync_other_sync($type, $entity);
}

/**
 * Implements hook_entity_insert().
 */
function at_core_sync_entity_insert($entity, $type) {
  at_core_sync_entity_sync($type, $entity);
  at_core_sync_other_sync($type, $entity);
}

/**
 * Implements hook_menu().
 */
function at_core_sync_menu() {
  $items = array();
  $items['admin/config/core_api'] = array(
    'title' => 'Core API',
    'description' => 'Airtribune Core API',
    'file' => 'at_core_sync.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('at_core_sync_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/core_api/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/core_api/fields'] = array(
    'title' => 'Fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('at_core_sync_fields_form'),
    'file' => 'at_core_sync.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Get CoreAPI version.
 *
 * @author Vyacheslav Malchik <info@vkey.biz>
 * @see #3115.
 */
function at_core_sync_get_api_version() {
  $result = variable_get('at_core_sync_version', 'v0.1');
  return $result;
}

/**
 * Get CoreAPI domain.
 *
 * @author Vyacheslav Malchik <info@vkey.biz>
 */
function at_core_sync_get_api_domain() {
  $port = variable_get('at_core_sync_port', '80');
  $port = $port == '80' ? '' : ':' . $port;
  $result = variable_get('at_core_sync_address', 'http://api.airtribune.com') . $port;
  return $result;
}

/**
 * Get CoreAPI port.
 */
function at_core_sync_get_port() {
  $result = variable_get('at_core_sync_port', '80');
  return $result;
}

/**
 * Get CoreAPI url.
 *
 * @author Vyacheslav Malchik <info@vkey.biz>
 * @see #3115.
 */
function at_core_sync_get_api_url() {
  $version = at_core_sync_get_api_version();

  $address =
    $version ?
    at_core_sync_get_api_domain() . '/' . $version :
    at_core_sync_get_api_domain();
  return $address;
}

/**
 * Get all contests from Core.
 */
function get_contests_from_core() {
  return ATSync::requestToCore('contest', FALSE, 'GET');
}

/**
 * Get all races from contest from Core.
 */
function get_races_from_contest_core($core_id) {
  return ATSync::requestToCore('contest/' . $core_id . '/race', FALSE, 'GET');
}

/**
 * Get all paragliders from contest from Core.
 */
function get_paragliders_from_contest_core($core_id) {
  return ATSync::requestToCore('contest/' . $core_id . '/paraglider', FALSE, 'GET');
}

// Debug function
function _d($var) {
  drupal_set_message(print_r($var, TRUE));
}

/**
 * _at_sync_debug function
 *
 * @param $var - variable for debug
 * @param $request - string, contains: method, url, port to Core API
 * @param $response - response from Core API
 */
function _asd($var, $request = NULL, $response = NULL) {
  $debug = variable_get('at_core_sync_debug_mode', 0);
  if ($debug) {
    // ATSync::setMessage(t('<strong>Core API sync:</strong>&nbsp;Debug mode is ON.'), 'warning');
    $message = '';
    if (isset($request)) {
      $message_url = "<b>$request</b>";
      $message = $message_url . '<br />';
    }
    $message .= '<b>Data:</b> <pre>' . $var . '</pre>';
    ATSync::setMessage($message, 'warning');
    if (isset($response)) {
      $message_response = '<b>Response:</b> <pre>' . print_r($response, TRUE)  . '</pre>';
      ATSync::setMessage($message_response, 'warning');
      $message .= '<br />' . $message_response;
    }
    watchdog('at_core_sync', $message);
  }
}


/**
 * Implements hook_action_info()
 */
function at_core_sync_action_info() {
  return array(
    'at_core_sync_contests_action' => array(
      'type' => 'node',
      'label' => t('[Core API] Sync contests'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
    'at_core_sync_contests_full_action' => array(
      'type' => 'node',
      'label' => t('[Core API] Sync contests (full data)'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
    'at_core_sync_copy_country_action' => array(
      'type' => 'user',
      'label' => t('Copy country'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
    'at_core_sync_contestants_action' => array(
      'type' => 'og_membership',
      'label' => t('[Core API] Sync contestants'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
    'at_core_sync_contestants_users_action' => array(
      'type' => 'og_membership',
      'label' => t('[Core API] Sync users'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
    'at_core_sync_tracked_objects_action' => array(
      'type' => 'og_membership',
      'label' => t('[Core API] Sync tracked objects'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
    'at_core_sync_races_action' => array(
      'type' => 'ent_race',
      'label' => t('[Core API] Sync races'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
    'at_core_delete_races_action' => array(
      'type' => 'ent_race',
      'label' => t('[Core API] Delete race from Core'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
    'at_core_sync_races_tracks_action' => array(
      'type' => 'ent_race',
      'label' => t('[Core API] Send tracks'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
    'at_core_sync_trackers_action' => array(
      'type' => 'ent_tracker',
      'label' => t('[Core API] Sync trackers'),
      'configurable' => FALSE,
      'aggregate' => FALSE,
      'hooks' => array(
        'any' => TRUE,
      ),
    ),
  );
}

/*
 * Custom actions for entity sync with Core
 * @author Vyacheslav Malchik <info@vkey.biz>
 */
function at_core_sync_other_sync($entity_type, $entity) {
  if (variable_get('at_core_sync_enabled', 0)) {
    if ($sync = _get_class_by_entity($entity_type, $entity)) {
      //TODO: move custom actions to hooks
      switch ($entity_type) {
        case 'ent_race':
          return $sync->pushTracks();
          break;
        case 'tracked_object':
        case 'og_membership':
          /*
          $tracker_entity = $sync->tracker;
          $tracked_core_id = $sync->core_id;

          // Tracker erased
          if (isset($entity->original) && !isset($entity->field_tracker[LANGUAGE_NONE][0]) && $entity->field_tracker != $entity->original->field_tracker) {
            $tracker_eid = $entity->original->field_tracker[LANGUAGE_NONE][0]['target_id'];
            if ($tracker_eid) {
              $tracker_entity = array_pop(entity_load('ent_tracker', array($tracker_eid), array(), TRUE));
              $tracked_core_id = '';
            }
          }
          // Assignee tracker to person

          if ($tracker_entity) {
            $tracker = _get_class_by_entity('ent_tracker', $tracker_entity);
            return $tracker->assignee($tracked_core_id);
          }
           */
          break;
      }
    }
  }
  return FALSE;
}

function at_core_sync_entity_sync($entity_type, $entity, $action='', $fields = array()) {
  // Exit, if synchronization disabled
  if (variable_get('at_core_sync_enabled', 0) == 0) {
    return FALSE;
  }
  if ($sync = _get_class_by_entity($entity_type, $entity)) {
    switch ($action) {
      case 'delete' :
        return $sync->delete();
        break;
      case 'patch':
        if (!empty($fields) && is_array($fields)) {
          $data = array();
          foreach($fields as $property => $field_name) {
            if (isset($entity->{$field_name}[LANGUAGE_NONE])) {
              // No use wrapper for at_tracker fields
              $data[$property] = $entity->{$field_name}[LANGUAGE_NONE][0]['value'];
            }
          }
          return $sync->synchronizePatch($data);
        }
        break;
      default :
        return $sync->synchronize();
        break;
    }
  }
}

/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 */
function at_core_sync_contests_action(&$object, $context = array()) {
  at_core_sync_entity_sync('node', $object);
}
/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 * @see #4586
 * @author Vyacheslav Malchik <info@vkey.biz>
 */
function at_core_sync_contests_full_action(&$object, $context = array()) {
  // Get group id
  list($gid, $vid, $bundle) = entity_extract_ids('node', $object);

  // Sync contest
  at_core_sync_entity_sync('node', $object);

  // Sync contestants
  $view = views_get_view('core_api_manage_contestants');
  $view->set_display('manage_list_contestants_page');
  $view->set_arguments(array($gid));
  $view->execute();
  foreach ($view->result as $result) {
    $membership = entity_load_single('og_membership', $result->og_membership_users_id);
    $curr_user = user_load($membership->etid);
    user_save($curr_user);
    at_core_sync_contestants_action($membership);
  }

  // Sync days
  $view = views_get_view('day_admin');
  $view->set_display('manage_list_days_page');
  $view->set_arguments(array($gid));
  $view->execute();
  foreach ($view->result as $result) {
    $day = node_load($result->nid);
    at_core_sync_entity_sync('node', $day);
  }

  // Sync race
  $view = views_get_view('core_api_manage_races');
  $view->set_display('manage_list_race_page');
  $view->set_arguments(array($gid));
  $view->execute();
  foreach ($view->result as $result) {
    $race = entity_load_single(AIRTRIBUNE_RACE_ENTITY_TYPE, $result->id);
    at_core_sync_races_action($race);
    at_core_sync_races_tracks_action($race);
  }

  // Sync staff
  $view = views_get_view('staff_manage');
  $view->set_display('manage_list_staff');
  $view->set_arguments(array($gid));
  $view->execute();
  foreach ($view->result as $result) {
    $membership = entity_load_single('og_membership', $result->id);
    at_core_sync_contestants_action($membership);
  }
}

/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 */
function at_core_sync_copy_country_action(&$object, $context = array()) {
  $profiles = profile2_load_by_user($object);
  if (isset($profiles['main']) && isset($profiles['pilot'])) {
    $pilot = $profiles['pilot'];
    $main = $profiles['main'];
    $pilot_wrapper = entity_metadata_wrapper('profile2', $pilot);
    try {
      $country = $pilot_wrapper->field_address->country->value();
    }
    catch (EntityMetadataWrapperException $e) {
      return;
    }
    $main->field_country[LANGUAGE_NONE][0]['iso2'] = $country;
    profile2_save($main);
  }
}

/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 */
function at_core_sync_contestants_action(&$object, $context = array()) {
  at_core_sync_entity_sync('og_membership', $object);
  at_core_sync_other_sync('og_membership', $object);
}

/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 */
function at_core_sync_contestants_users_action(&$object, $context = array()) {
  $account = user_load($object->etid);
  user_save($account);
}

/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 */
function at_core_sync_tracked_objects_action(&$object, $context = array()) {
  at_core_sync_entity_sync('og_membership', $object);
  at_core_sync_other_sync('og_membership', $object);
}

/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 */
function at_core_sync_races_action(&$object, $context = array()) {
  at_core_sync_entity_sync('ent_race', $object);
}

/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 */
function at_core_delete_races_action(&$object, $context = array()) {
  $entity_type = 'ent_race';
  $entity = $object;
  $response = at_core_sync_entity_sync($entity_type, $entity, 'delete');
  if (empty($response)) {
    $entity->field_core_id[LANGUAGE_NONE][0]['value'] = '';
    list($entity_id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    field_attach_update($entity_type, $entity);
    entity_get_controller($entity_type)->resetCache(array($entity_id));
  }
}

/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 */
function at_core_sync_races_tracks_action(&$object, $context = array()) {
  at_core_sync_other_sync('ent_race', $object);
}

/**
 * Implementation of a Drupal action
 *
 * @param object $object
 * @param array $context
 */
function at_core_sync_trackers_action(&$object, $context = array()) {
  at_core_sync_entity_sync('ent_tracker', $object);
}

/**
 * Implements hook_flush_caches().
 * Move at_core_sync before pg_race
 */
function at_core_sync_flush_caches() {
  db_update('system')
    ->fields(array(
      'weight' => -2,
    ))
    ->condition('type', 'module')
    ->condition('name', 'at_core_sync')
    ->execute();
}
