<?php
/**
 * @file clients_at_core.module
 * Provides connection types for Clients module that connect to AirTribune CoreAPI.
 */

/**
 * Implements hook_clients_connection_type_info().
 */
function clients_at_core_clients_connection_type_info() {
  return array(
    'drupal_rest_at_core' => array(
      'label'  => t('Drupal AT Core API'),
      'description' => t('Connects to AirTribune Core API with REST endpoints.'),
      'tests' => array(
        'user_retrieve' => 'ClientsConnectionCoreGetUser',
        'users_retrieve' => 'ClientsConnectionCoreGetAllUsers',
        'user_token' => 'ClientsConnectionCoreGetUserToken',
        'sponsor_create' => 'ClientsConnectionATCoreCreateSponsor',
      ),
    ),
  );
}

/**
 * Implements hook_clients_default_connections().
 */
function clients_at_core_clients_default_connections() {
  $items = array();
  $items['connection'] = entity_import('clients_connection', '{
    "name" : "sponsor_connection",
    "endpoint" : "http://apidev.airtribune.com/v0.3/",
    "configuration" : {
      "debug" : 1
    },
    "label" : "Sponsor Connections",
    "type" : "drupal_rest_at_core",
    "rdf_mapping" : []
  }');
  return $items;
}

/**
 * Implements hook_clients_default_resources().
 */
function clients_at_core_clients_default_resources() {
  // Declare a remote entity resource for our entity type.
  // This identifies the entity type and the connection it uses.
  $items = array();
  $items['sponsor_entity'] = entity_import('clients_resource', '{
    "component" : "sponsor_entity",
    "connection" : "sponsor_connection",
    "name" : "sponsor_entity",
    "label" : "Sponsor Entity",
    "type" : "remote_entity",
    "configuration" : null,
    "rdf_mapping" : []
  }');
  return $items;
}

/**
 * Implements hook_entity_info().
 *
 * Define our remote profile.
 */
function clients_at_core_entity_info() {
  $return = array(
    'profile_remote' => array(
      'label' => t('Remote profile'),
      'plural label' => t('Remote profiles'),
      'description' => t('Profile2 user remote profiles.'),
      'entity class' => 'Profile',
      'controller class' => 'RemoteEntityAPIDefaultController',
      'base table' => 'profile_remote',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'pid',
        'bundle' => 'type',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      // Make use the class' label() and uri() implementation by default.
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'profile2_access',
      'module' => 'profile2',
      'metadata controller class' => 'RemoteProfileMetadataController',
      'view modes' => array(
        'account' => array(
          'label' => t('User account'),
          'custom settings' => FALSE,
        ),
      ),
      // Remote Entity API properties.
      'remote base table' => 'profile_remote_remote_entity',
      'property map' => array(),
      'remote entity keys' => array(
        // Map the key on the local entity to properties on the remote entity
        // which will be saved into the entity blob when saved to the local
        // database.
        'remote id' => 'remote_id',
      ),
      // TODO
      // 'remote entity unpack callback' => 'clients_at_core_unpack_callback',
    ),
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('profile_type', 'p')
    ->fields('p')
    ->execute()
    ->fetchAllAssoc('type');

  foreach ($types as $type => $info) {
    $return['profile_remote']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
//        'path' => 'admin/structure/profile_remotes/manage/%profile2_type',
//        'real path' => 'admin/structure/profile_remotes/manage/' . $type,
        'path' => 'admin/structure/profiles/manage/%profile2_type',
        'real path' => 'admin/structure/profiles/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer remote profiles'),
      ),
    );
  }

  return $return;
}

/**
 * Implements hook_schema_alter().
 */
function clients_at_core_schema_alter(&$schema) {
  module_load_install('remote_entity');
  $profile_remote = remote_entity_schema_table('profile_remote');

  $profile_remote['fields']['parent_id'] = array(
    'description' => 'The parent ID for remote entity. Usually specified in GUID-8, like pers-1234-12345678',
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => NULL,
  );

  unset($schema['profile_remote']['fields']['eid']);
  unset($schema['profile_remote']['primary key'][0]);

  $schema_profile = drupal_get_schema_unprocessed('profile2', 'profile');

  //$schema['profile_remote'] = array_merge_recursive($schema['profile_remote'], $schema_profile);
  // Function array_merge_recursive() merge not correct, so use this method.
  $schema_profile['fields'] += $schema['profile_remote']['fields'];
  $schema_profile['indexes'] += $schema['profile_remote']['indexes'];
  $schema_profile['unique keys'] = $schema['profile_remote']['unique keys'];

  $schema['profile_remote'] = $schema_profile;
  dpm($schema['profile_remote']);
  return $schema;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Alter profile2 entity, add stuff, related to Remote Entity.
 */
function clients_at_core_entity_info_alter(&$entity_info) {
  $profile_remote_additional = array(
    // Remote Entity API properties.
    'remote base table' => 'profile_remote',
    'property map' => array(),
    'remote entity keys' => array(
      // Map the key on the local entity to properties on the remote entity
      // which will be saved into the entity blob when saved to the local
      // database.
      'remote id' => 'remote_id',
    ),
    // 'remote entity unpack callback' => 'clients_at_core_unpack_callback',
  );

  // Change the controller class, base table, and other stuff.
  $entity_info['profile2']['controller class'] = 'RemoteEntityAPIDefaultController';
  $entity_info['profile2']['metadata controller class'] = 'RemoteProfileMetadataController';
  $entity_info['profile2']['base table'] = 'profile_remote';
  $entity_info['profile2'] += $profile_remote_additional;

  //dpm($entity_info, '$entity_info all');
  dpm($entity_info['profile2'], '$entity_info for profile2');
  //dpm($entity_info['profile_remote'], '$entity_info for profile_remote');
}