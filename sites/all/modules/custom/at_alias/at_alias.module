<?php

/**
 * See issue2686.
 * 
 * Accommodation aliases are updated in case:
 * - Accommodation added
 * - Accommodation deleted
 * - Accommodation name changed
 * - Event alias changed
 * 
 * Same for Activity
 */


// TODO: Move constants to airtribune.module
// Rewrite using Rules.

/**
 * Generic function for creating custom aliases.
 */
function _at_alias_create_alias($node) {
  //module_load_include('inc', 'pathauto');
  switch ($node->type) {
    // accommodation and activity alias
    case AIRTRIBUNE_ACCOMMODATION_TYPE :
    case AIRTRIBUNE_ACTIVITY_TYPE :
      _al_alias_create_object_aliases($node);
      break;
    
    // pg_contest alias
    case AIRTRIBUNE_PG_CONTEST_TYPE :
      // TODO: Move contents of the following function into the current one.
      _at_alias_create_event_objects_aliases($node);
      // TODO: Move alias generation from pg_contest feature
      break;
  }
  
  // TODO:
}

/**
 * Generic function for deleting custom aliases.
 */
function _at_alias_delete_alias($node) {
  
  switch ($node->type) {
    // accommodation and activity alias
    case AIRTRIBUNE_ACCOMMODATION_TYPE :
      $subalias = 'accommodations';
    case AIRTRIBUNE_ACTIVITY_TYPE :
      $subalias = empty($subalias) ? 'activities' : $subalias;
      //$pattern = "event/%/map/{$subalias}/{$node->nid}";
      $source = "event/%/map/{$node->nid}";
      $alias = "%/map/{$subalias}/%";
      
      // Delete accomodation aliases.
      db_delete('url_alias')
        ->condition('source', $source, 'LIKE')
        ->condition('alias', $alias, 'LIKE')
        ->execute();
      // TODO:
      break;
    
    
    // pg_contest alias
    case AIRTRIBUNE_PG_CONTEST_TYPE :
      // type => subalias
      /*
      $object_types = array('accommodations' => 'accommodations', 'activities' => 'activities');
      foreach ($object_types as $object_type => $subalias) {
        $source = "event/{$node->nid}/map/{$subalias}/%";
        db_delete('url_alias')
          ->condition('source', $source, 'LIKE')
          ->execute();
      }
      */
      $subaliases = array('accommodations', 'activities');
      foreach ($subaliases as $subalias) {
        $source = "event/{$node->nid}/map/{$subalias}/%";
        db_delete('url_alias')
          ->condition('source', $source, 'LIKE')
          ->execute();
      }
      
      // TODO: Move alias generation from pg_contest feature
      break;
  }
  
  // TODO: Add case check.
  // Remove case check from hook. Or change this one.

}

/**
 * Check if alias already exist
 * This is required for existing content in order not to regenerate them.
 */
function _at_alias_exists($pattern) {
  // TODO: Add case
  
  $query = db_select('url_alias', 'a')
    ->fields('a')
    ->condition('source', $pattern, 'LIKE')
    ->execute()
    ->fetchAll();
  return !empty($query);
  
}

/**
 * Helper function.
 * Prepare path for alias using pathauto functionality.
 */
function _at_alias_clear_string($string) {
  module_load_include('inc', 'pathauto');
  if (function_exists('pathauto_cleanstring') && !empty($string)) {
    $path = pathauto_cleanstring($string);
  }
  
  return !empty($path) ? $path : FALSE;
}

/**
 * Get related to accommodation events
 * based on their coordinates.
 */
// TODO: Move into a single function with related objects.
function _at_alias_related_events($node) {
  $object_types = array(AIRTRIBUNE_ACCOMMODATION_TYPE, AIRTRIBUNE_ACTIVITY_TYPE);
  if (!in_array($node->type, $object_types)) {
    // continue for accommodation/activity events
    return;
  }
  
  
  $nids = array();


  // TODO: this is for testing purposes. Should be removed.
  //$nids[] = 5438;


  $wrapper = entity_metadata_wrapper('node', $node);
  $location = $wrapper->{AIRTRIBUNE_LOCATION_FIELD}->value();
  
  $location_table = 'field_data_' . AIRTRIBUNE_HQ_LOCATION_FIELD;
  $sql = "SELECT location.* FROM $location_table location WHERE bundle = :bundle AND
  ST_Distance(ST_Point(location.field_hq_location_lon, field_hq_location_lat)::geography, ST_Point(:lon, :lat)::geography) < :distance";
  //ST_Distance(ST_Point(location.field_location_lon, field_location_lat)::geography, ST_Point(:lon, :lat)::geography) < :distance";
  
  
  // Get contest accomodation.
  $query = db_query($sql, array(
    ':bundle' => AIRTRIBUNE_PG_CONTEST_TYPE,
    ':lat' => $location['lat'],
    ':lon' => $location['lon'],
    ':distance' => 30000,
  ));
  
  $result = $query->fetchAll();
  
  
  //$nids = array();
  foreach ($result as $row) {
    $nids[] = $row->entity_id;
  }
  
  return $nids;
}

/**
 * Get accommodation and activities related to a given event
 * based on their coordinates.
 */
function _at_alias_related_objects($node, $object_type) {
  if ($node->type != AIRTRIBUNE_PG_CONTEST_TYPE) {
    return;
  }
  
  $nids = array();
  switch ($object_type) {
    case 'accommodations' :
     $bundle = AIRTRIBUNE_ACCOMMODATION_TYPE;
     //$nids[] = 5455;
     break;
    case 'activities' :
     $bundle = AIRTRIBUNE_ACTIVITY_TYPE;
     //$nids[] = 5456;
     break;
  }
  //return $nids;
  
  
  $wrapper = entity_metadata_wrapper('node', $node);
  $location = $wrapper->{AIRTRIBUNE_HQ_LOCATION_FIELD}->value();
  
  $location_table = 'field_data_' . AIRTRIBUNE_LOCATION_FIELD;
  $sql = "SELECT location.* FROM $location_table location WHERE bundle = :bundle AND
  ST_Distance(ST_Point(location.field_location_lon, field_location_lat)::geography, ST_Point(:lon, :lat)::geography) < :distance";
  
  // Get contest object.
  $query = db_query($sql, array(
    ':bundle' => $bundle,
    ':lat' => $location['lat'],
    ':lon' => $location['lon'],
    ':distance' => 30000,
  ));
  
  $result = $query->fetchAll();
  
  
  //$nids = array();
  foreach ($result as $row) {
    $nids[] = $row->entity_id;
  }
  
  return $nids;
}

/**
 * Create aliases for accommodations and activities
 * according to event coordinates.
 */
function _at_alias_create_event_objects_aliases($node) {
  
  module_load_include('inc', 'pathauto');
  
  // Get alias base.
  $alias_base = _at_alias_get_event_alias($node->nid);
  // Do nothing.
  if ($alias_base == FALSE) {
    return;
  }
  
  // Delete objects' aliases if any.
  // Actually we don't need to delete aliases if event is new.
  _at_alias_delete_alias($node);
  
  // type => subalias
  $object_types = array('accommodations' => 'accommodations', 'activities' => 'activities');
  
  foreach ($object_types as $object_type => $subalias) {
    //$object_nids = _at_alias_related_objects($node, 'accommodations');
    $object_nids = _at_alias_related_objects($node, $object_type);
    foreach ($object_nids as $nid) {
      // TODO: Create alias for object-event pair.
      $object_node = node_load($nid);
      if ($object_node->nid) {
        /*
        // Delete object alias if any.
        // Actually we don't need to delete aliases if event is new.
        $source = "event/{$node->nid}/map/{$subalias}/{$object_node->nid}";
        db_delete('url_alias')
          ->condition('source', $source, '=')
          ->execute();
        */
        
        //$source = "event/{$node->nid}/map/{$subalias}/{$object_node->nid}";
        $source = "event/{$node->nid}/map/{$object_node->nid}";
        // Create object new alias.
        // Clear title string to use as alias element.
        $clear_title = _at_alias_clear_string($object_node->title);
        if (!$clear_title) {
          return;
        }
        
        
        $alias = "{$alias_base}/map/{$subalias}/{$clear_title}";
        // Save object alias for given event.
        $path = array('source' => $source, 'alias' => $alias);
        path_save($path);
      }
    }
  }
  // TODO:
}

/**
 * Create aliases for single object (accommodation or activity).
 */
function _al_alias_create_object_aliases($node) {
      
  module_load_include('inc', 'pathauto');
  
  $subalias = '';
  switch ($node->type) {
    case AIRTRIBUNE_ACCOMMODATION_TYPE :
      $subalias = 'accommodations';
      break;
    case AIRTRIBUNE_ACTIVITY_TYPE :
      $subalias = 'activities';
      break;
  }
  
  // Do nothing.
  if (empty($subalias)) {
    return;
  }
  
  
  // If it is a newly created object, process further.
  if (!$node->is_new) {
    // -- Check if there exist already any aliases ("event/%/map/{$subalias}/{$node->nid}") for object.
    // Check if there exist already any aliases ("event/%/map/{$node->nid}") for object.
    //$pattern = "event/%/map/{$subalias}/{$node->nid}";
    $pattern = "event/%/map/{$node->nid}";
    $alias_exist = _at_alias_exists($pattern);
    $title_updated = ($node->title != $node->original->title);
    // If title wasn't updated and some aliases found, do nothing.
    // For example, for old object that existed before, we should create aliases.
    // TODO: Maybe add regeneration functionality.
    if ($alias_exist && !$title_updated) {
      return;
    }
    elseif ($alias_exist && $title_updated) {
      // TODO: If object (title) is UPDATED, remove existing aliases. Use $node->original
      _at_alias_delete_alias($node);
    }
  }
  
  
  // Get related events based on hq coordinates.
  $event_nids = _at_alias_related_events($node);
  foreach ($event_nids as $event_nid) {
    // Check if (event) base alias exists.
    $alias_base = _at_alias_get_event_alias($event_nid);
    if ($alias_base == FALSE) {
      return;
    }
    
    // Clear title string to use as alias element.
    $clear_title = _at_alias_clear_string($node->title);
    if (!$clear_title) {
      return;
    }
    
    $alias = "{$alias_base}/map/{$subalias}/{$clear_title}";
    
    // Save object alias for given event.
    //$source = "event/{$event_nid}/map/{$subalias}/{$node->nid}";
    $source = "event/{$event_nid}/map/{$node->nid}";
    $path = array('source' => $source, 'alias' => $alias);
    path_save($path);
  }
}

/**
 * Implements hook_node_insert.
 */
function at_alias_node_insert($node) {
  switch ($node->type) {
    // accommodation and activity alias
    case AIRTRIBUNE_ACCOMMODATION_TYPE :
    case AIRTRIBUNE_ACTIVITY_TYPE :
      // Create object aliases if needed.
      _at_alias_create_alias($node);
      break;
    
    // pg_contest alias
    case AIRTRIBUNE_PG_CONTEST_TYPE :
      // TODO: This should perform after alias is already created.
      // By the moment it's ok, scince hook_insert() (see pg_contest_insert)
      // is executed before hook_node_insert().
      
      _at_alias_create_alias($node);
      // TODO: Move alias generation from pg_contest feature
      break;
  }
}

/**
 * Implements hook_node_update.
 */
function at_alias_node_update($node) {
  switch ($node->type) {
    // accommodation and activity alias
    case AIRTRIBUNE_ACCOMMODATION_TYPE :
    case AIRTRIBUNE_ACTIVITY_TYPE :
      // Update accommodation aliases if needed.
      _at_alias_create_alias($node);
      break;
    
    // pg_contest alias
    case AIRTRIBUNE_PG_CONTEST_TYPE :
      // Create/Updated aliases for related objects.
      // TODO: See comment for hook_node_insert().
      _at_alias_create_alias($node);
      // TODO: Move alias generation from pg_contest feature
      break;
  }
}

/**
 * Implements hook_node_delete.
 */
function at_alias_node_delete($node) {
  switch ($node->type) {
    // accommodation and activity alias
    case AIRTRIBUNE_ACCOMMODATION_TYPE :
    case AIRTRIBUNE_ACTIVITY_TYPE :
      // Delete object alias.
      _at_alias_delete_alias($node);
      break;
    
    // pg_contest alias
    case AIRTRIBUNE_PG_CONTEST_TYPE :
      _at_alias_delete_alias($node);
      // TODO: Move alias generation from pg_contest feature
      break;
  }
}

/**
 * Implements hook_node_presave.
 */
function at_alias_node_presave($node) {
  // TODO:
}

/*
// TODO: This hook is for testing purposes only. Delete.
function at_alias_node_view($node) {
  return;
  // Output related objects
  if ($node->type == AIRTRIBUNE_ACCOMMODATION_TYPE && isset($_GET['test'])) {
    
    $wrapper = entity_metadata_wrapper('node', $node);
    $location = $wrapper->{AIRTRIBUNE_LOCATION_FIELD}->value();
    
    $location = array('lat' => '45.127683000000', 'lon' =>  '21.334920000000');
    
    
    $location_table = 'field_data_' . AIRTRIBUNE_HQ_LOCATION_FIELD;
    // TODO: Use constants for location.field_hq_location
    $sql = "SELECT location.* FROM $location_table location WHERE bundle = :bundle AND
    ST_Distance(ST_Point(location.field_hq_location_lon, field_hq_location_lat)::geography, ST_Point(:lon, :lat)::geography) < :distance";
    //ST_Distance(ST_Point(location.field_location_lon, field_location_lat)::geography, ST_Point(:lon, :lat)::geography) < :distance";
    
    
    // Get contest accomodation.
    $query = db_query($sql, array(
      ':bundle' => 'pg_contest',
      ':lat' => $location['lat'],
      ':lon' => $location['lon'],
      ':distance' => 30000,
    ));
    
    $result = $query->fetchAll();
    
    $nids = array();
    foreach ($result as $row) {
      $nids[] = $row->entity_id;
    }
  }
}
*/

/**
 * Helper function.
 * Get event alias by nid.
 */
function _at_alias_get_event_alias($nid) {
  // Check if (event) base alias exists.
  $source_base = "event/{$nid}";
  $conditions = array('source' => $source_base);
  $event_path = path_load($conditions);
  
  // Return FALSE if alias doesn't exist or is empty string.
  return !empty($event_path['alias']) ? $event_path['alias'] : FALSE;
}


// NOTES:
// If event's coordinates are signifintly changes, there could remain
// trash aliases for related accommodations (they won't be deleted).
