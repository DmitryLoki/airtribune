<?php

/**
 * NOTES:
 * If event's coordinates are signifintly changes, there could remain
 * trash aliases for related accommodations (they won't be deleted).
 */

// ***************************************
// Hooks (entity)
// ***************************************

/**
 * Implements hook_entity_insert.
 */
function at_alias_entity_insert($entity, $type) {
  
}

/**
 * Implements hook_entity_update.
 */
function at_alias_entity_update($entity, $type) {
  
}

//~ /**
 //~ * Implements hook_entity_presave.
 //~ */
//~ function at_alias_entity_presave($entity, $type) {
  //~ 
//~ }

/**
 * Implements hook_entity_delete.
 */
function at_alias_entity_delete($entity, $type) {
  
}



// ***************************************
// Hooks (node)
// ***************************************

/**
 * Implements hook_node_update.
 */
function at_alias_node_presave($node) {
  module_load_include('inc', 'at_alias', 'at_alias.event');
  _at_alias_substitute_event_node_path($node);
}

/**
 * Implements hook_node_insert.
 */
function at_alias_node_insert($node) {
  at_alias_node_hook_implementation('insert', $node);
}

/**
 * Implements hook_node_update.
 */
function at_alias_node_update($node) {
  at_alias_node_hook_implementation('update', $node);
}

/**
 * Implements hook_node_delete.
 */
function at_alias_node_delete($node) {
  at_alias_node_hook_implementation('delete', $node);
}




// ***************************************
// Helper functions
// ***************************************

function at_alias_node_hook_implementation($op, $node) {
  //~ return;
  module_load_include('inc', 'at_alias', 'at_alias.node');
  switch ($node->type) {
    case AIRTRIBUNE_ACCOMMODATION_TYPE :
    case AIRTRIBUNE_ACTIVITY_TYPE :
    case AIRTRIBUNE_DAY_TYPE:
      _at_alias_process_single_conjugate_node($op, $node);
      break;
    case AIRTRIBUNE_PG_CONTEST_TYPE :
      $event = $node;
      _at_alias_process_event_conjugate_nodes($op, $event, AIRTRIBUNE_ACCOMMODATION_TYPE);
      _at_alias_process_event_conjugate_nodes($op, $event, AIRTRIBUNE_ACTIVITY_TYPE);
      _at_alias_process_event_conjugate_nodes($op, $event, AIRTRIBUNE_DAY_TYPE);
      break;
  }
}

/**
 * This function is called from with node module hooks (e.g. hook_insert()).
 * 
 * @todo: maybe move into presave hook
 */
function at_alias_module_node_hook_implementation($op, $node) {
  module_load_include('inc', 'at_alias', 'at_alias.event');
  if ($node->type == AIRTRIBUNE_PG_CONTEST_TYPE) {
    _at_alias_process_event_pages($op, $node);
  }
}

/**
 * Helper function.
 * Prepare path for alias using pathauto functionality.
 */
function _at_alias_clear_string($string) {
  module_load_include('inc', 'pathauto');
  if (function_exists('pathauto_cleanstring') && !empty($string)) {
    $path = pathauto_cleanstring($string);
  }

  return !empty($path) ? $path : FALSE;
}

// ***************************************
// Hooks (misc)
// ***************************************


/**
 * Implements hook_form_node_form_alter().
 * 
 * Substitute node path.
 * @see at_alias_node_presave()
 * @todo: comment
 */
function at_alias_form_node_form_alter(&$form, $form_state, $form_id) {
  module_load_include('inc', 'at_alias', 'at_alias.event');
  
  // Set default path alias values for node form.
  // TODO: Make sure that this is always fired after path_form_node_form_alter().
  // @todo: Add content type check
  if (!empty($form['#node']->nid)) {
    $conditions = array('source' => 'event/' . $form['#node']->nid);
    $path = _at_alias_event_path_load($conditions);
    if (!empty($path)) {
      $form['path']['#collapsed'] = empty($path['alias']);
      $form['path']['alias']['#default_value'] = $path['alias'];
      $form['path']['pid']['#value'] = $path['pid'];
      $form['path']['source']['#value'] = $path['source'];
      $form['path']['language']['#value'] = $path['language'];
    }
  }
}

// @todo: Change module weight instead, not to call this hook every time.

/**
 * Implements hook_module_implements_alter().
 * 
 * We need $form['path'] to be already added by path.module
 */
function at_alias_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['at_alias'];
    unset($implementations['at_alias']);
    $implementations['at_alias'] = $group;
  }
}
