<?php

define('AT_RACE_FIELD_ENT_CONTEST_POINT', 'ent_contest_point');

/**
 * Implements hook_element_info().
 */
function at_race_element_info() {
  $types['pg_race_waypoint'] = array(
    '#input' => TRUE,
    '#process' => array('at_race_pg_race_waypoint_process'),
    '#value_callback' => 'at_race_pg_race_waypoint_value',
    //'#element_validate' => array('at_race_pg_race_waypoint_validate'),
    '#pre_render' => array('at_race_pg_race_waypoint_pre_render'),
    /*
    '#theme' => 'file_managed_file',
    '#theme_wrappers' => array('form_element'),
    */
  );
  
  return $types;
}

/**
 * Implements hook_theme().
 */
function at_race_theme() {
  return array(
    'at_waypoints_entityreference_widget_multiple' => array(
      'render element' => 'element',
    ),
  );
}

function at_race_ajax_callback($form, $form_state) {
  
  return $form['field_pg_race_points'];
}


/**
 * Implements hook_field_widget_info().
 */
function at_race_field_widget_info() {
  $widgets['at_waypoints_entityreference'] = array(
    'label' => t('Airtribune waypoints'),
    'description' => t('Waypoints reference table.'),
    'field types' => array('entityreference'),
    'settings' => array(),
    'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );
  return $widgets;
}

/**
 * Implements hook_field_widget_form().
 */
function at_race_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // TODO:
  $element['#type'] = 'pg_race_waypoint';
    
  $defaults = array(
    'target_id' => 0,
    'point_id' => 0,
  );
  
  $new_item_defaults = array(
    'target_id' => 1,
    //'point_id' => -1,
  );
  
  /*
  if (!empty($form_state['field_pg_race_points']['und'])) {
    $items = $form_state['field_pg_race_points']['und'];
    array_pop($items);
  }
  */
  $field_state = field_form_get_state($element['#field_parents'], $field['field_name'], $langcode, $form_state);//dsm($form_state);
  /*
  if (isset($field_state['items'])) {
    $items = $field_state['items'];
    //watchdog('items', count($items));
  }
  */
  
  $items_count = $field_state['items_count'];
  
  if (count($items) < $items_count) {
    $vals = $form_state['values']['field_pg_race_points']['und'];
    unset($vals['add_new_point']);
    $items = $vals;
    //dsm($items);
  }
  
  
  $add_new = count($items) < $items_count ? TRUE : FALSE;
  
  /*
  if (isset($form_state['triggering_element'])) {
  //if (isset($form_state['#add_new'])) {
    watchdog('widget', 'add new');
    $items[] = $new_item_defaults;
  }
  */
  if ($add_new) {
    $items[] = $new_item_defaults;
  }
  
  //$element_info = element_info('pg_race_waypoint');
  
  if ($field['cardinality'] == 1) {
    // TODO:
  }
  else {
    foreach ($items as $item) {
      
      $elements[$delta] = $element;
      $elements[$delta]['#default_value'] = $item;
      // set corresponding point_id
      
      // TODO: Add check for target_id
      if (empty($item['point_id'])) {
        //if (!empty($item['target_id'])) {
          $elements[$delta]['#default_value'] += _at_race_get_waypoint_data($item['target_id']);
        //}
        //$elements[$delta]['#components'] = _at_race_widget_components();
      }
      $elements[$delta]['#components'] = _at_race_widget_components();
      
      $elements[$delta]['#weight'] = $delta;
      $delta++;
    }
    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || $delta < $field['cardinality']) && empty($form_state['programmed'])) {
      
      // TODO:
      /*
      $elements[$delta] = $element;
      $elements[$delta]['#default_value'] = $defaults;
      $elements[$delta]['#weight'] = $delta;
      $elements[$delta]['#required'] = ($element['#required'] && $delta == 0);
      */
      
    }
    // TODO: Add defaults for new point
    
    $elements['#theme'] = 'at_waypoints_entityreference_widget_multiple';
    $elements['#theme_wrappers'] = array('fieldset');
    $elements['#process'] = array('at_race_field_widget_process_multiple');
  }
  
  return $elements;
}





function theme_at_waypoints_entityreference_widget_multiple($variables) {
  //dsm($variables);
  
  $element = $variables['element'];
  
  // Special ID and classes for draggable tables.
  $weight_class = $element['#id'] . '-weight';
  $table_id = $element['#id'] . '-table';
  
  // Build up a table of applicable fields.
  $headers = array();
  $headers[] = t('Name');
  $headers[] = t('Radius');
  $headers[] = t('SS/ES');
  $headers[] = t('Check');
  $headers[] = t('Weight');
  $headers[] = t('Delete');
  
  // Get our list of widgets in order (needed when the form comes back after
  // preview or failed validation).
  $widgets = array();
  foreach (element_children($element) as $key) {
    $widgets[] = &$element[$key];
  }
  usort($widgets, '_field_sort_items_value_helper');
  
  $rows = array();
  foreach ($widgets as $key => &$widget) {
    /*
    // TODO: Add file upload description if needed
    // Save the uploading row for last.
    if ($widget['#file'] == FALSE) {
      $widget['#title'] = $element['#file_upload_title'];
      $widget['#description'] = $element['#file_upload_description'];
      continue;
    }
    */
    //dsm($widget);
    // Save the uploading row for last.
    if (isset($widget['#type']) && $widget['#type'] == 'submit') {
    //if ($widget['#default_value']['target_id'] == 0) {
      continue;
    }
    
    
    // TODO: Change keys
    $name = drupal_render($widget['point_id']);
    $radius = drupal_render($widget['radius']);
    $ss_es = drupal_render($widget['ss_es']);
    $check = drupal_render($widget['check']);
    $delete = drupal_render($widget['remove_button']);
    
    /*
    // Render everything else together in a column, without the normal wrappers.
    $widget['#theme_wrappers'] = array();
    $information = drupal_render($widget);

    // Render the previously hidden elements, using render() instead of
    // drupal_render(), to undo the earlier hide().
    $operations = '';
    foreach ($operations_elements as $operation_element) {
      $operations .= render($operation_element);
    }
    */
    
    
    $widget['_weight']['#attributes']['class'] = array($weight_class);
    $weight = render($widget['_weight']);
    
    // TODO: tmp
    //$weight = rand();
    
    // Arrange the row with all of the rendered columns.
    $row = array();
    $row[] = $name;
    $row[] = $radius;
    $row[] = $ss_es;
    $row[] = $check;
    $row[] = $weight;
    $row[] = $delete;
    $rows[] = array(
      'data' => $row,
      'class' => isset($widget['#attributes']['class']) ? array_merge($widget['#attributes']['class'], array('draggable')) : array('draggable'),
    );
  }
  
  drupal_add_tabledrag($table_id, 'order', 'sibling', $weight_class);
  
  $output = '';
  $output = empty($rows) ? '' : theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => $table_id)));
  $output .= drupal_render_children($element);
  
  return $output;
}





/**
 * Process callback
 */
function at_race_pg_race_waypoint_process($element, &$form_state, $form) {
  
  if (isset($form_state['triggering_element']['#arg'])) {
    $form_state['rebuild'] = TRUE;
    //watchdog('rebuild', print_r($form_state['triggering_element'], 1));
    $form_state['#add_new'] = TRUE;
  }
  
  //dsm($element);
  $ajax_settings = array(
    'callback' => 'at_race_ajax_callback',
    //'wrapper' => $element['#id'] . '-ajax-wrapper',
    // TODO:
    //'wrapper' => 'edit-field-pg-race-points-und-ajax-wrapper',
    'wrapper' => 'pg-race-points-custom-ajax-wrapper',
    'effect' => 'fade',
  );
  
  $element['remove_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_remove_button',
    '#type' => 'submit',
    '#value' => t('Remove'),
    '#validate' => array(),
    //'#submit' => array('file_managed_file_submit'),
    // TODO: Comment #limit_validation_errors to avoid eck error (eck.entity.inc line 477)
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#submit' => array('at_race_add_button_submit'),
    '#weight' => -5,
  );
  
  //dsm($element);
  /*
  $element['add_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_add_button',
    '#type' => 'submit',
    '#value' => t('Add'),
    '#validate' => array(),
    //'#submit' => array('file_managed_file_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
    '#submit' => array('at_race_add_button_submit'),
    '#arg' => 'add_point',
  );
  */
  // TODO:
  // TODO: Rewrite "Add new" check
  //if ($element['#default_value']['target_id']){
  if ($element['#default_value']['point_id'] != 0){
    $element['point_id'] = array(
      '#type' => 'select',
      '#options' => $element['#components']['points'],
      '#default_value' => $element['#default_value']['point_id'],
    );
    $element['radius'] = array(
      '#type' => 'textfield',
      //'#default_value' => rand(1, 10),
      '#default_value' => $element['#default_value']['radius'],
      '#size' => 5,
    );
    $element['ss_es'] = array(
      '#type' => 'select',
      '#options' => $element['#components']['ss_es'],
      '#default_value' => $element['#default_value']['ss_es'],
    );
    $element['check'] = array(
      '#type' => 'select',
      '#options' => $element['#components']['check'],
      '#default_value' => $element['#default_value']['check'],
    );
    $element['target_id'] = array(
      '#type' => 'hidden',
      '#value' => $element['#default_value']['target_id'],
    );
  }
  
  return $element;
}

function at_race_add_button_submit($form, &$form_state) {
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  
  $element = drupal_array_get_nested_value($form, $parents);
  
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];
  
  
  if ($button_key == 'remove_button') {
    $elem_parents = $element['#parents'];
    $delta = array_pop($elem_parents);
  }
  elseif ($button_key == 'add_new_point') {
    
    $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
    $field_state['items_count']++;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
    
    /*
    $parents = array_slice($form_state['triggering_element']['#parents'], 0, -2);
    drupal_array_set_nested_value($form_state['input'], $parents, NULL);
    */
  }
  
  $form_state['rebuild'] = TRUE;
}

/**
 * Value callback
 */
function at_race_pg_race_waypoint_value($element, $input = FALSE, $form_state = array()) {
  // TODO:
  return 1;
}

function at_race_field_widget_process_multiple($element, &$form_state, $form) {
  // TODO:
  
  $element_children = element_children($element, TRUE);
  $count = count($element_children);
  
  
  foreach ($element_children as $delta => $key) {
    //dsm($element);
    // TODO: Add check for "Add new point" button"
    //if ($key != $element['#file_upload_delta']) {
    
    if ($element[$key]['#default_value']['point_id'] != 0) {
      //$description = _file_field_get_description_from_element($element[$key]);
      $element[$key]['_weight'] = array(
        '#type' => 'weight',
        //'#title' => $description ? t('Weight for @title', array('@title' => $description)) : t('Weight for new file'),
        '#title_display' => 'invisible',
        '#delta' => $count,
        '#default_value' => $delta,
      );
    }
        
    /*
    else {
      // The title needs to be assigned to the upload field so that validation
      // errors include the correct widget label.
      $element[$key]['#title'] = $element['#title'];
      $element[$key]['_weight'] = array(
        '#type' => 'hidden',
        '#default_value' => $delta,
      );
    }
    */
  }
  
  // Add a new wrapper around all the elements for Ajax replacement.
  //$element['#prefix'] = '<div id="' . $element['#id'] . '-ajax-wrapper">';
  // TODO:
  /*
    '#name' => implode('_', $element['#parents']) . '_add_button',
    '#type' => 'submit',
    '#value' => t('Add'),
    '#validate' => array(),
    //'#submit' => array('file_managed_file_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
    '#submit' => array('at_race_add_button_submit'),
    '#arg' => 'add_point', 
  */
  
  $element['add_new_point'] = array(
    '#type' => 'submit',
    '#value' => t('Add new point'),
    '#submit' => array('at_race_add_button_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => array(
      'callback' => 'at_race_ajax_callback',
      'wrapper' => 'pg-race-points-custom-ajax-wrapper',
      'effect' => 'fade',
    ),
    //'#arg' => 'add_point', 
  );
  
  $element['#prefix'] = '<div id="pg-race-points-custom-ajax-wrapper">';
  
  $element['#suffix'] = '</div>';
  
  
  return $element;
}

// *************************
// Pre Render
// *************************

function at_race_pg_race_waypoint_pre_render($element) {
  // If we already have a file, we don't want to show the upload controls.
  //if (!empty($element['#value']['target_id'])) {
  if ($element['#value']['point_id'] != 0) {
    $element['add_button']['#access'] = FALSE;
  }
  // If we don't already have a file, there is nothing to remove.
  else {
    $element['remove_button']['#access'] = FALSE;
  }
  return $element;
}

// *************************
// Helper functions
// *************************

// TODO:
/**
 * Get point id by waypoint entity_reference target_id
 */
function _at_race_get_waypoint_data($waypoint_id) {
  if (empty($waypoint_id)) {
    $waypoint_id = 1;
  }
  if (!empty($waypoint_id)) {
    // TODO: move to constants
    $entities = entity_load('ent_point', array($waypoint_id));
    $entity = array_shift($entities);
    $wrapper = entity_metadata_wrapper('ent_point', $entity);
    $point_entity = $wrapper->field_point_ref->value();
    $point_id = $point_entity->id;
    
    $data = array(
      'radius' => $wrapper->field_point_radius->value(),
      'check' => $wrapper->field_point_type->value(),
      'ss_es' => $wrapper->field_point_ss_es->value(),
      'point_id' => $point_entity->id,
    );
  }
  else {
    $data = array(
      'radius' => '0',
      'check' => -1,
      'ss_es' => -1,
      'point_id' => -1,
    );
  }
  
  return $data;
}

// TODO: Maybe this part could be optimized.
function _at_race_widget_components() {
  // Waypoint components
  //$abc = field_info_instance($entity_type, $field_name, $bundle_name);
  
  // SS/ES
  $field_point_ss_es = field_info_field('field_point_ss_es');
  $field_point_type = field_info_field('field_point_type');
  
  $components['ss_es'] = $field_point_ss_es['settings']['allowed_values'];
  $components['check'] = $field_point_type['settings']['allowed_values'];
  
  $components['points'] = _at_race_get_contest_points();
  return $components;
}

/**
 * Get points
 */
function _at_race_get_contest_points() {
  // TODO: Get points.
  $contest_id = 5364;
  $pointsQuery = new EntityFieldQuery();
  
  $query = $pointsQuery->entityCondition('entity_type', 'ent_contest_point')
                       ->entityCondition('bundle', 'contest_point')
                        ->fieldCondition('og_group_ref', 'target_id', $contest_id, '=');
  $result = $query->execute();
  
  $points_list = array();
  if (!empty($result['ent_contest_point'])) {
    $ids = array();
    foreach ($result['ent_contest_point'] as $object) {
      $ids[] = $object->id;
    }
    $entities = entity_load('ent_contest_point', $ids);
    
    foreach ($entities as $entity) {
      $points_list[$entity->id] = $entity->title;
    }
  }
  
  return $points_list;
}







// TMP
function at_race_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'eck__entity__form_edit_ent_racetype_pg_racetype_sr') {
    //$form['#after_build'][] = 'at_race_after_build';
  }
}

function at_race_after_build($form, $form_state) {
  //dsm($form_state);
  return $form;
}
