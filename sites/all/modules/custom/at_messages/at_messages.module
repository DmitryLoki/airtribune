<?php

// Email templates
define('AT_MSG_EMAIL_BODY_SIGNATURE', "

Happy landings!
Airtribune team");

// guest reg on event
define('AT_MSG_SITE_GUEST_REG_ON_EVENT_BEFORE_ACCOUNT_ACTIVE', 'Your registration for @event_name is almost finished.');
define('AT_MSG_SITE_GUEST_REG_ON_EVENT_AFTER_ACCOUNT_ACTIVE', 'Your registration for @event_name is completed. Follow your status on this page.');

// pilot reg on event
define('AT_MSG_SITE_PILOT_REG_ON_EVENT', 'You have been successfully registered for @event_name! Follow your status on this page.');
define('AT_MSG_EMAIL_SUBJ_PILOT_REG_AT_EVENT_MAIL_TO_PILOT', 'You have been successfully registered for @event_name!');
define('AT_MSG_EMAIL_BODY_PILOT_REG_AT_EVENT_MAIL_TO_PILOT', 'Dear @pilot_full_name!

You have been successfully registered for @event_name.

Follow your status changes on the <a href="@event_pilot_list_url">pilots list</a>.

For any questions related to @event_name, please contact directly the organizer:

@org_full_name
@org_email');


// notify org about new pilot
define('AT_MSG_EMAIL_SUBJ_PILOT_REG_AT_EVENT_MAIL_TO_ORG', '@pilot_full_name - new pilot registered for @event_name.');
define('AT_MSG_EMAIL_BODY_PILOT_REG_AT_EVENT_MAIL_TO_ORG', '@pilot_full_name is registered for @event_name.
<br />
<b>Registration details</b>
<br />

Email: <b>@pilot_email</b>
Name: <b>@pilot_name</b>
Surname: <b>@pilot_surname</b>
Gender: <b>@gender</b>
Date of birth: <b>@birthdate</b>
Nation: <b>@nation</b>
City: <b>@city</b>
Postal code: <b>@postal_code</b>
Address: <b>@address</b>
Mobile phone: <b>@pilot_phone</b>
FAI License number: <b>@fai_license_number</b>
CIVL ID: <b>@civl_id</b>
Pilot\'s number: <b>@contestant_number</b>
T-shirt size: <b>@t_shirt_size</b>
Paraglider manufacturer: <b>@paraglider_manufacturer</b>
Paraglider model: <b>@paraglider_model</b>
Paraglider color: <b>@paraglider_color</b>
Sponsors: <b>@sponsors</b>
Insurance company: <b>@insurance_company</b>
Insurance policy number: <b>@insurance_policy_number</b>
Full name in national alphabet: <b>@name_in_national_alphabet</b>
Person to contact in case of emergency: <b>@person_emergency</b>
Contact phone number in case of emergency: <b>@phone_emergency</b>
Blood type: <b>@blood_type</b>');


// notify user about password change
define('AT_MSG_EMAIL_SUBJ_USER_PASSWORD_CHANGE', 'Your password was changed.');
define('AT_MSG_EMAIL_BODY_USER_PASSWORD_CHANGE', 'Dear @fullname!

Your password has been changed.
If you did not initialize password change procedure, please contact support immediately.

You may use support@airtribune.com, or simply reply to this email.');


// messages in profile about mail change
define('AT_MSG_SITE_USER_MAIL_CHANGE_INFO', 'Your email is your login in the system. To change email you must enter your new email and password. Your email will be changed after confirmation.');
define('AT_MSG_SITE_USER_MAIL_CHANGE_CONFIRM_AT_24H', 'The change email procedure has been initialized. You have 24 hours to finish it. Further instructions have been sent to your new email address. Until you confirm your new email the old email address will be valid as your login in the system.');
define('AT_MSG_SITE_USER_MAIL_CHANGE_CONFIRMED', 'Your new email address is confirmed. This is your new login.');

// mail change link confirmation
define('AT_MSG_EMAIL_SUBJ_USER_MAIL_CHANGE_LINK_CONFIRM', 'Change email confirmation');
define('AT_MSG_EMAIL_BODY_USER_MAIL_CHANGE_LINK_CONFIRM', 'Dear %fullname!

To complete change email procedure please follow the link below.
@user_changemail_url

If this link is not used during 24 hours your current email will not be changed.');

// notify old mail address about mail change
define('AT_MSG_EMAIL_SUBJ_USER_MAIL_CHANGE_NOTIFY_OLD_MAIL', 'Your email has been changed');
define('AT_MSG_EMAIL_BODY_USER_MAIL_CHANGE_NOTIFY_OLD_MAIL', 'Dear %fullname!

Your email is confirmed and you may use it as your login now.');

// notify new mail address about successfully change
define('AT_MSG_EMAIL_SUBJ_USER_MAIL_CHANGE_NOTIFY_NEW_MAIL', 'Your email has been changed');
define('AT_MSG_EMAIL_BODY_USER_MAIL_CHANGE_NOTIFY_NEW_MAIL', 'Dear %fullname!

You have started change email procedure for your acсount using this email address:

%new_mail

If you haven’t, that means that some one else knows your password. Change your password immediately or contact the support service: support@airtribune.com');

// define('AT_MSG_SITE_', '');
// define('AT_MSG_EMAIL_SUBJ_', '');
// define('AT_MSG_EMAIL_BODY_', '');

function at_messages_init() {
  at_messages_msg_changer();
}

/*
 * Hide drupal messages or replace messages to our values
 */
function at_messages_msg_changer() {
  $hide_messages = array (
    'You have already registered this identity.' // hybridauth
  );
  $replace_messages = array (
    //'Some string' => 'Replaced string',
    'New identity added.' => 'Your Facebook account has been added successfully.', // hybridauth
    'A welcome message with further instructions has been sent to your e-mail address.' => 'Thank you for registration on Airtribune. Further instructions have been sent to your email.', // guest register
    'You have just used your one-time login link. Your account is now active.' => 'Congratulations! Your Airtribune account has been created.', // guest activate account by email link
    'You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.' => 'You just used one-time login-in link. You may reset your password now.', // user pass reset one-time link
    'Sorry, unrecognized username or password. <a href="/user/password">Have you forgotten your password?</a>' => 'The username or password you have entered is incorrect. <a href="/user/password">Forgot your password?</a>' // user pass recovery
  );
  if ($messages = drupal_get_messages()) {
    foreach($messages  as $type => $messages_by_type) {
      foreach($messages_by_type as $key => $message) {
        if (array_key_exists(t($message), $replace_messages)){
          $message = t($replace_messages[$message]);
        }
        // if current message not in message list, which we want to hide,
        // then again add this msg to drupal msg stack
        if (!in_array(t($message), $hide_messages)){
          drupal_set_message($message, $type);
        }
      }
    }
  }
}

function at_messages_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $form['#submit'][] = 'at_messages_register_at_event_submit';
  }
  if (($form_id == 'og_ui_confirm_subscribe')) {
    $form['#submit'][] = 'at_messages_register_at_event_submit';
  }
}

function at_messages_register_at_event_submit($form, &$form_state) {
  // TRUE if guest
  // FALSE if already registered & logged user
  $guest_registration_at_event = isset($form_state['multiform_id']) && $form_state['multiform_id'] == 'contest_registration_multiform'
    ? TRUE
    : FALSE;

  // prevent handling form on usual guest registration to site
  if (!$guest_registration_at_event && $form['#id'] == 'user-register-form') {
    return;
  }

  if ($guest_registration_at_event) {
    // some magic & dirty code
    // at guest registration with multiform, at user-register we have all info about user, but haven't contestant_number
    // at og-ui-confirm-subscribe we have contestant_number, but haven't
    // so we need to combine values from two form_states
    if ($form['#id'] == 'user-register-form') {
      global $form_state_guest_reg_on_event;
      $form_state_guest_reg_on_event = $form_state;
      return;
    }
    elseif ($form['#id'] == 'og-ui-confirm-subscribe') {
      global $form_state_guest_reg_on_event;
      $f = $form_state_guest_reg_on_event['values'];
      $user = $form_state_guest_reg_on_event['user'];
      $event = node_load($form_state['multiform']['#subforms']['og_ui_confirm_subscribe_0']['args'][1]);
      $contestant_number = $form_state['values']['field_contestant_number']['und'][0]['value'];
    }
  } else {
    // already registered user/pilot try to reg on event
    $f = $form_state['values'];
    $user = $form_state['user'];
    $event = node_load($f['gid']);
    $contestant_number = $f['field_contestant_number']['und'][0]['value'];
  }

  $event_name = trim($event->title);
  $event_pilot_list_url = drupal_get_path_alias('event/' . $event->nid . '/pilots');
  $organiser = user_load($event->uid);
  $organiser_profile = profile2_load_by_user($organiser);
  $organiser_full_name = $organiser_profile['main']->field_full_name['und'][0]['given'] . ' ' . $organiser_profile['main']->field_full_name['und'][0]['family'];

  $profile_main = $f['profile_main'];
  $profile_pilot = $f['profile_pilot'];

  $gender_list = array('male', 'female');
  $gender = $gender_list[$profile_main['field_gender']['und'][0]['value']];
  $birthday = format_date(strtotime($profile_main['field_birthdate']['und'][0]['value']), 'custom', 'd/m/Y');
  $nation = country_load($profile_pilot['field_address']['und'][0]['country'])->name;
  $pilot_full_name = $profile_main['field_full_name']['und'][0]['given'] . ' ' . $profile_main['field_full_name']['und'][0]['family'];

  $full_info = array(
    '@event_name' => $event_name,
    '@event_pilot_list_url' => $event_pilot_list_url,
    '@org_email' => $organiser->mail,
    '@org_full_name' => $organiser_full_name,
    '@pilot_email' => $user->mail,
    '@pilot_full_name' => $pilot_full_name,
    '@pilot_name' => $profile_main['field_full_name']['und'][0]['given'],
    '@pilot_surname' => $profile_main['field_full_name']['und'][0]['family'],
    '@gender' => $gender,
    '@birthdate' => $birthday,
    '@nation' => $nation,
    '@city' => $profile_pilot['field_address']['und'][0]['locality'],
    '@postal_code' => $profile_pilot['field_address']['und'][0]['postal_code'],
    '@address' => $profile_pilot['field_address']['und'][0]['thoroughfare'],
    '@pilot_phone' => $profile_pilot['field_phone']['und'][0]['full_number'],
    '@fai_license_number' => $profile_pilot['field_fai_license_number']['und'][0]['value'],
    '@civl_id' => $profile_pilot['field_civl_id']['und'][0]['value'],
    '@contestant_number' => $contestant_number,
    '@t_shirt_size' => $profile_pilot['field_t_shirt_size']['und'][0]['value'],
    '@paraglider_manufacturer' => $profile_pilot['field_paraglider_manufacturer']['und'][0]['value'],
    '@paraglider_model' => $profile_pilot['field_paraglider_model']['und'][0]['value'],
    '@paraglider_color' => $profile_pilot['field_paraglider_color']['und'][0]['value'],
    '@sponsors' => $profile_pilot['field_sponsors']['und'][0]['value'],
    '@insurance_company' => $profile_pilot['field_insurance_company']['und'][0]['value'],
    '@insurance_policy_number' => $profile_pilot['field_insurance_policy_number']['und'][0]['value'],
    '@name_in_national_alphabet' => $profile_pilot['field_name_in_national_alphabet']['und'][0]['value'],
    '@person_emergency' => $profile_pilot['field_person_name']['und'][0]['value'],
    '@phone_emergency' => $profile_pilot['field_person_phone']['und'][0]['full_number'],
    '@blood_type' => $profile_pilot['field_blood_type']['und'][0]['value'],
  );

  $mail_to_pilot = array(
    'subject' => t(AT_MSG_EMAIL_SUBJ_PILOT_REG_AT_EVENT_MAIL_TO_PILOT, $full_info),
    'message' => t(AT_MSG_EMAIL_BODY_PILOT_REG_AT_EVENT_MAIL_TO_PILOT . AT_MSG_EMAIL_BODY_SIGNATURE, $full_info)
  );
  $mail_to_org = array(
    'subject' => t(AT_MSG_EMAIL_SUBJ_PILOT_REG_AT_EVENT_MAIL_TO_ORG, $full_info),
    'message' => t(AT_MSG_EMAIL_BODY_PILOT_REG_AT_EVENT_MAIL_TO_ORG . AT_MSG_EMAIL_BODY_SIGNATURE, $full_info)
  );

  if ($guest_registration_at_event) {
    if (!empty($contestant_number)) {
      // hide messages about successful registration at site
      drupal_set_message();
      // show message 'registration is almost finished, check mail'
      drupal_set_message(t(AT_MSG_SITE_GUEST_REG_ON_EVENT_BEFORE_ACCOUNT_ACTIVE, $full_info));
      // try to save mails about pilot registration
      $mail_dir = drupal_realpath('public://') . '/mail';
      if (!realpath($mail_dir)) {
        drupal_mkdir($mail_dir);
      }
      file_put_contents($mail_dir . '/' . $user->uid . '_to_pilot.mail', serialize($mail_to_pilot));
      file_put_contents($mail_dir . '/' . $user->uid . '_to_org.mail', serialize($mail_to_org));
      // after form sending drupal generate one-time password reset link, which will be sended to user by email
      // when user click this link & activate account, we send
    }
  } else {
    drupal_set_message(t(AT_MSG_SITE_PILOT_REG_ON_EVENT, $full_info));
    $mail_pilot = drupal_mail('system', 'mail', $user->mail, user_preferred_language($user), array('context' => $mail_to_pilot));
    $mail_org = drupal_mail('system', 'mail', $organiser->mail, user_preferred_language($organiser), array('context' => $mail_to_org));
    $form_state['redirect'] = $event_pilot_list_url;
  }

//  dpm($form, 'form');
//  dpm($form_state, 'form_state');
//  dpm($event, 'event');
//  dpm($user, 'user');
//  dpm($profile_main, 'profile_main');
//  dpm($profile_pilot, 'profile_pilot');
//  dpm($organiser, 'organiser');
//  dpm($organiser_profile, 'organiser_profile');
//  dpm($full_info, 'full_info');
//  dpm($mail_pilot, 'mail_pilot');
//  dpm($mail_org, 'mail_org');

}