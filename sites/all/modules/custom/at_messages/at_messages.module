  <?php

// Email templates
define('AT_MSG_EMAIL_BODY_SIGNATURE', "

Happy landings!
Airtribune team");

// guest reg on event
define('AT_MSG_SITE_GUEST_REG_ON_EVENT_BEFORE_ACCOUNT_ACTIVE', 'Your registration for @event_name is almost finished.');
define('AT_MSG_SITE_GUEST_REG_ON_EVENT_AFTER_ACCOUNT_ACTIVE', 'Your registration for @event_name is completed. Follow your status on this page.');

// pilot reg on event
define('AT_MSG_SITE_PILOT_REG_ON_EVENT', 'You have been successfully registered for @event_name! Follow your status on this page.');
define('AT_MSG_EMAIL_SUBJ_PILOT_REG_AT_EVENT_MAIL_TO_PILOT', 'You have been successfully registered for @event_name!');
define('AT_MSG_EMAIL_BODY_PILOT_REG_AT_EVENT_MAIL_TO_PILOT', 'Dear @pilot_full_name!

You have been successfully registered for @event_name.

Follow your status changes on the <a href="@event_pilot_list_url">pilots list</a>.

For any questions related to @event_name, please contact directly the organizer:

@org_full_name
@org_email');


// notify org about new pilot
define('AT_MSG_EMAIL_SUBJ_PILOT_REG_AT_EVENT_MAIL_TO_ORG', '@pilot_full_name - new pilot registered for @event_name.');
define('AT_MSG_EMAIL_BODY_PILOT_REG_AT_EVENT_MAIL_TO_ORG', '@pilot_full_name is registered for @event_name.
<br />
<b>Registration details</b>
<br />

Email: <b>@pilot_email</b>
Name: <b>@pilot_name</b>
Surname: <b>@pilot_surname</b>
Gender: <b>@gender</b>
Date of birth: <b>@birthdate</b>
Nation: <b>@nation</b>
City: <b>@city</b>
Postal code: <b>@postal_code</b>
Address: <b>@address</b>
Mobile phone: <b>@pilot_phone</b>
FAI License number: <b>@fai_license_number</b>
CIVL ID: <b>@civl_id</b>
Pilot\'s number: <b>@contestant_number</b>
T-shirt size: <b>@t_shirt_size</b>
Paraglider manufacturer: <b>@paraglider_manufacturer</b>
Paraglider model: <b>@paraglider_model</b>
Paraglider color: <b>@paraglider_color</b>
Sponsors: <b>@sponsors</b>
Insurance company: <b>@insurance_company</b>
Insurance policy number: <b>@insurance_policy_number</b>
Full name in national alphabet: <b>@name_in_national_alphabet</b>
Person to contact in case of emergency: <b>@person_emergency</b>
Contact phone number in case of emergency: <b>@phone_emergency</b>
Blood type: <b>@blood_type</b>');


// notify user about password change
define('AT_MSG_EMAIL_SUBJ_USER_PASSWORD_CHANGE', 'Your password was changed.');
define('AT_MSG_EMAIL_BODY_USER_PASSWORD_CHANGE', 'Dear @fullname!

Your password has been changed.
If you did not initialize password change procedure, please contact support immediately.

You may use support@airtribune.com, or simply reply to this email.');


// messages in profile about mail change
define('AT_MSG_SITE_USER_MAIL_CHANGE_CONFIRMED', 'Your new email address is confirmed. This is your new login.');

// define('AT_MSG_SITE_', '');
// define('AT_MSG_EMAIL_SUBJ_', '');
// define('AT_MSG_EMAIL_BODY_', '');

// notify about approve teamleader
define('AT_MSG_EMAIL_SUBJ_APPROVE_TEAMLEADER', 'Your application as a team leader is approved by the organizer of @event_name');
define('AT_MSG_EMAIL_BODY_APPROVE_TEAMLEADER', 'Dear @fullname,

You are approved by organizer  of @event_name as a team leader of @country.
To register your team please login  and follow the link @event_manage_team_link

Best regards,
Airtribune.com');

define('AT_MSG_EMAIL_SUBJ_REGISTER_TEAMLEADER_TO_ORG', '@country Team Leader request');
define('AT_MSG_EMAIL_BODY_REGISTER_TEAMLEADER_TO_ORG', 'Dear @organizer_fullname,

@teamleader_fullname has declared himself as a team leader of @country for @event_name.
To approve Team Leaders, visit @event_manage_team_link

Best regards,
Airtribune.com');

// notyfy about teamleader is registred
define('AT_MSG_EMAIL_SUBJ_REGISTER_TEAMLEADER_TO_TEAMLEADER', 'Team Leader registration');
define('AT_MSG_EMAIL_BODY_REGISTER_TEAMLEADER_TO_TEAMLEADER', 'Dear @teamleader_fullname,

You have applied to be a Team leader of @country for @event_name.
After you are approved by organizer, you will get a confirmation email.
You will be able to register your team after you are approved.

Best regards,
Airtribune.com');

// notify about 
define('AT_MSG_EMAIL_SUBJ_TEAM_CHANGE', 'Team @country changed');
define('AT_MSG_EMAIL_BODY_TEAM_CHANGE', 'Dear, @organizer_fullname

The team leader of @country for for @event_name has saved changes in Team Registration Form. 

Team @country @event_manage_team_link

Best regards,
Airtribune.com');

function at_messages_init() {
  at_messages_msg_changer();
}

/*
 * Hide drupal messages or replace messages to our values
 */
function at_messages_msg_changer() {
  $hide_messages = array(
    'You have already registered this identity.' // hybridauth
  );
  $replace_messages = array(
    //'Some string' => 'Replaced string',
    'New identity added.' => 'Your Facebook account has been added successfully.',
    // hybridauth
    'A welcome message with further instructions has been sent to your e-mail address.' => 'Thank you for registration on Airtribune. Further instructions have been sent to your email.',
    // guest register
    'You have just used your one-time login link. Your account is now active.' => 'Congratulations! Your Airtribune account has been created.',
    // guest activate account by email link
    'You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.' => 'You just used one-time login-in link. You may reset your password now.',
    // user pass reset one-time link
    'Sorry, unrecognized username or password. <a href="/user/password">Have you forgotten your password?</a>' => 'The username or password you have entered is incorrect. <a href="/user/password">Forgot your password?</a>',
    // user pass recovery
    'A confirmation email has been sent to your new email address. You must follow the link provided in that email within 24 hours in order to confirm the change to your account email address.' => 'The change email procedure has been initialized. You have 24 hours to finish it. Further instructions have been sent to your new email address. Until you confirm your new email the old email address will be valid as your login in the system.',
    // email_change init procedure
    'Your e-mail address is now %mail.' => AT_MSG_SITE_USER_MAIL_CHANGE_CONFIRMED,
  );
  if ($messages = drupal_get_messages()) {
    foreach ($messages as $type => $messages_by_type) {
      foreach ($messages_by_type as $key => $message) {
        if (array_key_exists(t($message), $replace_messages)) {
          $message = t($replace_messages[$message]);
        }
        // if current message not in message list, which we want to hide,
        // then again add this msg to drupal msg stack
        if (!in_array(t($message), $hide_messages)) {
          drupal_set_message($message, $type);
        }
      }
    }
  }
}

function at_messages_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array('user_register_form', 'og_ui_confirm_subscribe', 'profile2_edit_main_form', 'profile2_edit_pilot_form'))) {
    $form['#submit'][] = 'at_messages_register_at_event_submit';
  }
  //~ if ($form_id == 'user_register_form') {
    //~ $form['#submit'][] = 'at_messages_register_at_event_submit';
  //~ }
  //~ if (($form_id == 'og_ui_confirm_subscribe')) {
    //~ $form['#submit'][] = 'at_messages_register_at_event_submit';
  //~ }
  //~ if (($form_id == 'profile2_edit_main_form')) {
    //~ $form['#submit'][] = 'at_messages_register_at_event_submit';
  //~ }
  //~ if (($form_id == 'profile2_edit_pilot_form')) {
    //~ $form['#submit'][] = 'at_messages_register_at_event_submit';
  //~ }
}

function at_messages_register_at_event_submit($form, &$form_state) {
  
  $is_multiform = !empty($form_state['#multiform_settings']['#multiform_id']) ? TRUE : FALSE;
  if (!$is_multiform) {
    return;
  }
  
  $multiform_id = $form_state['#multiform_settings']['#multiform_id'];
  if (!in_array($multiform_id, array('contest_registration_authorized', 'contest_registration_anonymous'))) {
    return;
  }
  
  global $registration_at_event_form_state;
  
  $guest_registration_at_event = ($multiform_id == 'contest_registration_anonymous') ? TRUE : FALSE;
  
  
  $continue = FALSE;
  $key = '';
  if ($guest_registration_at_event) {
    switch ($form['#id']) {
      case 'user-register-form' :
        $key = 'user_register_form';
        break;
      case 'og-ui-confirm-subscribe' :
        $key = 'og_ui_confirm_subscribe';
        break;
      case 'profile2-edit-pilot-form' :
        $key = 'profile2_edit_pilot_form';
        $continue = TRUE;
        break;
    }
  }
  else {
    switch ($form['#id']) {
      case 'profile2-edit-main-form' :
        $key = 'profile2_edit_main_form';
        break;
      case 'og-ui-confirm-subscribe' :
        $key = 'og_ui_confirm_subscribe';
        break;
      case 'profile2-edit-pilot-form' :
        $key = 'profile2_edit_pilot_form';
        $continue = TRUE;
        break;
    }
  }
  
  // Store subform's form_state in global variable.
  if (!empty($key)) {
    $registration_at_event_form_state[$key] = $form_state;
  }
  
  // Continue only on last subform
  if (!$continue) {
    return;
  }
  
  if ($guest_registration_at_event) {
    $user = $registration_at_event_form_state['user_register_form']['user'];
    $event_nid = $registration_at_event_form_state['og_ui_confirm_subscribe']['build_info']['args'][1];
    $event = node_load($event_nid);
    $contestant_number = $registration_at_event_form_state['og_ui_confirm_subscribe']['values']['field_contestant_number']['und'][0]['value'];
    
    $profile_main = $registration_at_event_form_state['user_register_form']['values']['profile_main'];
    // TODO: There should be 'values' instead of 'input'
    $profile_pilot = $registration_at_event_form_state['profile2_edit_pilot_form']['input']['profile_pilot'];
    
      // TODO:
    $gender_list = array('male', 'female');
    $gender = $gender_list[$profile_main['field_gender']['und'][0]['value']];
  }
  else {
    //
    global $user;
    $event_nid = $registration_at_event_form_state['og_ui_confirm_subscribe']['build_info']['args'][1];
    $event = node_load($event_nid);
    $contestant_number = $registration_at_event_form_state['og_ui_confirm_subscribe']['values']['field_contestant_number']['und'][0]['value'];
    
    $profile_main = $registration_at_event_form_state['profile2_edit_main_form']['input']['profile_main'];
    $profile_pilot = $registration_at_event_form_state['profile2_edit_pilot_form']['input']['profile_pilot'];
    
    // TODO:
    $gender_list = array('male', 'female');
    $gender = $gender_list[$profile_main['field_gender']['und']];
  }
  
  
  $event_name = trim($event->title);
  $event_pilot_list_url = drupal_get_path_alias('event/' . $event->nid . '/pilots');
  $organiser = user_load($event->uid);
  $organiser_full_name = get_full_name($organiser);

  //~ $gender_list = array('male', 'female');  // TODO:
  //~ $gender = $gender_list[$profile_main['field_gender']['und'][0]['value']];

  $d = $profile_main['field_birthdate']['und'][0]['value'];
  $birthday = $d['day'] . '/' . $d['month'] . '/' . $d['year'];
  //~ $birthday = date_format_date($profile_main['field_birthdate']['und'][0]['value'], 'custom', 'd/m/Y');
  $nation = country_load($profile_pilot['field_address']['und'][0]['country'])->name;
  $pilot_full_name = $profile_main['field_full_name']['und'][0]['given'] . ' ' . $profile_main['field_full_name']['und'][0]['family'];

  $full_info = array(
    '@event_name' => $event_name,
    '@event_pilot_list_url' => $event_pilot_list_url,
    '@org_email' => $organiser->mail,
    '@org_full_name' => $organiser_full_name,
    '@pilot_email' => $user->mail,
    '@pilot_full_name' => $pilot_full_name,
    '@pilot_name' => $profile_main['field_full_name']['und'][0]['given'],
    '@pilot_surname' => $profile_main['field_full_name']['und'][0]['family'],
    '@gender' => $gender,
    '@birthdate' => $birthday,
    '@nation' => $nation,
    '@city' => $profile_pilot['field_address']['und'][0]['locality'],
    '@postal_code' => $profile_pilot['field_address']['und'][0]['postal_code'],
    '@address' => $profile_pilot['field_address']['und'][0]['thoroughfare'],
    '@pilot_phone' => $profile_pilot['field_phone']['und'][0]['full_number'],
    '@fai_license_number' => $profile_pilot['field_fai_license_number']['und'][0]['value'],
    '@civl_id' => $profile_pilot['field_civl_id']['und'][0]['value'],
    '@contestant_number' => $contestant_number,
    //~ '@t_shirt_size' => $profile_pilot['field_t_shirt_size']['und'][0]['value'],
    '@t_shirt_size' => $profile_pilot['field_t_shirt_size']['und'],  // TODO: This is because 'input' is used instead of values.
    '@paraglider_manufacturer' => $profile_pilot['field_paraglider_manufacturer']['und'][0]['value'],
    '@paraglider_model' => $profile_pilot['field_paraglider_model']['und'][0]['value'],
    '@paraglider_color' => $profile_pilot['field_paraglider_color']['und'][0]['value'],
    '@sponsors' => $profile_pilot['field_sponsors']['und'][0]['value'],
    '@insurance_company' => $profile_pilot['field_insurance_company']['und'][0]['value'],
    '@insurance_policy_number' => $profile_pilot['field_insurance_policy_number']['und'][0]['value'],
    '@name_in_national_alphabet' => $profile_pilot['field_name_in_national_alphabet']['und'][0]['value'],
    '@person_emergency' => $profile_pilot['field_person_name']['und'][0]['value'],
    '@phone_emergency' => $profile_pilot['field_person_phone']['und'][0]['full_number'],
    //~ '@blood_type' => $profile_pilot['field_blood_type']['und'][0]['value'],
    '@blood_type' => $profile_pilot['field_blood_type']['und'],  // TODO: See comment for t_shirt_size.
  );

  $mail_to_pilot = array(
    'subject' => t(AT_MSG_EMAIL_SUBJ_PILOT_REG_AT_EVENT_MAIL_TO_PILOT, $full_info),
    'message' => t(AT_MSG_EMAIL_BODY_PILOT_REG_AT_EVENT_MAIL_TO_PILOT . AT_MSG_EMAIL_BODY_SIGNATURE, $full_info)
  );
  $mail_to_org = array(
    'subject' => t(AT_MSG_EMAIL_SUBJ_PILOT_REG_AT_EVENT_MAIL_TO_ORG, $full_info),
    'message' => t(AT_MSG_EMAIL_BODY_PILOT_REG_AT_EVENT_MAIL_TO_ORG . AT_MSG_EMAIL_BODY_SIGNATURE, $full_info)
  );

  if ($guest_registration_at_event) {
    if (!empty($contestant_number)) {
      // hide messages about successful registration at site
      drupal_set_message();
      // show message 'registration is almost finished, check mail'
      drupal_set_message(t(AT_MSG_SITE_GUEST_REG_ON_EVENT_BEFORE_ACCOUNT_ACTIVE, $full_info));
      // try to save mails about pilot registration
      $mail_dir = drupal_realpath('public://') . '/mail';
      if (!realpath($mail_dir)) {
        drupal_mkdir($mail_dir);
      }
      file_put_contents($mail_dir . '/' . $user->uid . '_to_pilot.mail', serialize($mail_to_pilot));
      file_put_contents($mail_dir . '/' . $user->uid . '_to_org.mail', serialize($mail_to_org));
      // after form sending drupal generate one-time password reset link, which will be sended to user by email
      // when user click this link & activate account, we send
    }
  }
  else {
    drupal_set_message(t(AT_MSG_SITE_PILOT_REG_ON_EVENT, $full_info));
    $mail_pilot = drupal_mail('system', 'mail', $user->mail, user_preferred_language($user), array('context' => $mail_to_pilot));
    $mail_org = drupal_mail('system', 'mail', $organiser->mail, user_preferred_language($organiser), array('context' => $mail_to_org));
    $form_state['redirect'] = $event_pilot_list_url;
  }

//  dpm($form, 'form');
//  dpm($form_state, 'form_state');
//  dpm($event, 'event');
//  dpm($user, 'user');
//  dpm($profile_main, 'profile_main');
//  dpm($profile_pilot, 'profile_pilot');
//  dpm($organiser, 'organiser');
//  dpm($organiser_profile, 'organiser_profile');
//  dpm($full_info, 'full_info');
//  dpm($mail_pilot, 'mail_pilot');
//  dpm($mail_org, 'mail_org');

}

/**
 * Send message for approved teamleader.
 *
 * @param array $options - array of options:
 *     -replacements (array)
 *        -@fullname - name of recipient
 *        -@event_name - name of event
 *        -@event_manage_team_link - link to team manage pge
 *        -@country - country name
 *     -user - user object
 */
function at_messages_send_mail_approve_teamleader($options) {
  $user = $options['user'];
  $mail = array(
    'subject' => t(AT_MSG_EMAIL_SUBJ_APPROVE_TEAMLEADER, $options['replacements']),
    'message' => t(AT_MSG_EMAIL_BODY_APPROVE_TEAMLEADER, $options['replacements'])
  );
  $mail_send = drupal_mail('system', 'mail', $user->mail, user_preferred_language($user), array('context' => $mail));
}

/**
 * Send message for approved teamleader.
 *
 * @param array $options - array of options:
 *     -replacements (array)
 *        -@organizer_fullname - name of recipient
 *        -@event_name - name of event
 *        -@event_manage_team_link - link to team manage pge
 *        -@country - country name
 *     -user - user object
 */
function at_messages_send_mail_change_team($options) {
  $user = $options['user'];
  $mail = array(
    'subject' => t(AT_MSG_EMAIL_SUBJ_TEAM_CHANGE, $options['replacements']),
    'message' => t(AT_MSG_EMAIL_BODY_TEAM_CHANGE, $options['replacements'])
  );
  $mail_send = drupal_mail('system', 'mail', $user->mail, user_preferred_language($user), array('context' => $mail));
}

/**
 * Send message when team leader is registered.
 *
 * @param string $target - 'teamleader' or 'organizer'
 *
 * @param array $options - array of options:
 *     -replacements (array)
 *        -@teamleader_fullname
 *        -@organizer_fullname
 *        -@event_name
 *        -@event_manage_team_link
 *        -@country
 *     -user
 */
function at_messages_send_mail_register_teamleader($target, $options) {
  $mail = array();
  $user = $options['user'];
  switch ($target) {
    case 'teamleader':
      $mail = array(
        'subject' => t(AT_MSG_EMAIL_SUBJ_REGISTER_TEAMLEADER_TO_TEAMLEADER, $options['replacements']),
        'message' => t(AT_MSG_EMAIL_BODY_REGISTER_TEAMLEADER_TO_TEAMLEADER, $options['replacements'])
      );
      break;
    case 'organizer':
      $mail = array(
        'subject' => t(AT_MSG_EMAIL_SUBJ_REGISTER_TEAMLEADER_TO_ORG, $options['replacements']),
        'message' => t(AT_MSG_EMAIL_BODY_REGISTER_TEAMLEADER_TO_ORG, $options['replacements'])
      );
      break;


  }
  if (!empty($mail)) {
    $mail_send = drupal_mail('system', 'mail', $user->mail, user_preferred_language($user), array('context' => $mail));
  }
}