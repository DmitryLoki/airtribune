<?php

// TODO: Move common generic plugins alter into def submodule (def_extra).

function cde_menu() {
  $items['cde/test/%'] = array(
   'title' => 'CDE Test', 
    'page callback' => 'cde_test',
    'page arguments' => array(2),
    'access callback' => TRUE, 
    //'file' => 'abc.tmp.inc',
  );
  
  $items['event/%node/register'] = array(
   'title' => 'CDE Test', 
    'page callback' => 'cde_test2',
    'page arguments' => array(2),
    'access callback' => 'cde_access',
    'access arguments' => array(2),
    //'file' => 'abc.tmp.inc',
  );
  return $items;
}

function cde_test2($node) {
  $nid = $node->nid;
  return cde_test($nid);
}

function cde_test($nid) {
  global $user;
  
  // TODO: Temporary event id
  $nid = 5438;
  $form = $user->uid ? cde_form_authorized($nid) : cde_form_anonymous($nid);
  //dsm($form);
  return $form;
}


// TODO: Check conditions.
/**
 * Access callback for event registration page.
 */
function cde_access($node) {
  $etid = $node->nid;
  global $user;
  
  $entity_type = 'node';
  
  if (airtribune_how_time_after_event_start($etid) >= 2) {
    return FALSE;
  }

  $entity = entity_load_single($entity_type, $etid);
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  if (!og_user_access($entity_type, $id, 'subscribe', $user) && !og_user_access($entity_type, $id, 'subscribe without approval', $user)) {
    return FALSE;
  }

  if ($user->uid) {

    if (og_is_member($entity_type, $id, 'user', $user, array(OG_STATE_ACTIVE))
      || og_is_member($entity_type, $id, 'user', $user, array(OG_STATE_PENDING))
      || og_is_member($entity_type, $id, 'user', $user, array(OG_STATE_BLOCKED))
    ) {

      return FALSE;
    }
  }


  return TRUE;
}

function cde_form_anonymous($nid) {
  module_load_include('inc', 'og_ui', 'og_ui.pages');
  module_load_include('inc', 'cde');
  
  module_load_include('module', 'profile2');
  
  global $user;
  
  // profile2_form()
  module_load_include('inc', 'profile2', 'contrib/profile2_page');
  
  // TODO: Maybe move into abc_get_form().
  // Why do we need this flag?
  // Inform hook_js_alter() that multiform is processed.
  //~ drupal_add_js(array('cde' => array('multiform_id' => 'multiform')), 'setting');
  
  // TODO: Included file should be overriden in case of custom callback.
  // See def comment in def_ajax_defaults().
  drupal_add_js(drupal_get_path('module', 'cde') .'/js/cde.js', 'file');
  
  $profile2_init_data = cde_profile_form_init_data();
  //dsm($profile2_init_data);
  
  // TODO: Maybe use #array_parents instead of #parents in order not to confuse.
  $settings = array(
    '#multiform_id' => 'contest_registration_anonymous',
    '#subforms' => array(
      array(
        'form_id' => 'user_register_form',
        '#before_execute' => array('cde_user_register_before_execute'),
        '#after_execute' => array('cde_user_register_after_execute'),
        '#map' => array(
          // TODO:
          array(
            '#parents' => array('actions', 'submit'),
            '#triggering_submit' => array('register'),
          ),
        ),
      ),
      array(
        'form_id' => 'og_ui_confirm_subscribe',
        'args' => cde_og_form_args($nid),
        '#map' => array(
          // TODO:
          array(
            '#parents' => array('actions', 'submit'),
            '#triggering_submit' => array('register'),
          ),
        ),
      ),
      
      array(
        //'form_id' => 'entity_ui_get_form',
        'form_id' => $profile2_init_data['form_id'],
        //'args' => cde_profile_form_args(),
        'args' => $profile2_init_data['args'],
        '#preprocess_form_state' => array('cde_profile2_form_preprocess_form_state'),
        '#map' => array(
          // TODO:
          array(
            '#parents' => array('actions', 'submit'),
            '#triggering_submit' => array('register'),
          ),
        ),
      ),
      
    ),
    '#submit_map' => array(
      '#submits' => array(
        'register' => array(
          '#type' => 'submit',
          '#value' => t('Multiform register'),
        ),
      ),
    ),
  );
  
  //$args = cde_profile_form_args();
  //dsm($args);
  //dsm(entity_ui_get_form($args[0], $args[1]));
  return abc_get_form($settings);
}

/**
 * Add list of generic elements to validate.
 */
function cde_form_alter(&$form, &$form_state, $form_id) {
  $def_generic_elements = array();
  
  // TODO: Add only for forms with enabled validation.
  switch ($form_id) {
    case 'user_register_form' :
      $def_generic_elements[] = array('account', 'mail');
      break;
  }
  
  def_add_generic_elements($form_state, $def_generic_elements);
}


/**
 * Implements hook_def_form_after_build().
 */
function cde_def_form_after_build($form, &$form_state) {
  if (!empty($form_state['build_info']['form_id'])) {
    if ($form_state['build_info']['form_id'] == 'user_register_form') {
      $form['account']['mail']['#element_validate'][] = 'cde_mail_validate';
    }
  }
  return $form;
}

function cde_mail_validate($element, &$form_state) {
  //$mail = trim($form_state['values']['mail']);
  //form_set_value($form['account']['mail'], $mail, $form_state);
  if ($error = user_validate_mail($form_state['values']['mail'])) {
    form_set_error('mail', $error);
  }
  elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', 0, '<>')
    ->condition('mail', db_like($form_state['values']['mail']), 'LIKE')->range(0, 1)->execute()->fetchField()
  ) {
    form_set_error('mail', t('This email is already registered. <br />' . l('Forgot your password?', 'user/password')));
  }
}


// TODO: Remove if not needed.
function cde_field_widget_form_alter(&$element, &$form_state, $context) {
  //
}


// TODO: Check other conditions and load plugin
/**
 * Implements hook_def_field_plugin_alter().
 */
function cde_def_field_plugin_alter(&$plugin, $element, $form_state, $context) {
  
  if ($plugin['module'] == 'def' && $plugin['plugin type'] == 'field') {
    switch ($plugin['name']) {
      case 'name__name_widget' :
        $plugin_override = ctools_get_plugins('cde', 'field', 'name__name_widget');
        break;
      case 'datetime__date_select' :
        $plugin_override = ctools_get_plugins('cde', 'field', 'datetime__date_select');
        break;
      case 'number_integer__number' :
        // Check field name.
        if (!empty($context['field']['field_name']) && $context['field']['field_name'] == AIRTRIBUNE_CONTESTANT_NUMBER_FIELD) {
          $plugin_override = ctools_get_plugins('cde', 'field', 'number_integer__number');
        }
        break;
    }
    
    if (!empty($plugin_override)) {
      $plugin = $plugin_override;
    }
  }  
}

function cde_name_dateofbirth_element_validate($element, &$form_state) {
  // Here we need to validate both Name and DateOfBirth fields.
  // See field_default_extract_form_values().
  
  global $user;

  // Do nothing for authorized user.
  if ($user->uid) {
    return;
  }
  
  // TODO: Maybe extract data a different way.
  // $entity, $entity_type, $field_parents and $langcode are the same for both, Name and DateOfBirth.
  $entity = $element['#entity'];
  $entity_type = $element['#entity_type'];
  $field_parents = $element['#field_parents'];
  $langcode = LANGUAGE_NONE;
  
  
  $path[AIRTRIBUNE_USER_FULLNAME_FIELD] = array_merge($field_parents, array(AIRTRIBUNE_USER_FULLNAME_FIELD, $langcode));
  $path[AIRTRIBUNE_BIRTHDATE_FIELD] = array_merge($field_parents, array(AIRTRIBUNE_BIRTHDATE_FIELD, $langcode));
  
  $key_exists = NULL;
  $values[AIRTRIBUNE_USER_FULLNAME_FIELD] = drupal_array_get_nested_value($form_state['values'], $path[AIRTRIBUNE_USER_FULLNAME_FIELD], $key_exists);
  $key_exists = NULL;
  $values[AIRTRIBUNE_BIRTHDATE_FIELD] = drupal_array_get_nested_value($form_state['values'], $path[AIRTRIBUNE_BIRTHDATE_FIELD], $key_exists);
  
  //~ dsm($values);
  
  $given = !empty($values[AIRTRIBUNE_USER_FULLNAME_FIELD][0]['given']) ? $values[AIRTRIBUNE_USER_FULLNAME_FIELD][0]['given'] : FALSE;
  $family = !empty($values[AIRTRIBUNE_USER_FULLNAME_FIELD][0]['family']) ? $values[AIRTRIBUNE_USER_FULLNAME_FIELD][0]['family'] : FALSE;
  $birthdate = !empty($values[AIRTRIBUNE_BIRTHDATE_FIELD][0]['value']) ? $values[AIRTRIBUNE_BIRTHDATE_FIELD][0]['value'] : FALSE;
  
  if (!empty($given) && !empty($family) && !empty($birthdate)) {
    $time = new DateObject($birthdate);
    $birthdate = $time->format('Y-m-d H:i:s');
    if (!$time->validGranularity('year', 'month', 'day')) {
      return;
    }
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'profile2');
    $query->entityCondition('bundle', MAIN_PROFILE_TYPE);
    $query->fieldCondition('field_full_name', 'given', $given);
    $query->fieldCondition('field_full_name', 'family', $family);
    $query->fieldCondition('field_birthdate', 'value', $birthdate);
    $orig_query = clone $query;
    $name_exists = $query->count()->execute();
    
    if ($name_exists) {
      // TODO: choose correct element for each field.
      //~ $element = isset($form[$profile_type]) ? $form[$profile_type]['field_full_name'] : $form;
      form_error($element, t('This name, surname and date of birth combination already exist. <a href="!path">Forgot your password?</a>', array('!path' => url('user/password'))));
    }
  }
}

// TODO:
/**
 * Field Validation.
 * 
 * Check that pilot's number is unique.
 */
function cde_pilot_number_element_validate($element, &$form_state) {
  // See field_default_extract_form_values().
  
  // Group ID.
  $gid = !empty($form_state['values']['gid']) ? $form_state['values']['gid'] : FALSE;
  
  $entity = $element['value']['#entity'];
  $bundle = $element['value']['#bundle'];
  $entity_type = $element['value']['#entity_type'];
  $field_parents = $element['value']['#field_parents'];
  $langcode = $element['value']['#language'];
  
  $path = array_merge($field_parents, array(AIRTRIBUNE_CONTESTANT_NUMBER_FIELD, $langcode));
  
  $key_exists = NULL;
  $values = drupal_array_get_nested_value($form_state['values'], $path, $key_exists);
  
  if (!empty($gid) && !empty($values[0]['value']) && is_numeric($pilot_number = $values[0]['value'])) {
    
    // TODO:
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', $entity_type);
    $query->entityCondition('bundle', $bundle);
    $query->propertyCondition('gid', $gid);
    $query->fieldCondition(AIRTRIBUNE_CONTESTANT_NUMBER_FIELD, 'value', $pilot_number);
    //$query->fieldCondition('field_full_name', 'family', $family);
    $number_exists = $query->count()->execute();
    if ($number_exists) {
      // TODO:
      //~ $element = isset($form['field_contestant_number']) ? $form['field_contestant_number'] : $form;
      form_error($element, t('This number is used by another pilot.'));
    }
  }
}

function cde_form_authorized($nid) {
  module_load_include('inc', 'og_ui', 'og_ui.pages');
  module_load_include('inc', 'profile2', 'contrib/profile2_page');
  
  // TODO: Included file should be overriden in case of custom callback.
  // See def comment in def_ajax_defaults().
  drupal_add_js(drupal_get_path('module', 'cde') .'/js/cde.js', 'file');
  
  $profile2_init_data = cde_profile_form_init_data_authorized();
  
  $settings = array(
    '#multiform_id' => 'contest_registration_authorized',
    '#subforms' => array(
      array(
        'form_id' => 'og_ui_confirm_subscribe',
        'args' => cde_og_form_args($nid),
        '#map' => array(
          // TODO:
          array(
            '#parents' => array('actions', 'submit'),
            '#triggering_submit' => array('register'),
          ),
        ),
      ),
      array(
        //'form_id' => 'entity_ui_get_form',
        'form_id' => $profile2_init_data['form_id'],
        //'args' => cde_profile_form_args(),
        'args' => $profile2_init_data['args'],
        '#preprocess_form_state' => array('cde_profile2_form_preprocess_form_state'),
        '#map' => array(
          // TODO:
          array(
            '#parents' => array('actions', 'submit'),
            '#triggering_submit' => array('register'),
          ),
        ),
      ),
    ),
    '#submit_map' => array(
      '#submits' => array(
        'register' => array(
          '#type' => 'submit',
          '#value' => t('Multiform register'),
        ),
      ),
    ),
  );
  
  return abc_get_form($settings);
}


// TODO: Move 'args' function into a single init_data function

function cde_og_form_args($nid) {
  global $user;
  
  $entity_type = 'node';
  $etid = $nid;
  
  $entity = entity_load_single($entity_type, $etid);
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  $field_name = og_get_best_group_audience_field('user', $user->uid, $entity_type, $bundle);
  
  //$entity_type, $id, $user, $field_name
  return array($entity_type, $id, $user, $field_name);
}

// Based on entity_ui_get_form() version 7.x-1.2
function cde_profile_form_init_data() {
  // TODO: Include entity.module ?
  // TODO: Also see profile2_by_uid_load($uid, $type_name) in profile2_pages.module
  // TODO: Remove hardcode
  
  $entity_type = 'profile2';
  $type_name = 'pilot';
  $entity = profile2_create(array('type' => $type_name));
  
  // Based on entity_ui_get_form()
  $form_state = array();
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $form_id = (!isset($bundle) || $bundle == $entity_type) ? $entity_type . '_form' : $entity_type . '_edit_' . $bundle . '_form';
  
  $op = 'add';
  // TODO: Delete this line
  $form_state['build_info']['args'] = array($entity, $op, $entity_type);
  
  $data = array(
    'args' => array($entity, $op, $entity_type),
    'form_id' => $form_id,
  );
  
  return $data;
}

// TODO: see entity_ui_form_defaults() to add 'profile2' into $form_state
// via entity_ui_main_form_defaults (cde_profile2_form_preprocess_form_state())
function cde_profile_form_init_data_authorized() {
  // profile2_form()
  module_load_include('inc', 'profile2', 'contrib/profile2_page');
  
  global $user;
  $uid = $user->uid;
  
  $entity_type = 'profile2';
  $type_name = 'pilot';
  $entity = profile2_by_uid_load($uid, $type_name);
  
  // Based on entity_ui_get_form()
  $form_state = array();
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $form_id = (!isset($bundle) || $bundle == $entity_type) ? $entity_type . '_form' : $entity_type . '_edit_' . $bundle . '_form';
  
  // Default option. See entity_ui_get_form().
  $op = 'edit';
  
  $form_state['build_info']['args'] = array($entity, $op, $entity_type);
  
  $data = array(
    'args' => array($entity, $op, $entity_type),
    'form_id' => $form_id,
  );
  return $data;
}

// Based on entity_ui_get_form() version 7.x-1.2
function cde_profile2_form_preprocess_form_state(&$form_state) {
  $entity_type = 'profile2';
  $form_state['wrapper_callback'] = 'entity_ui_main_form_defaults';
  $form_state['entity_type'] = $entity_type;
  form_load_include($form_state, 'inc', 'entity', 'includes/entity.ui');
}



// TODO:
/**
 * Implements hook_def_validation_enabled().
 */
function cde_def_validation_enabled($element, $form_state) {
  $callback = NULL;
  
  //~ if (isset($form_state['build_info']['form_id']) && $form_state['build_info']['form_id'] == 'user_register_form') {
    $callback = 'cde_def_validation_enabled_callback';
  //~ }
  
  return $callback;
}

// TODO:
function cde_def_validation_enabled_callback($element, $form_state) {
  return TRUE;
}

// TODO:
/**
 * Implements hook_def_ajax_defaults_alter().
 */
function cde_def_ajax_defaults_alter(&$defaults, $form_state) {
  $defaults['def_commands_callback'] = 'cde_ajax_commands';
}

function cde_ajax_commands($selector, $html) {
  //~ if (empty($html)) {
    //~ $html = 'no errors';
  //~ }
  
  //~ $html = "$html $selector";
  
  return array(
    //$commands[] = ajax_command_invoke($selector, 'checkValidationResult', array($html));
    //~ ajax_command_alert($html),
    ajax_command_invoke($selector, 'checkValidationResult', array($html)),
  );
}

// =======================================================
// Ctools
// =======================================================

/**
 * Implements hook_ctools_plugin_type().
 */
// TODO: 'use hooks' ?
function cde_ctools_plugin_type() {
  // Used for field widgets.
  $plugins['field'] = array(
    'use hooks' => FALSE,
  );
  //~ // Used for generic form elements.
  //~ $plugins['generic'] = array(
    //~ 'use hooks' => FALSE,
  //~ );
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function cde_ctools_plugin_directory($module, $plugin) {
  if ($module == 'cde' && $plugin == 'field') {
    return 'plugins/validators/field';
  }
  //~ if ($module == 'cde' && $plugin == 'generic') {
    //~ return 'plugins/validators/generic';
  //~ }
}


// =======================================================
// Clientside validation
// =======================================================

// TODO: This hook should be called before clientside_validation original hook.
// TODO: Check that form is multiform.
// TODO: Seems that hook is not invoked for ajax-validation.
function cde_js_alter(&$javascript) {
  
  $clientsideValidationSettingsKey = NULL;
  $is_multiform = FALSE;
  
  // Check for clientside_validation settings.
  foreach ($javascript['settings']['data'] as $k => $setting) {
      if (!empty($setting['clientsideValidation']['forms'])) {
        $clientsideValidationSettingsKey = $k;
        break;
      }
  }
  
  // Do nothing if there is no clientside_validation settings.
  if (!isset($clientsideValidationSettingsKey)) {
    return;
  }
  
  // Check for multiform.
  //~ foreach ($javascript['settings']['data'] as $k => $setting) {
    //~ if (!empty($setting['cde']['multiform_id'])) {
      //~ $is_multiform = TRUE;
      //~ break;
    //~ }
  //~ }
  $multiform_ids = abc_multiform_ids();
  
  // TODO: Check for specific ids
  if (!empty($multiform_ids)) {
    $is_multiform = TRUE;
    //~ dsm('test');
  }
  
  //~ watchdog('test', 'test');
  
  
  $k = $clientsideValidationSettingsKey;
  $setting = $javascript['settings']['data'][$k];
  //~ dsm($setting);
  
  
  // If there is no multiform
  if (!$is_multiform) {
    
    if (isset($setting['clientsideValidation']['forms']['user-register-form'])) {
      $rules =& $setting['clientsideValidation']['forms']['user-register-form']['rules'];
      
      $rules['profile_main[field_full_name][und][0][given]']['required'] = true;
      $rules['profile_main[field_full_name][und][0][family]']['required'] = true;
      $rules['pass[pass1]']['passwordStrength'] = true;
      $rules['pass[pass1]']['messages']['passwordStrength'] = t('This password is too easy to guess.');
      $rules['pass[pass2]']['passwordConfirmation'] = true;
      $rules['pass[pass2]']['messages']['passwordConfirmation'] = t('Passwords do not match.');
      
      
      $rules['profile_main[field_birthdate][und][0][value][month]']['required'] = true;
      $rules['profile_main[field_birthdate][und][0][value][year]']['required'] = true;
      $rules['profile_main[field_birthdate][und][0][value][day]']['required'] = true;
      
      
      
      //~ dsm($setting);
      
    }
  }
  
  // Preprocess settings for multiform.
  // TODO: This is temporary solution.
  // There could also be regular forms on multiform page.
  else {

    
    // TODO:
    // For now we just copy settings of first subform.
    $multiform_setting = reset($setting['clientsideValidation']['forms']);
    
    $rules = array();
    
    foreach ($setting['clientsideValidation']['forms'] as $f => $subform_setting) {
      $rules += $subform_setting['rules'];
      //~ dsm($subform_setting['rules']);
    }
    $multiform_setting['rules'] = $rules;
    
    $setting['clientsideValidation']['forms'] = array('multiform' => $multiform_setting);
    
    $javascript['settings']['data'][$k] = $setting;
  }
}

function cde_ajax_render_alter(&$commands) {
  //
  
  foreach ($commands as $k => $command) {
    if (isset($command['settings']['clientsideValidation']['forms'])) {
      $forms =& $command['settings']['clientsideValidation']['forms'];
      
      //~ if (isset($command['settings']['clientsideValidation']['forms']['user-register-form'])) {
      
      $is_multiform = FALSE;
      $multiform_ids = abc_multiform_ids();
      
      // TODO: Check for specific ids
      if (!empty($multiform_ids)) {
        $is_multiform = TRUE;
      }
      
      if (isset($forms['user-register-form'])) {
        if ($is_multiform) {
          $forms['multiform'] = $forms['user-register-form'];
          unset($forms['user-register-form']);
        }
      }
      
      if (isset($forms['profile2-edit-pilot-form'])) {
        // TODO:
        if ($is_multiform) {
          $forms['multiform'] = $forms['profile2-edit-pilot-form'];
          unset($forms['profile2-edit-pilot-form']);
        }
        unset($forms['profile2-edit-pilot-form--2']);
      }
      
      $commands[$k] = $command;
      //~ dsm($command);
      break;
    }

  }
}













