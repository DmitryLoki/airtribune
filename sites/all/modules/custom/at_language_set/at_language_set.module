<?php

/**
 * @file
 * Installation file for the Coder module.
 */

/**
 * Implements hook_language_negotiation_info().
 */
function at_language_set_language_negotiation_info() {
  return array(
    'locale-cookie' => array(
      'callbacks' => array(
        'language' => 'at_language_set_language_url_default',
      ),
      'file' => drupal_get_path('module', 'at_language_set') . '/at_language_set.module',
      'name' => t('Airtribune Custom Detection'),
      'description' => t('Determine default language from URL without prefix and write cookie.'),
    ),
  );
}

/**
 * Language negotiation callback
 */
function at_language_set_language_url_default($languages) {

  // Force drush output always be in English.
  if (drupal_is_cli()) {
    return 'en';
  }

  global $_COOKIE;
  $prefix = locale_language_from_url($languages);
  if($prefix){
    setcookie("language", $prefix, time() + 86400, '/');
    return $prefix;
  }
  return $prefix;
}

/**
 * hook_boot impementation
 */
function at_language_set_boot() {
  global $_SERVER;
  global $_COOKIE;
  global $_GET;

  $hardcoded_languages = array(
    'ru' => array('ru', 'be', 'uk', 'kz', 'ky', 'ab', 'mo', 'et', 'lv'),
    'bg' => 'bg',
    'fr' => 'fr',
    'it' => 'it',
    'pl' => 'pl',
    'pt' => 'pt',
    'sr' => 'sr',
    'es' => 'es',
    'tr' => 'tr',
    'en' => 'en',
  );

  $path = explode("/", isset($_GET['q']) ? $_GET['q'] : '');
  if (count($path) > 0 && in_array($path[0], array_keys($hardcoded_languages))) {
    // if language prefix is used then save cookie
    setcookie("language", $path[0], time() + 86400, '/');
  } else {
    // otherwise detect language from browser    
    // if cookie is set and language is EN
    if (empty($_COOKIE['language'])) {
      $language = array();
      if (($list = strtolower($_SERVER['HTTP_ACCEPT_LANGUAGE']))) {
        if (preg_match_all('/([a-z]{1,8}(?:-[a-z]{1,8})?)(?:;q=([0-9.]+))?/', $list, $list)) {
          $language = array_combine($list[1], $list[2]);
          foreach ($language as $n => $v) {
            $language[$n] = $v ? $v : 1;
          }
          arsort($language, SORT_NUMERIC);
        }
      }
      $prefix =  at_language_set_get_best_matched_lang($hardcoded_languages, $language);
      setcookie("language", $prefix, time() + 86400, '/');
      if($prefix!="en"){
        header( 'Location: http://' . $_SERVER['HTTP_HOST'] . '/' . $prefix . '/' . $_GET['q']);
        exit();  
      }
    }
  }  
}

/**
 * Finds best matching language
 */
function at_language_set_get_best_matched_lang($hardcodded_languages, $browser_languages, $default = "en") {
  $languages=array();
  foreach ($hardcodded_languages as $lang => $alias) {
    if (is_array($alias)) {
      foreach ($alias as $alias_lang) {
        $languages[strtolower($alias_lang)] = strtolower($lang);
      }
    } else {
      $languages[strtolower($alias)]=strtolower($lang);
    }
  }

  foreach ($browser_languages as $l => $v) {
    $s = strtok($l, '-'); // убираем то что идет после тире в языках вида "en-us, ru-ru"
    if (isset($languages[$s])) {
      return $languages[$s];
    }
  }
  return $default;
}

function at_language_set_flush_caches(){
  $value = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc',
    ),
    /*'locale-cookie' => array(
      'callbacks' => array(
        'language' => 'at_language_set_language_url_default',
      ),
      'file' => 'sites/all/modules/custom/at_language_set/at_language_set.module',
    ),*/
    'locale-default' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );
  variable_set('language_negotiation_language_content', $value);
  variable_set('language_negotiation_language', $value);

  $value = array(
    'locale-url' => '-10',
    /*'locale-cookie' => '-9',*/
    'locale-session' => '-8',
    'locale-user' => '-7',
    'locale-browser' => '-6',
    'locale-interface' => '-5',
    'language-default' => '-4',
  );
  variable_set('locale_language_providers_weight_language_content', $value);
  variable_set('locale_language_providers_weight_language', $value);
  return array();
}
