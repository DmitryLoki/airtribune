<?php

require_once('geofield.elements.inc');
require_once('geofield.widgets.inc');
require_once('geofield.formatters.inc');
require_once('geofield.openlayers.inc');
require_once('geofield.feeds.inc');

/**
 * Contrib modules can check this global variable to see if geofield is running the new WKB geom schema
 */
$geofield_geom_schema = TRUE;

/**
 * Implements hook_field_info().
 */
function geofield_field_info() {
  return array(
    'geofield' => array(
      'label' => 'Geofield',
      'description' => t('This field stores geo information.'),
      'default_widget' => 'geofield_wkt',
      'default_formatter' => 'geofield_wkt',
      'instance_settings' => array(
        'local_solr' => array(
          'enabled' => FALSE,
          'lat_field' => 'lat',
          'lng_field' => 'lng',
        ),
      ),
      'property_type' => 'geofield',
      'property_callbacks' => array('geofield_property_info_callback'),
      'microdata' => TRUE,
    ),
  );
}

function geofield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_presave().
 */
function geofield_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] === 'geofield') {
    foreach ($items as $delta => $item) {
      $items[$delta] = geofield_compute_values($item);
    }
  }
}

/**
 * Implements hook_field_load().
 */

function geofield_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  /*if ($field['type'] === 'geofield') {
    geophp_load();
    foreach ($items as $delta => $item) {
      $geom = geoPHP::load($item['geom'], 'wkb');
      $item['geom'] = $geom->out('wkt');
    }
  }*/
}

/**
 * Implements hook_content_is_empty().
 */
function geofield_field_is_empty($item, $field) {
  if (isset($item['input_format'])) {
    switch ($item['input_format']) {
      case GEOFIELD_INPUT_LAT_LON:
        return ((trim($item['geom']['lat']) == '') || (trim($item['geom']['lon']) == ''));
      case GEOFIELD_INPUT_BOUNDS:
        return ((trim($item['geom']['top']) == '') || (trim($item['geom']['right']) == '') ||
        (trim($item['geom']['bottom']) == '') || (trim($item['geom']['left']) == ''));
    }
  }
  //@@TODO: Check if it's an empty geometry as per geoPHP $geometry->empty()
  return empty($item['geom']);
}

/**
 * Implements hook_view_api().
 */
function geofield_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'geofield') . '/views',
  );
}

/**
 * Implements hook_ctools_plugin_type().
 */
function geofield_ctools_plugin_type() {
  return array(
    'behaviors' => array(
      'use hooks' => TRUE,
    )
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function geofield_ctools_plugin_api($module, $api) {
  return array('version' => 1);
}

 /**
 * Implements hook_field_instance_settings_form().
 */
function geofield_field_instance_settings_form($field, $instance) {
  $form = array();
  // Add in local solr settings
  if (module_exists('apachesolr')) {

    if (isset($instance['settings']['solrspatial'])) $setting = $instance['settings']['solrspatial'];
    else $setting = array();

    $form['solrspatial'] = array(
      '#type' => 'fieldset',
      '#title' => t('Local Solr Settings'),
      '#tree' => TRUE,
    );

    $form['solrspatial']['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Index field in Solr for spatial search'),
      '#default_value' => isset($setting['enabled']) ? $setting['enabled'] : '',
    );

    $form['solrspatial']['lat_field'] = array(
      '#type' => 'textfield',
      '#title' => t('Name of the Solr Latitude Field'),
      '#default_value' => isset($setting['lat_field']) ? $setting['lat_field'] : '',
    );

    $form['solrspatial']['lng_field'] = array(
      '#type' => 'textfield',
      '#title' => t('Name of the Solr Lonitude Field'),
      '#default_value' => isset($setting['lng_field']) ? $setting['lng_field'] : '',
    );
    $form['solrspatial']['latlng_field'] = array(
      '#type' => 'textfield',
      '#title' => t('Name of the Solr LatLon Field'),
      '#default_value' => isset($setting['latlng_field']) ? $setting['latlng_field'] : '',
    );
  }

  return $form;
}

/**
 * Implements hook_microdata_suggestions().
 */
function geofield_microdata_suggestions() {
  $suggestions = array();

  // Standard suggestion for co-ordinates.
  // http://schema.org/GeoCoordinates
  //
  // Output example:
  // <div itemprop="geo" itemscope itemtype="http://schema.org/GeoCoordinates">
  //   Latitude: 40 deg 44 min 54.36 sec N
  //   Longitude: 73 deg 59 min 8.5 dec W
  //   <meta itemprop="latitude" content="40.75" />
  //   <meta itemprop="longitude" content="73.98" />
  // </div>
  $suggestions['fields']['geofield']['schema.org/GeoCoordinates'] = array(
    '#itemprop' => array('geo'),
    '#is_item' => TRUE,
    '#itemtype' => array('http://schema.org/GeoCoordinates'),
    'wkt' => array(
      '#itemprop' => array('latitude', 'longitude'),
    ),
    'lat' => array(
      '#itemprop' => array('latitude'),
    ),
    'lon' => array(
      '#itemprop' => array('longitude'),
    ),
    'latlon' => array(
      '#itemprop' => array('latitude', 'longitude'),
    ),
  );

  // Suggestion for more complicated shapes.
  // http://schema.org/GeoShape
  //
  // Output example:
  // <div itemprop="geo" itemscope itemtype="http://schema.org/GeoShape">
  //   WKT: LINESTRING (30 10, 10 30, 40 40)
  //   <meta itemprop="line" content="30 10 10 30 40 40"/>
  // </div>
  $shape_base = array(
    '#itemprop' => array('geo'),
    '#is_item' => TRUE,
    '#itemtype' => array('http://schema.org/GeoShape'),
  );

  // Suggestion for a line.
  $suggestions['fields']['geofield']['schema.org/GeoShape line'] = $shape_base;
  $suggestions['fields']['geofield']['schema.org/GeoShape line']['schemaorg_shape']['#itemprop'] = array('line');

  // Suggestion for a polygon.
  $suggestions['fields']['geofield']['schema.org/GeoShape polygon'] = $shape_base;
  $suggestions['fields']['geofield']['schema.org/GeoShape polygon']['schemaorg_shape']['#itemprop'] = array('polygon');

  return $suggestions;
}

/**
 * implements hook_microdata_value_types_alter().
 */
function geofield_microdata_value_types_alter(&$types) {
  $types['geofield'] = 'item_option';
}

/**
 * Geofield Compute Values
 *
 *  Compute all dependant values. We compute all other values from whichever
 * column is specified in the master_column value
 *
 * Steps:
 * 1. Load the geoPHP library
 * 2. Load the Geometry object from the master-column
 * 3. Get out all the computer values from the Geometry object
 * 4. Set all the values
 */
function geofield_compute_values($raw_data, $input_format = NULL) {
  // Load up geoPHP to do the conversions
  $geophp = geophp_load();
  if (!$geophp) {
    drupal_set_message(t("Unable to load geoPHP library. Not all values will be calculated correctly"), 'error');
    return;
  }

  $geometry = NULL;

  if (is_array($raw_data)) {
    if (!empty($raw_data['input_format'])) {
      if ($raw_data['input_format'] == GEOFIELD_INPUT_LAT_LON) {
        $geometry = new Point($raw_data['geom']['lon'], $raw_data['geom']['lat']);
      }
      elseif ($raw_data['input_format'] == GEOFIELD_INPUT_BOUNDS) {
        $wkt_bounds_format = 'POLYGON((left bottom,right bottom,right top,left top,left bottom))';
        $wkt = strtr($wkt_bounds_format, array('top' => $raw_data['geom']['top'],
          'right' => $raw_data['geom']['right'],
          'bottom' => $raw_data['geom']['bottom'],
          'left' => $raw_data['geom']['left']));
        $geometry = geoPHP::load($wkt, 'wkt');
      }
      else {
        $geometry = geoPHP::load($raw_data['geom'], $raw_data['input_format']);
      }
    } else {
      // No input format.
      if (!empty($raw_data['geom'])) {
        $geometry = geoPHP::load($raw_data['geom'], 'wkb');
      }
      // Special case, raw input (Services/Feeds) that only specifies lat/lon.
      elseif (!empty($raw_data['lat']) && !empty($raw_data['lon'])) {
        $geometry = new Point($raw_data['lon'], $raw_data['lat']);
      }
    }
  }
  else {
    // All we have is raw data, if the caller has specified an input-format as per geoPHP::getAdapterMap, use that
    if ($input_format) {
      $geometry = geoPHP::load($raw_data, $input_format);
    }
    else {
      // All we have at this point is a raw string. Attempt to load from known
      // input formats provided by geoPHP.
      $input_formats = array_keys(geoPHP::getAdapterMap());
      foreach ($input_formats as $input_format) {
        try {
          $tmp_geometry = geoPHP::load($raw_data, $input_format);
          if (!empty($tmp_geometry)) {
            $geometry = $tmp_geometry;
            break;
          }
        } catch (Exception $e) {
          // No harm, no foul. We didn't want to use that data anyway.
        }
      }
    }
  }

  // Get values from geometry
  if (!empty($geometry)) {
    $values = geofield_get_values_from_geometry($geometry);
  }
  else {
    $values = array();
  }

  return $values;
}

/**
 * Given a geometry object from geoPHP, return a values array
 */
function geofield_get_values_from_geometry($geometry) {
  $centroid = $geometry->getCentroid();
  $bounding = $geometry->getBBox();

  $values['geom'] = $geometry->out('wkb');
  $values['geo_type'] = drupal_strtolower($geometry->getGeomType());

  if ($centroid) {
    $values['lat'] = $centroid->getY();
    $values['lon'] = $centroid->getX();
  }

  $values['top'] = $bounding['maxy'];
  $values['bottom'] = $bounding['miny'];
  $values['right'] = $bounding['maxx'];
  $values['left'] = $bounding['minx'];

  if ($geometry->SRID()) {
    $values['srid'] = $geometry->SRID();
  }

  return $values;
}

/**
 * Implements hook_apachesolr_field_mappings().
 */
function geofield_apachesolr_field_mappings() {
  return array(
    'geofield' => array(
      'indexing_callback' => 'geofield_apachesolr_index',
      'facets' => TRUE,
    )
  );
}

/**
 * Name callback for field name
 */
function geofield_apachesolr_index($node, $field_name, $index_key, $field_info) {
  $return = array();
  if (isset($node->$field_name)) {
    // Load the instance settings for the field
    $instance = field_info_instance('node', $field_name, $node->type);
    if (!empty($instance['settings']['solrspatial'])) {
      if ($values = field_get_items('node', $node, $field_name)) {
        $values = reset($values);
        $return = array(
          array(
            'key' => $instance['settings']['solrspatial']['lat_field'],
            'value' => $values['lat']
          ),
          array(
            'key' => $instance['settings']['solrspatial']['lng_field'],
            'value' =>  $values['lon']
          ),
          array(
            'key' => $instance['settings']['solrspatial']['latlng_field'],
            'value' =>  $values['lat'] . ',' . $values['lon']
          ),
          array(
            'key' => 'ss_geo_wkt',
            'value' => $values['wkt'],
          ),
        );
      }
    }
  }

  return $return;
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function geofield_apachesolr_query_alter($query) {
  // Add the WKT field field
  $query->addParam('fl', 'ss_geo_wkt');
}


// Latitude and Longitude string conversion
// ----------------------------------------

/**
 * Decimal-Degrees-Seconds to Decimal Degrees
 *
 * Converts string to decimal degrees. Has some error correction for messy strings
 */
function geofield_latlon_DMStoDEC($dms) {
  if (is_numeric($dms)) {
    // It's already decimal degrees, just return it
    return $dms;
  }

  // If it contains both an H and M, then it's an angular hours
  if (stripos($dms, 'H') !== FALSE && stripos($dms, 'M') !== FALSE) {
    $dms = strtr($dms, "'\"HOURSMINTECNDAhoursmintecnda", "  ");
    $dms = preg_replace('/\s\s+/', ' ', $dms);

    $dms = explode(" ", $dms);
    $deg = $dms[0];
    $min = $dms[1];
    $sec = $dms[2];

    $dec = floatval(($deg*15) + ($min/4) + ($sec/240));

    return $dec;
  }

  // If it contains an S or a W, then it's a negative
  if (stripos($dms, 'S') !== FALSE || stripos($dms, 'W') !== FALSE) {
    $direction = -1;
  }
  else {
    $direction = 1;
  }

  // Strip all characters and replace them with empty space
  $dms = strtr($dms, "�'\"NORTHSEAWnorthseaw'", " ");
  $dms = preg_replace('/\s\s+/', ' ', $dms);

  $dms = explode(" ", $dms);
  $deg = $dms[0];
  $min = $dms[1];
  $sec = $dms[2];

  // Direction should be checked only for nonnegative coordinates
  $dec = floatval($deg+((($min*60)+($sec))/3600));
  if ($dec > 0) {
    $dec = $direction * $dec;
  }
  return $dec;
}


/**
 * Decimal Degrees to Decimal-Degrees-Seconds
 *
 * Converts decimal longitude / latitude to DMS ( Degrees / minutes / seconds )
 */
function geofield_latlon_DECtoDMS($dec, $axis) {
  if ($axis == 'lat') {
    if ($dec < 0) $direction = 'S';
    else $direction = 'N';
  }
  if ($axis == 'lon') {
    if ($dec < 0) $direction = 'W';
    else $direction = 'E';
  }

  $vars = explode(".", $dec);
  $deg = abs($vars[0]);
  if (isset($vars[1])) {
    $tempma = "0." . $vars[1];
  }
  else {
    $tempma = "0";
  }

  $tempma = $tempma * 3600;
  $min = floor($tempma / 60);
  $sec = $tempma - ($min*60);

  return $deg . "&deg; " . $min . "' " . round($sec, 3) . "\" " . $direction;
}

/**
 * Decimal Degrees to Celestial coordinate system (CCS) units
 *
 * Converts decimal latitude to DMS ( Degrees / minutes / seconds ) and decimal longitude to Angular Hours / Minutes / Seconds
 */
function geofield_latlon_DECtoCCS($dec, $axis) {

  // Declination (celestial latitude) should be representeted in Degrees / minutes / seconds
  if ($axis == 'lat') {
    $vars = explode("." , $dec);
    $deg = $vars[0];
    if (isset($vars[1])) {
      $tempma = "0." . $vars[1];
    }
    else {
      $tempma = "0";
    }

    $tempma = $tempma * 3600;
    $min = floor($tempma / 60);
    $sec = $tempma - ($min*60);

    return $deg . "&deg; " . $min . "' " . round($sec, 3) . "\"";
  }

  // Right ascension (celestial longitude) should be representeted in Hours / Minutes / Seconds
  if ($axis == 'lon') {
    $tempma = $dec / 15;
    $vars = explode(".", $tempma);
    $hrs = $vars[0];
    if (isset($vars[1])) {
      $tempma = "0." . $vars[1];
    }
    else {
      $tempma = "0";
    }
    $tempma = $tempma * 60;
    $vars = explode(".", $tempma);
    $min = $vars[0];
    if (isset($vars[1])) {
      $tempma = "0." . $vars[1];
    }
    else {
      $tempma = "0";
    }
    $sec = $tempma * 60;

    return $hrs . "h " . $min . "m " . round($sec, 3) . "s";
  }
}

/**
 * Schema.org format.
 *
 * Formats shapes for output in metadata using Schema.org format. This is
 * different from the WKT format provided by GeoGenerator, so just use a one
 * off function.
 */
function geofield_schemaorg_shape($item) {
  $output = '';
  $bottom = $item['bottom'];
  $left = $item['left'];
  $right = $item['right'];
  $top = $item['top'];

  switch ($item['geo_type']) {
    case 'polygon':
      $output  = $bottom . ',' . $left . ' ';
      $output .= $bottom . ',' . $right . ' ';
      $output .= $top . ',' . $right . ' ';
      $output .= $top . ',' . $left . ' ';
      $output .= $bottom . ',' . $left;
      break;
    case 'linestring':
      $output  = $bottom . ',' . $left . ' ';
      $output .= $bottom . ',' . $right . ' ';
      $output .= $top . ',' . $right . ' ';
      $output .= $top . ',' . $left;
      break;
  }

  return $output;
}

/**
 * Callback to alter the property info of geofield fields.
 *
 * @see geofield_field_info()
 */
function geofield_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<geofield>' : 'geofield';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
//  $property['auto creation'] = 'geofield_default_values';
  $property['property info'] = geofield_data_property_info('Geofield');
  unset($property['query callback']);
}

/**
 * Defines info for the properties of the geofield field data structure.
 */
function geofield_data_property_info($name = NULL) {
  // Build an array of basic property information for the geofield field.

  // If any of these should have individual options to set microdata
  // properties is not clear. Lat, Lon work fine. Other data is more
  // complicated. Geo_type relates (not 1:1) with the itemprop within
  // a GeoShape, with an alternate representation of the wkt for the content
  // (at its simplest).
  $properties = array(
    'geom' => array(
      'label' => 'Well-known text',
      'type' => 'text',
      'microdata' => FALSE,
    ),
    'geo_type' => array(
      'label' => 'Geo Type',
      'options list' => '_geofield_geo_types_options_callback',
      'required' => TRUE,
      'microdata' => FALSE,
    ),
    'lat' => array(
      'label' => 'Latitude',
      'type' => 'decimal',
      'required' => TRUE,
      'setter callback' => 'entity_property_verbatim_set',
      'microdata' => TRUE,
    ),
    'lon' => array(
      'label' => 'Longitude',
      'type' => 'decimal',
      'required' => TRUE,
      'setter callback' => 'entity_property_verbatim_set',
      'microdata' => TRUE,
    ),
    'left' => array(
      'label' => 'Left Latitude',
      'type' => 'decimal',
      'setter callback' => 'entity_property_verbatim_set',
      'microdata' => FALSE,
    ),
    'top' => array(
      'label' =>  'Top Longitude',
      'type' => 'decimal',
      'setter callback' => 'entity_property_verbatim_set',
      'microdata' => FALSE,
    ),
    'right' => array(
      'label' => 'Right Latitude',
      'type' => 'decimal',
      'setter callback' => 'entity_property_verbatim_set',
      'microdata' => FALSE,
    ),
    'bottom' => array(
      'label' => 'Bottom Longitude',
      'type' => 'decimal',
      'setter callback' => 'entity_property_verbatim_set',
      'microdata' => FALSE,
    ),
    'srid' => array(
      'label' => 'Projection (SRID)',
      'type' => 'integer',
      'microdata' => FALSE,
    ),
    'latlon' => array(
      'label' => 'LatLong Pair',
      'type'  => 'string',
      'getter callback' => 'geofield_return_latlon',
      'microdata' => FALSE,
    ),
    'schemaorg_shape' => array(
      'label' => 'Schema.org Shape',
      'type' => 'string',
      'getter callback' => 'geofield_return_schemaorg_shape',
      'microdata' => TRUE,
    ),
  );

  // Add the default values for each of the geofield properties.
  foreach ($properties as $key => &$value) {
    $value += array(
      'description' => !empty($name) ? t('!label of field %name', array('!label' => $value['label'], '%name' => $name)) : '',
      'getter callback' => 'entity_property_verbatim_get',
    );
  }

  return $properties;
}


function _geofield_geo_types_options_callback() {

  $geophp = geophp_load();
  if (!$geophp) {
    return;
  }
  return geoPHP::geometryList();

}

/**
 * Gets the a latlong property.
 */
function geofield_return_latlon($data, array $options, $name) {
  if ((is_array($data) || (is_object($data) && $data instanceof ArrayAccess))) {
    return $data['lat'] . ',' . $data['lon'];
  }
  return NULL;
}

/**
 * Gets the Schema.org formatted shape value.
 */
function geofield_return_schemaorg_shape($data, array $options, $name) {
  if ((is_array($data) || (is_object($data) && $data instanceof ArrayAccess))) {
    return geofield_schemaorg_shape($data);
  }
  return NULL;
}

/**
 * Haversine formula, useful for injecting into an SQL statement. In instances where it isn't possible to pass in variables dynamically (i.e. field
 *   definitions), this function will bake in values directly into the snippet.
 *
 * @param $options
 *   An array of parameters that can be passed along to be injected directly into the SQL snippet. The following array keys are checked...
 *     - origin_latitude
 *     - origin_longitude
 *     - destination_latitude
 *     - destination_longitude
 *     - earth_radius
 *
 * @return
 *   A string suitable for injection into DBTNG. Any option passed into the function will be baked into the string directly. Any variable missing will
 *     be represented as :[variable]. (i.e. :earth_radius).
 */

function geofield_haversine($options = array()) {
  $formula = '( :earth_radius * ACOS( COS( RADIANS(:origin_latitude) ) * COS( RADIANS(:destination_latitude) ) * COS( RADIANS(:destination_longitude) - RADIANS(:origin_longitude) ) + SIN( RADIANS(:origin_latitude) ) * SIN( RADIANS(:destination_latitude) ) ) )';

  foreach ($options as $key => $option) {
    if (is_numeric($option)) {
      $formula = str_replace(':' . $key, $option, $formula);
    }
    else {
      $formula = str_replace(':' . $key, db_escape_field($option), $formula);
    }
  }

  return $formula;
}
