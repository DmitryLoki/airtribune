<?php

require_once('geofield.widgets.inc');
require_once('geofield.formatters.inc');

/**
 * Implements hook_field_info().
 */
function geofield_field_info() {
  return array(
    'geofield' => array(
      'label' => 'Geofield',
      'description' => t('This field stores geo information.'),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'default',
    ),
  );
}

/**
 * Implements hook_field_presave().
 * PDO throws an error when attempting to insert an empty string into a float
 * field. Go through all values and convert empty strings to NULL.
 */
function geofield_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] === 'geofield') {
    foreach ($items as $delta => $item) {
      if (!empty($item)) {
        foreach ($item as $k => $v) {
          if ($v === '') {
            $items[$delta][$k] = NULL;
          }
        }
      }
    }
  }
}

/**
 * Implements of hook_content_is_empty().
 * 
 * TODO: lat lon are optional, so this is broken.
 */
function geofield_field_is_empty($item, $field) {
  return (empty($item['wkt']));
}

/**
 * Implements hook_field_instance_settings_form().
 */
function geofield_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  
  //TODO: Allow more fine-grained control
  if (module_exists('openlayers_ui')) {
    
    // Get preset options, filtered to those which have the GeoField behavior
    $presets = openlayers_presets();
    $preset_options = array();
    foreach ($presets as $preset) {
      if (array_key_exists('openlayers_behavior_geofield',$preset->data['behaviors'])) {
        $preset_options[$preset->name] = $preset->title;
      }
    }
    
    $form['only_openlayers_map'] = array(
      '#type' => 'checkbox',
      '#title' => t('Only Display Map'),
      '#default_value' => isset($settings['only_openlayers_map']) ? $settings['only_openlayers_map'] : FALSE,
      '#description' => t('Hide all textfields, leaving only the openlayers map'),
    );
    $form['openlayers_preset'] = array(
      '#type' => 'select',
      '#title' => t('Only Display Map'),
      '#default_value' => isset($settings['openlayers_preset']) ? $settings['openlayers_preset'] : 'geofield_map',
      '#options' => $preset_options,
      '#description' => t('Select which OpenLayers map you would like to use. Only maps which have the GeoField behavior may be selected. If your preferred map is not here, add the GeoField behavior to it first.'),
    );
    
  }

  return $form;
}

/**
 * Implementation of hook_feeds_node_processor_targets_alter().
 */
function geofield_feeds_processor_targets_alter(&$targets, $entity_type,
  $bundle_name) {
    foreach (field_info_instances($entity_type, $bundle_name) as
      $name => $instance) {
    $info = field_info_field($name);
    if ($info['type'] == 'geofield') {
      $targets[$info['field_name'] . ':wkt'] = array(
        'name' => t($instance['label'] . ' WKT'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':type'] = array(
        'name' => t($instance['label'] . ' Type'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':lat'] = array(
        'name' => t($instance['label'] . ' Latitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':lon'] = array(
        'name' => t($instance['label'] . ' Longitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':left'] = array(
        'name' => t($instance['label'] . ' Left Latitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':top'] = array(
        'name' => t($instance['label'] . ' Top Longitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':right'] = array(
        'name' => t($instance['label'] . ' Right Latitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':bottom'] = array(
        'name' => t($instance['label'] . ' Bottom Longitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
    }
  }
}

/**
 * Example callback specified in hook_feeds_processor_targets_alter().
 *
 * @param $source
 *   Field mapper source settings.
 * @param $entity
 *   An entity object, for instance a node object.
 * @param $target
 *   A string identifying the target on the node.
 * @param $value
 *   The value to populate the target with.
 *
 */
function geofield_set_target($source, $entity, $target, $value) {
  list($field_name, $sub_field) = explode(':', $target, 2);
  $entity->{$field_name}['und'][0][$sub_field] = $value;
}

/**
 * Implementation of hook_view_api().
 */
function geofield_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'geofield')
    . '/views');
}

/**
 * Implements hook_ctools_plugin_type
 */
function geofield_ctools_plugin_type() {
  return array(
    'behaviors' => array(
      'use hooks' => TRUE,
    )
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function geofield_ctools_plugin_api($module, $api) {
  return array('version' => 1);
}

/**
 * Implements hook_openlayers_behaviors().
 */
function geofield_openlayers_behaviors() {
  return array(
    'openlayers_behavior_geofield' => array(
      'title' => t('Geofield'),
      'description' => t('Fuels the geotaxonomy map-input form.'),
      'type' => 'layer',
      'path' => drupal_get_path('module', 'geofield') .'/includes/behaviors',
      'file' => 'openlayers_behavior_geofield.inc',
      'behavior' => array(
        'class' => 'openlayers_behavior_geofield',
        'parent' => 'openlayers_behavior',
      ),
    ),
  );
}

/**
 * Implementation of hook_openlayers_presets().
 */
function geofield_openlayers_presets() {
  // Create full preset array
  $default = new stdClass();
  $default->api_version = 1;
  $default->name = 'geofield_map';
  $default->title = t('Geofield Map');
  $default->description = t('A Map Used for Geofield Input');
  $default->data = array(
    'projection' => '900913',
    'width' => '600px',
    'default_layer' => 'osm_mapnik',
    'height' => '400px',
    'center' => array(
      'initial' => array(
        'centerpoint' => '0,0',
        'zoom' => '2'
      )
    ),
    'options' => array(
      'maxExtent' => openlayers_get_extent('900913'),
    ),
    'behaviors' => array(
      'openlayers_behavior_panzoombar' => array(),
      'openlayers_behavior_attribution' => array(),
      'openlayers_behavior_geofield' => array(),
      'openlayers_behavior_keyboarddefaults' => array()
    ),
    'layers' => array(
      'osm_mapnik',
    )
  );
  return array('geofield_map' => $default);
}
